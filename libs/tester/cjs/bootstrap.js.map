{"version":3,"sources":["../lib/bootstrap.js"],"sourcesContent":["import path from 'node:path';\nimport fs from 'node:fs';\nimport _ from 'lodash';\nimport { esmCheck, batchAsync_ } from '@galaxar/utils';\n\nimport GxTester from './testerCore';\n\nlet _initialized = false;\nlet _config = null;\nlet _asyncDump = null;\n\nconst bootstrap = () => {\n    let configPath = path.resolve(process.cwd(), 'test.config.json');\n    if (!fs.existsSync(configPath)) {\n        configPath = path.resolve(process.cwd(), 'test/test.config.json');\n\n        if (!fs.existsSync(configPath)) {\n            throw new Error('Cannot find \"test.config.json\" in current directory or \"./test\".');\n        }\n    }\n\n    _config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n    processConfigSection(_config.only);\n    processConfigSection(_config.skip);\n\n    if (_config.enableAsyncDump) {\n        _asyncDump = esmCheck(require('./asyncDump'));\n    }    \n\n    global.gxt = new GxTester(_config);\n};\n\nconst processConfigSection = (section) => {\n    if (section) {\n        configFileListToHashSet(section, 'files');\n        if (section.suites) {\n            section.suites = _.mapValues(section.suites, (value) => {\n                if (Array.isArray(value)) {\n                    return new Set(value);\n                }\n                return value;\n            });\n        }\n    }\n};\n\nconst configFileListToHashSet = (node, listKey) => {\n    const list = node[listKey];\n    if (list) {\n        node[listKey] = new Set(list.map((file) => path.resolve(process.cwd(), file)));\n    }\n};\n\nif (!_initialized) {\n    _initialized = true;\n    bootstrap();\n}\n\nexport const mochaHooks = {\n    beforeEach(done) {\n        const testCaseTitle = this.currentTest.title;\n        const testFile = this.currentTest.file;\n        const testSuiteTitle = this.currentTest.parent.title;\n\n        const _done = () => {\n            // do something if needed\n            done();\n        };\n\n        if (!_.isEmpty(_config.only)) {\n            // only mode\n            const { files, suites } = _config.only;\n\n            // Check if the test file, suite, or case is in the config\n            // If it is not, skip the test\n\n            if (files && !files.has(testFile)) {\n                this.skip();\n                return done();\n            }\n\n            if (suites) {\n                const suiteInfo = suites[testSuiteTitle];\n\n                if (suiteInfo == null) {\n                    this.skip();\n                    return done();\n                }\n\n                if (suiteInfo === 'all') {\n                    return _done();\n                }\n\n                if (!suiteInfo.has(testCaseTitle)) {\n                    this.skip();\n                    return done();\n                }\n            }\n        } else if (!_.isEmpty(_config.skip)) {\n            // skip mode\n            const { files, suites } = _config.skip;\n\n            // Check if the test file, suite, or case is in the config\n            if (files && files.has(testFile)) {\n                // If it is, skip the test\n                this.skip();\n                return done();\n            }\n\n            if (suites) {\n                const suiteInfo = suites[testSuiteTitle];\n                if (suiteInfo != null) {\n                    if (suiteInfo === 'all') {\n                        this.skip();\n                        return done();\n                    }\n\n                    if (suiteInfo.has(testCaseTitle)) {\n                        this.skip();\n                        return done();\n                    }\n                }\n            }\n        }\n\n        _done();\n    },\n};\n\nexport const mochaGlobalSetup = async function () {\n    if (_config.enableAllure) {\n        global.allure = esmCheck(require('allure-mocha/runtime')).allure;\n    }\n\n    if (process.env.COVER) {\n        const { servers } = _config;\n        servers && await batchAsync_(Object.keys(servers), async (serverName) => {\n            await gxt.startServer_(serverName);\n        });\n    }\n};\n\nexport const mochaGlobalTeardown = async function () {\n    await gxt.closeAllServers_();\n\n    if (_config.enableAsyncDump) {\n        _asyncDump();\n    }\n};\n"],"names":["mochaHooks","mochaGlobalSetup","mochaGlobalTeardown","_initialized","_config","_asyncDump","bootstrap","configPath","path","resolve","process","cwd","fs","existsSync","Error","JSON","parse","readFileSync","processConfigSection","only","skip","enableAsyncDump","esmCheck","require","global","gxt","GxTester","section","configFileListToHashSet","suites","_","mapValues","value","Array","isArray","Set","node","listKey","list","map","file","beforeEach","done","testCaseTitle","currentTest","title","testFile","testSuiteTitle","parent","_done","isEmpty","files","has","suiteInfo","enableAllure","allure","env","COVER","servers","batchAsync_","Object","keys","serverName","startServer_","closeAllServers_"],"mappings":"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"}