{"version":3,"sources":["../lib/testerCore.js"],"sourcesContent":["import { _, esmCheck, toBoolean, batchAsync_ } from '@galaxar/utils';\nimport { startWorker, HttpClient } from '@galaxar/app';\nimport Benchmark from 'benchmark';\nimport path from \"node:path\";\n\nfunction serialize(obj, replacer, space) {\n    let content;\n    let type;\n\n    if (typeof obj === 'string') {\n        content = obj;\n        type = 'text/plain';\n    } else {\n        content = JSON.stringify(obj, replacer, space);\n        type = 'application/json';\n    }\n\n    return { content, type };\n}\n\nclass GxTester {\n    constructor(config) {\n        this.config = config;\n        this.startedServers = {};\n        this.isCoverMode = process.env.COVER && toBoolean(process.env.COVER);\n    }\n\n    // ------------------------------\n    // allure\n    // ------------------------------\n\n    async step_(name, fn) {\n        if (allure) {\n            await allure.step(name, fn);\n        }\n    }\n\n    param(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value);\n            allure.parameter(name, content, type);\n        }\n    }\n\n    attach(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value, null, 4);\n            allure.attachment(name, content, type);\n        }\n    }\n\n    // ------------------------------\n    // server\n    // ------------------------------\n\n    // specially for server code coverage test with supertest agent\n    async startServer_(name) {        \n        if (this.startedServers[name]) {\n            return this.startedServers[name];\n        }\n\n        const { servers } = this.config;\n        const serverEntry = servers?.[name];\n\n        if (!serverEntry) {\n            throw new Error(`Server entry for \"${name}\" not found`);\n        }\n\n        const _serverInfo = typeof serverEntry === 'string' ? { entry: serverEntry } : serverEntry;\n\n        const createServer = esmCheck(require(path.resolve(process.cwd(), _serverInfo.entry)));\n\n        const server = await createServer(name, _serverInfo.options);\n        await server.start_();\n\n        this.startedServers[name] = server;\n        return server;\n    }\n\n    async stopServer_(server) {\n        if (typeof server === 'string') {\n            server = this.startedServers[server];\n        }\n\n        await server.stop_();\n\n        delete this.startedServers[server.name];\n    }\n\n    async closeAllServers_() {\n        await batchAsync_(Object.values(this.startedServers), async (server) => {\n            await server.stop_();\n        });\n        this.startedServers = {};\n    }\n\n    // ------------------------------\n    // worker\n    // ------------------------------\n\n    /**\n     * Start a worker app for testing\n     * @param {function} testToRun - Test (async) function to run.\n     * @param {*} options - Options passed to the test worker, see startWorker of @galaxar/app.\n     * @async\n     */\n    async startWorker_(testToRun, options) {\n        let err;\n\n        const result = await startWorker(\n            async (app) => {\n                try {\n                    return await testToRun(app);\n                } catch (e) {\n                    console.error(e);\n                    err = e;\n                }\n            },\n            {\n                workerName: 'tester',\n                configName: 'test',\n                configPath: 'test/conf',\n                ignoreUncaught: true,\n                exitOnUncaught: false,\n                ...this.config.workerOptions,\n                ...options,\n            }\n        );\n\n        if (err) {\n            throw err;\n        }\n\n        return result;\n    }\n\n    // ------------------------------\n    // httpClient\n    // ------------------------------\n\n    /**\n     *\n     * @param {*} server\n     * @param {*} [authenticator]\n     * @param {*} testToRun\n     * @param {*} options\n     * @returns\n     */\n    async withHttpClient_(server, authenticator, testToRun, options) {\n        if (typeof options === 'undefined') {\n            if (typeof testToRun === 'undefined') {\n                testToRun = authenticator;\n                authenticator = null;\n            } else if (typeof testToRun === 'object') {\n                options = testToRun;\n                testToRun = authenticator;\n                authenticator = null;\n            }\n        }\n\n        const { worker: workerOptions, client: clientOptions } = options || {};\n        if (typeof server === 'string') {\n            server = await this.startServer_(server);\n        }\n\n        return this.startWorker_(async (app) => {\n            if (typeof authenticator === 'string') {\n                authenticator = defaultUserAuth(authenticator /** authticationKey */);\n            }\n\n            const { authentication: authConfig } = this.config;\n\n            const getHttpClient_ = async () => {\n                const agentCreatorModule =\n                    this.config.httpAgent?.[this.isCoverMode ? 'coverage' : 'normal'] ??\n                    (this.isCoverMode ? 'supertest' : 'superagent');\n                const agentCreator = esmCheck(require(`@galaxar/adapters/${agentCreatorModule}`));\n\n                const agent = agentCreator();\n\n                const client = new HttpClient(agent, clientOptions);\n                if (this.isCoverMode) {\n                    console.log('set server', '--------------------', server != null);\n                    client.server = server.httpServer;\n                }\n\n                client.onResponse = (result, req, res) => {\n                    this.attach(`${req.method} ${req.url}`, { headers: res.header, response: result });\n                };\n\n                if (!authenticator) {\n                    delete client.onSending;\n                    return client;\n                }\n\n                await authenticator(client, authConfig);\n\n                return client;\n            }\n\n            const client = await getHttpClient_();\n            return testToRun(client, app);\n        }, workerOptions);\n    }\n\n    // ------------------------------\n    // benchmark\n    // ------------------------------\n\n    /**\n     * Run benchmark against given methods.\n     * @param {*} mapOfMethods - Map of name to function with payload\n     * @param {*} verifier - Function to verify the result of each method\n     * @param {*} payload\n     */\n    async benchmark_(mapOfMethods, verifier, payload) {\n        const suite = new Benchmark.Suite();\n\n        _.each(mapOfMethods, (f, name) => {\n            verifier(f(payload));\n\n            suite.add(name, function () {\n                f(payload);\n            });\n        });\n\n        return new Promise((resolve, reject) => {\n            const self = this;\n\n            suite\n                .on('cycle', function (event) {\n                    const cycleMessage = String(event.target);\n                    console.log(cycleMessage);\n                    self.attach('cycle', cycleMessage);\n                })\n                .on('complete', function () {\n                    const completeMessage = 'The fastest is ' + this.filter('fastest').map('name');\n                    self.attach('complete', completeMessage);\n                    resolve();\n                })\n                .on('error', (event) => reject(String(event.target)))\n                .run({ async: true });\n        });\n    }\n}\n\nexport default GxTester;\n"],"names":["serialize","obj","replacer","space","content","type","JSON","stringify","GxTester","step_","name","fn","allure","step","param","value","parameter","attach","attachment","startServer_","startedServers","servers","config","serverEntry","Error","_serverInfo","entry","createServer","esmCheck","require","path","resolve","process","cwd","server","options","start_","stopServer_","stop_","closeAllServers_","batchAsync_","Object","values","startWorker_","testToRun","err","result","startWorker","app","e","console","error","workerName","configName","configPath","ignoreUncaught","exitOnUncaught","workerOptions","withHttpClient_","authenticator","worker","client","clientOptions","defaultUserAuth","authentication","authConfig","getHttpClient_","agentCreatorModule","httpAgent","isCoverMode","agentCreator","agent","HttpClient","log","httpServer","onResponse","req","res","method","url","headers","header","response","onSending","benchmark_","mapOfMethods","verifier","payload","suite","Benchmark","Suite","_","each","f","add","Promise","reject","self","on","event","cycleMessage","String","target","completeMessage","filter","map","run","async","constructor","env","COVER","toBoolean"],"mappings":"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"}