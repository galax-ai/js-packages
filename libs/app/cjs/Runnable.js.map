{"version":3,"sources":["../lib/Runnable.js"],"sourcesContent":["import { _, sleep_, batchAsync_ } from '@galaxar/utils';\nimport { InvalidConfiguration } from '@galaxar/types';\nimport { defaultAppOpts } from './defaultOpts';\nimport { consoleLogger, makeLogger } from './logger';\n\n/**\n * Runnable app mixin.\n * @param {object} T - Base class.\n * @returns {Runnable} A runable app class.\n * @constructs Runnable(T)\n */\nconst Runnable = (T) =>\n    class extends T {\n        _getOnUncaughtException = (exitOnError) => (err) => {\n            if (exitOnError) {\n                //wait 1 second for flushing the last log\n                let waitForLogging = setTimeout(() => {\n                    process.exit(1);\n                }, 1000);\n\n                this.log('error', err, () => {\n                    clearTimeout(waitForLogging);\n                    process.exit(1);\n                });\n            } else {\n                this.logError(err);\n            }\n        };\n\n        _onWarning = (warning) => {\n            this.log('warn', warning.message);\n        };\n\n        _onExit = (code) => {\n            if (this.started) {\n                this.stop_().catch(this.logError);\n            }\n        };\n\n        /**\n         * @param {string} name - The name of the application.\n         * @param {object} [options] - Application options\n         * @property {string} [options.logLevel='info'] - Logging level\n         * @property {object} [options.ignoreUncaught=false] - Whether to skip the handling of uncaught exception\n         * @property {object} [options.exitOnUncaught=true] - Whether to exit process on uncaught exception thrown\n         * @constructs Runnable\n         */\n        constructor(name, options) {\n            super(name, {\n                ...defaultAppOpts,\n                ...options,\n            });\n\n            this.runnable = true;\n\n            this.libModulesPath = this.toAbsolutePath(this.options.libModulesPath);\n        }\n\n        /**\n         * Start the app\n         * @returns {Promise}\n         * @memberof Runnable\n         */\n        async start_() {\n            this._initialize();\n\n            process.on('exit', this._onExit);\n\n            return super.start_();\n        }\n\n        /**\n         * Stop the app\n         * @returns {Promise}\n         * @memberof Runnable\n         */\n        async stop_() {\n            if (this.started) {\n                if (this.libModules) {\n                    await batchAsync_(this.libModules, (lib) => lib.stop_());\n                    delete this.libModules;\n                }\n            }\n\n            process.removeListener('exit', this._onExit);\n\n            await super.stop_();\n\n            await sleep_(0);\n\n            this._uninitialize();\n        }\n\n        /**\n         * Get the lib module\n         * @param {string} libName\n         * @memberof Runnable\n         */\n        getLib(libName) {\n            if (!this.libModules) {\n                throw new Error('\"libModules\" feature is required to access lib among modules.');\n            }\n\n            let libModule = this.libModules[libName];\n\n            if (!libModule) {\n                throw new Error(`Lib module [${libName}] not found.`);\n            }\n\n            return libModule;\n        }\n\n        /**\n         * Require a module from the source path of a library module\n         * @param {*} relativePath\n         * @memberof Runnable\n         */\n        requireFromLib(libName, relativePath) {\n            let libModule = this.getLib(libName);\n            return libModule.require(relativePath);\n        }\n\n        /**\n         * Register a loaded lib module\n         * @param {LibModule} lib\n         * @memberof Runnable\n         */\n        registerLib(lib) {\n            if (!this.libModules) {\n                this.libModules = {};\n            }\n\n            if (lib.name in this.libModules) {\n                throw new InvalidConfiguration(`Lib module [${lib.name}] already exists.`, this, {\n                    name: lib.name,\n                });\n            }\n\n            this.libModules[lib.name] = lib;\n        }\n\n        /**\n         * Get a registered service\n         * @param {string} name\n         *\n         * @example\n         *  // Get service from a lib module\n         *  const service = app.getService('<lib name>/<service name>');\n         *  // e.g const service = app.getService('data/mysql.mydb');\n         * @memberof Runnable\n         */\n        getService(name) {\n            let pos = name.indexOf('/');\n            if (pos === -1) {\n                return super.getService(name);\n            }\n\n            let lib = name.substring(0, pos);\n            name = name.substring(pos + 1);\n\n            let app = this.getLib(lib);\n            return app?.getService(name, true);\n        }\n\n        /**\n         * Reset logger.\n         * Use it only if the options.logger config is changed in runtime\n         * @memberof Runnable\n         */\n        resetLogger() {\n            this._injectLogger(true /** detach */);\n            this._injectLogger();\n        }\n\n        _initialize() {\n            this._pwd = process.cwd();\n            if (this.workingPath !== this._pwd) {\n                process.chdir(this.workingPath);\n            }\n\n            this._injectLogger();\n            this._injectErrorHandlers();\n        }\n\n        _uninitialize() {\n            const detach = true;\n            this._injectErrorHandlers(detach);\n            this._injectLogger(detach);\n\n            process.chdir(this._pwd);\n            delete this._pwd;\n        }\n\n        _injectLogger(detach) {\n            if (detach) {\n                this.log('verbose', 'Logger is detaching ...');\n\n                if (this.logger.close) {\n                    this.logger.close();\n                }\n\n                delete this.logger;\n                return;\n            }\n\n            if (this.options.logger) {\n                this.logger = this.options.logger;\n            } else {\n                this.logger = { log: makeLogger(consoleLogger) };\n            }\n\n            this.log('verbose', 'Logger injected.');\n        }\n\n        _injectErrorHandlers(detach) {\n            if (detach) {\n                process.removeListener('warning', this._onWarning);\n                if (this._onUncaughtException) {\n                    process.removeListener('uncaughtException', this._onUncaughtException);\n                    delete this._onUncaughtException;\n                }\n                this.log('verbose', 'Process-wide error handlers detached.');\n                return;\n            }\n\n            if (!this.options.ignoreUncaught) {\n                this._onUncaughtException = this._getOnUncaughtException(this.options.exitOnUncaught);\n                process.on('uncaughtException', this._onUncaughtException);\n            }\n\n            process.on('warning', this._onWarning);\n            this.log('verbose', 'Process-wide error handlers injected.');\n        }\n    };\n\nmodule.exports = Runnable;\n"],"names":["Runnable","T","start_","_initialize","process","on","_onExit","stop_","started","libModules","batchAsync_","lib","removeListener","sleep_","_uninitialize","getLib","libName","Error","libModule","requireFromLib","relativePath","require","registerLib","name","InvalidConfiguration","getService","pos","indexOf","substring","app","resetLogger","_injectLogger","_pwd","cwd","workingPath","chdir","_injectErrorHandlers","detach","log","logger","close","options","makeLogger","consoleLogger","_onWarning","_onUncaughtException","ignoreUncaught","_getOnUncaughtException","exitOnUncaught","constructor","defaultAppOpts","exitOnError","err","waitForLogging","setTimeout","exit","clearTimeout","logError","warning","message","code","catch","runnable","libModulesPath","toAbsolutePath","module","exports"],"mappings":"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"}