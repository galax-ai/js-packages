{"version":3,"sources":["../lib/ServiceContainer.js"],"sourcesContent":["import ConfigLoader, { JsonConfigProvider } from '@galaxar/jsonc';\nimport { _, pushIntoBucket, eachAsync_, arrayToObject } from '@galaxar/utils';\nimport { fs, tryRequire as _tryRequire } from '@galaxar/sys';\nimport { InvalidConfiguration } from '@galaxar/types';\nimport { TopoSort } from '@galaxar/algo';\n\nimport path from 'node:path';\n\nimport Feature, { validate as validateFeature } from './Feature';\nimport defaultOpts from './defaultOpts';\nimport AsyncEmitter from './AsyncEmitter';\n\nconst FILE_EXT = ['.js', '.mjs', '.cjs', '.ts'];\n\n/**\n * Service container class.\n * @class\n */\nclass ServiceContainer extends AsyncEmitter {\n    logError = (error, message) => {\n        return this.logException('error', error, message);\n    };\n\n    logErrorAsWarning = (error, message) => {\n        return this.logException('warn', error, message);\n    };\n\n    /**\n     * @param {string} name - The name of the container instance.\n     * @param {object} [options] - Container options\n     * @property {string} [options.env] - Environment, default to process.env.NODE_ENV\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath] - App's config path, default to \"conf\" under workingPath\n     * @property {string} [options.configName] - App's config basename, default to \"app\"\n     * @property {string} [options.disableEnvAwareConfig=false] - Don't use environment-aware config\n     * @property {array} [options.allowedFeatures] - A list of enabled feature names\n     * @property {boolean} [options.loadConfigFromOptions=false] - Whether to load config from passed-in options\n     * @property {object} [options.config] - Config in options, used only when loadConfigFromOptions\n     */\n    constructor(name, options) {\n        super();\n\n        /**\n         * Name of the app\n         * @member {object}\n         **/\n        this.name = name;\n\n        /**\n         * App options\n         * @member {object}\n         */\n        this.options = {\n            ...defaultOpts,\n            ...options,\n        };\n\n        /**\n         * Environment flag\n         * @member {string}\n         */\n        this.env = this.options.env;\n\n        /**\n         * Working directory of this cli app\n         * @member {string}\n         */\n        this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();\n\n        /**\n         * Config path\n         * @member {string}\n         */\n        this.configPath = this.toAbsolutePath(this.options.configPath);\n\n        /**\n         * Feature path\n         */\n        this.featuresPath = this.toAbsolutePath(this.options.featuresPath);\n    }\n\n    /**\n     * Start the container.\n     * @fires ServiceContainer#configLoaded\n     * @fires ServiceContainer#ready\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async start_() {\n        this.log('verbose', `Starting app [${this.name}] ...`);\n\n        await this.emit_('starting', this);\n\n        this._featureRegistry = {\n            //firstly look up \"features\" under current working path, and then try the builtin features path\n            '*': this._getFeatureFallbackPath(),\n        };\n\n        /**\n         * Loaded features, name => feature object\n         * @member {object}\n         */\n        this.features = {};\n\n        /**\n         * Loaded services\n         * @member {object}\n         */\n        this.services = {};\n\n        const overrider = (defConf, envConf) => {\n            const { serviceGroup: defServiceGroup, ..._def } = defConf ?? {};\n            const { serviceGroup: envServiceGroup, ..._env } = envConf ?? {};\n\n            const serviceGroup = {};\n\n            if (defServiceGroup || envServiceGroup) {\n                defServiceGroup &&\n                    _.each(defServiceGroup, (servicesMap, serviceName) => {\n                        serviceGroup[serviceName] = servicesMap;\n                    });\n\n                envServiceGroup &&\n                    _.each(envServiceGroup, (servicesMap, serviceName) => {\n                        serviceGroup[serviceName] = {\n                            ...serviceGroup[serviceName],\n                            ...servicesMap,\n                        };\n                    });\n            }\n\n            const ret = {\n                ..._def,\n                ..._env,\n            };\n\n            if (!_.isEmpty(serviceGroup)) {\n                ret.serviceGroup = serviceGroup;\n            }\n\n            console.log('overrider', ret);\n\n            return ret;\n        };\n\n        if (this.options.loadConfigFromOptions) {\n            this.config = this.options.config;\n        } else {\n            /**\n             * Configuration loader instance\n             * @member {ConfigLoader}\n             */\n            this.configLoader = this.options.disableEnvAwareConfig\n                ? new ConfigLoader(\n                      new JsonConfigProvider(path.join(this.configPath, this.options.configName + '.json')),\n                      this\n                  )\n                : ConfigLoader.createEnvAwareJsonLoader(\n                      this.configPath,\n                      this.options.configName,\n                      this.env,\n                      this,\n                      overrider\n                  );\n\n            await this.loadConfig_();\n        }\n\n        /**\n         * Config loaded event.\n         * @event ServiceContainer#configLoaded\n         */\n        await this.emit_('configLoaded', this.config);\n\n        if (_.isEmpty(this.config)) {\n            throw Error('Empty configuration. Nothing to do! Config path: ' + this.configPath);\n        }\n\n        await this._loadFeatures_();\n\n        /**\n         * App ready\n         * @event ServiceContainer#ready\n         */\n        await this.emit_('ready', this);\n\n        /**\n         * Flag showing the app is started or not.\n         * @member {bool}\n         */\n        this.started = true;\n\n        return this;\n    }\n\n    /**\n     * Stop the container\n     * @fires ServiceContainer#stopping\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async stop_() {\n        /**\n         * App stopping\n         * @event ServiceContainer#stopping\n         */\n        await this.emit_('stopping', this);\n\n        this.log('verbose', `Stopping app [${this.name}] ...`);\n\n        this.started = false;\n\n        delete this.services;\n        delete this.features;\n        delete this._featureRegistry;\n\n        delete this.config;\n        delete this.configLoader;\n\n        await this.emit_('stopped', this);\n\n        this.allOff();\n    }\n\n    /**\n     * @returns {ServiceContainer}\n     */\n    async loadConfig_() {\n        let configVariables = this._getConfigVariables();\n\n        /**\n         * App configuration\n         * @member {object}\n         */\n        this.config = await this.configLoader.load_(configVariables);\n\n        return this;\n    }\n\n    /**\n     * Translate a relative path of this app module to an absolute path\n     * @param {array} args - Array of path parts\n     * @returns {string}\n     */\n    toAbsolutePath(...args) {\n        if (args.length === 0 || args[0] == null) {\n            return this.workingPath;\n        }\n\n        return path.resolve(this.workingPath, ...args);\n    }\n\n    tryRequire(pkgName) {\n        return _tryRequire(pkgName, this.workingPath);\n    }\n\n    /**\n     * Register a service\n     * @param {string} name\n     * @param {object} serviceObject\n     * @param {boolean} override\n     */\n    registerService(name, serviceObject, override) {\n        if (name in this.services && !override) {\n            throw new Error('Service \"' + name + '\" already registered!');\n        }\n\n        this.services[name] = serviceObject;\n        this.log('verbose', `Service \"${name}\" registered.`);\n        return this;\n    }\n\n    /**\n     * Check whether a service exists\n     * @param {*} name\n     * @returns {boolean}\n     */\n    hasService(name) {\n        return name in this.services;\n    }\n\n    /**\n     * Get a service from module hierarchy\n     * @param name\n     * @returns {object}\n     */\n    getService(name) {\n        return this.services[name];\n    }\n\n    /**\n     * Check whether a feature is enabled in the app.\n     * @param {string} feature\n     * @returns {bool}\n     */\n    enabled(feature) {\n        return this.features[feature]?.enabled ?? false;\n    }\n\n    /**\n     * Add more or overide current feature registry\n     * @param {object} registry\n     */\n    addFeatureRegistry(registry) {\n        // * is used as the fallback location to find a feature\n        if (registry.hasOwnProperty('*')) {\n            pushIntoBucket(this._featureRegistry, '*', registry['*']);\n        }\n\n        Object.assign(this._featureRegistry, _.omit(registry, ['*']));\n    }\n\n    /**\n     * Default log method, may be override by loggers feature\n     * @param {string} - Log level\n     * @param {string} - Log message\n     * @param {...object} - Extra meta data\n     * @returns {ServiceContainer}\n     */\n    log(level, ...rest) {\n        this.logger?.log(level, ...rest);\n        return this;\n    }\n\n    /**\n     * Helper method to log an exception\n     * @param {*} level\n     * @param {*} error\n     * @param {*} summary\n     * @returns {ServiceContainer}\n     */\n    logException(level, error, summary) {\n        this.log(\n            level,\n            (summary ? summary + '\\n' : '') + error.message,\n            _.pick(error, ['name', 'status', 'code', 'info', 'stack', 'request'])\n        );\n        return this;\n    }\n\n    /**\n     * Replace the default logger set on creation of the app.\n     * @param {Logger} logger\n     * @memberof ServiceContainer\n     */\n    replaceLogger(logger) {\n        if (logger) {\n            this._loggerBackup = this.logger;\n            this._externalLoggerBackup = this._externalLogger;\n\n            this.logger = logger;\n            this._externalLogger = true;\n\n            this.log('verbose', 'A new app logger attached.');\n        } else {\n            this.logger = this._loggerBackup;\n            this._externalLogger = this._externalLoggerBackup;\n\n            delete this._loggerBackup;\n            delete this._externalLoggerBackup;\n\n            this.log('verbose', 'The current app logger is dettached.');\n        }\n    }\n\n    _getConfigVariables() {\n        const processInfo = {\n            env: process.env,\n            arch: process.arch, // The operating system CPU architecture， 'arm', 'arm64','x64', ...\n            argv: process.argv,\n            cwd: process.cwd(),\n            pid: process.pid,\n            platform: process.platform,\n        };\n\n        return {\n            app: this,\n            env: this.env,\n            process: processInfo,\n        };\n    }\n\n    _getFeatureFallbackPath() {\n        return [path.resolve(__dirname, 'features'), this.featuresPath];\n    }\n\n    _sortFeatures(features) {\n        const topoSort = new TopoSort();\n        features.forEach(feature => {\n            feature.depends?.forEach(dep => topoSort.add(dep, feature.name));\n        });\n\n        const groups = arrayToObject(features, 'name');\n        const keys = topoSort.sort();\n        return keys.map(key => groups[key]);\n    }\n\n    /**\n     * Load features\n     * @private\n     * @returns {bool}\n     */\n    async _loadFeatures_() {\n        // run config stage separately first\n        let configStageFeatures = [];\n\n        // load features\n        _.each(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature;\n            try {\n                feature = this._loadFeature(name);\n            } catch (err) {\n                //ignore the first trial\n            }\n\n            if (feature && feature.stage === Feature.CONF) {\n                configStageFeatures.push([feature, featureOptions]);\n                delete this.config[name];\n            }\n        });\n\n        if (configStageFeatures.length > 0) {\n            await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);\n\n            //reload all features if any type of configuration feature exists\n            return this._loadFeatures_();\n        }\n\n        let featureGroups = {\n            [Feature.INIT]: [],\n            [Feature.SERVICE]: [],\n            [Feature.PLUGIN]: [],\n            [Feature.READY]: [],\n        };\n\n        // load features\n        _.each(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature = this._loadFeature(name);\n\n            if (!(feature.stage in featureGroups)) {\n                throw new Error(`Invalid feature type. Feature: ${name}, type: ${feature.stage}`);\n            }\n\n            featureGroups[feature.stage].push([feature, featureOptions]);\n        });\n\n        return eachAsync_(featureGroups, (group, stage) => this._loadFeatureGroup_(group, stage));\n    }\n\n    async _loadFeatureGroup_(featureGroup, groupStage) {\n        featureGroup = this._sortFeatures(featureGroup);\n\n        await this.emit_('before:' + groupStage);\n        this.log('verbose', `Loading \"${groupStage}\" feature group ...`);\n\n        await eachAsync_(featureGroup, async ([feature, options]) => {\n            const { name, depends } = feature;\n            await this.emit_('before:load:' + name);\n            this.log('verbose', `Loading feature \"${name}\" ...`);\n\n            depends && this._dependsOn(depends, name);\n\n            await feature.load_(this, options, name);\n            this.features[name].loaded = true;\n-\n            this.log('verbose', `Feature \"${name}\" loaded. [OK]`);\n\n            await this.emit_('after:load:' + name);\n        });\n        this.log('verbose', `Finished loading \"${groupStage}\" feature group. [OK]`);\n\n        await this.emit_('after:' + groupStage);\n    }\n\n    _dependsOn(features, fromFeature) {\n        let hasNotEnabled = _.find(_.castArray(features), feature => !this.enabled(feature));\n    \n        if (hasNotEnabled) {\n            throw new Error(`The \"${hasNotEnabled}\" feature depended by \"${fromFeature}\" feature is not enabled.`);\n        }\n    };\n\n    /**\n     * Load a feature object by name.\n     * @private\n     * @param {string} feature\n     * @returns {object}\n     */\n    _loadFeature(feature) {\n        let featureObject = this.features[feature];\n        if (featureObject) return featureObject;\n\n        let featurePath;\n\n        if (this._featureRegistry.hasOwnProperty(feature)) {\n            //load by registry entry\n            let loadOption = this._featureRegistry[feature];\n\n            if (Array.isArray(loadOption)) {\n                if (loadOption.length === 0) {\n                    throw new Error(`Invalid registry value for feature \"${feature}\".`);\n                }\n\n                featurePath = loadOption[0];\n                featureObject = this.tryRequire(featurePath);\n\n                if (loadOption.length > 1) {\n                    //one module may contains more than one feature\n                    featureObject = _.get(featureObject, loadOption[1]);\n                }\n            } else {\n                featurePath = loadOption;\n                featureObject = this.tryRequire(featurePath);\n            }\n        } else {\n            //load by fallback paths\n            let searchingPath = this._featureRegistry['*'];\n\n            //reverse fallback stack\n            let found = _.findLast(searchingPath, (p) =>\n                FILE_EXT.find((ext) => {\n                    featurePath = path.join(p, feature + ext);\n                    return fs.existsSync(featurePath);\n                })\n            );\n\n            if (!found) {\n                throw new InvalidConfiguration(`Don't know where to load feature \"${feature}\".`, this, {\n                    feature,\n                    searchingPath,\n                });\n            }\n\n            featureObject = require(featurePath);\n        }\n\n        if (!validateFeature(featureObject)) {\n            throw new Error(`Invalid feature object loaded from \"${featurePath}\".`);\n        }\n\n        featureObject = typeof featureObject === 'function' ? featureObject(this) : featureObject;\n        featureObject.name = feature;\n        this.features[feature] = featureObject\n        return featureObject;\n    }\n}\n\nexport default ServiceContainer;\n"],"names":["FILE_EXT","ServiceContainer","AsyncEmitter","start_","log","name","emit_","_featureRegistry","_getFeatureFallbackPath","features","services","overrider","defConf","envConf","serviceGroup","defServiceGroup","_def","envServiceGroup","_env","_","each","servicesMap","serviceName","ret","isEmpty","console","options","loadConfigFromOptions","config","configLoader","disableEnvAwareConfig","ConfigLoader","JsonConfigProvider","path","join","configPath","configName","createEnvAwareJsonLoader","env","loadConfig_","Error","_loadFeatures_","started","stop_","allOff","configVariables","_getConfigVariables","load_","toAbsolutePath","args","length","workingPath","resolve","tryRequire","pkgName","_tryRequire","registerService","serviceObject","override","hasService","getService","enabled","feature","addFeatureRegistry","registry","hasOwnProperty","pushIntoBucket","Object","assign","omit","level","rest","logger","logException","error","summary","message","pick","replaceLogger","_loggerBackup","_externalLoggerBackup","_externalLogger","processInfo","process","arch","argv","cwd","pid","platform","app","__dirname","featuresPath","_sortFeatures","topoSort","TopoSort","forEach","depends","dep","add","groups","arrayToObject","keys","sort","map","key","configStageFeatures","featureOptions","allowedFeatures","indexOf","_loadFeature","err","stage","Feature","CONF","push","_loadFeatureGroup_","featureGroups","INIT","SERVICE","PLUGIN","READY","eachAsync_","group","featureGroup","groupStage","_dependsOn","loaded","fromFeature","hasNotEnabled","find","castArray","featureObject","featurePath","loadOption","Array","isArray","get","searchingPath","found","findLast","p","ext","fs","existsSync","InvalidConfiguration","require","validateFeature","constructor","logError","logErrorAsWarning","defaultOpts"],"mappings":"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"}