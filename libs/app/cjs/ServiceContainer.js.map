{"version":3,"sources":["../lib/ServiceContainer.js"],"sourcesContent":["import ConfigLoader, { JsonConfigProvider } from '@galaxar/jsonc';\nimport { _, pushIntoBucket, eachAsync_, arrayToObject, esmCheck } from '@galaxar/utils';\nimport { fs, tryRequire as _tryRequire } from '@galaxar/sys';\nimport { InvalidConfiguration, Types } from '@galaxar/types';\nimport { TopoSort } from '@galaxar/algo';\n\nimport path from 'node:path';\n\nimport Feature from './Feature';\nimport defaultOpts from './defaultOpts';\nimport AsyncEmitter from './helpers/AsyncEmitter';\nimport { consoleLogger, makeLogger, setLogLevel } from './logger';\n\nconst FILE_EXT = ['.js', '.mjs', '.cjs', '.ts'];\n\nconst configOverrider = (defConf, envConf) => {\n    const { serviceGroup: defServiceGroup, ..._def } = defConf ?? {};\n    const { serviceGroup: envServiceGroup, ..._env } = envConf ?? {};\n\n    const serviceGroup = {};\n\n    if (defServiceGroup || envServiceGroup) {\n        defServiceGroup &&\n            _.each(defServiceGroup, (servicesMap, serviceName) => {\n                serviceGroup[serviceName] = servicesMap;\n            });\n\n        envServiceGroup &&\n            _.each(envServiceGroup, (servicesMap, serviceName) => {\n                serviceGroup[serviceName] = {\n                    ...serviceGroup[serviceName],\n                    ...servicesMap,\n                };\n            });\n    }\n\n    const ret = {\n        ..._def,\n        ..._env,\n    };\n\n    if (!_.isEmpty(serviceGroup)) {\n        ret.serviceGroup = serviceGroup;\n    }\n\n    return ret;\n};\n\n/**\n * Service container class.\n * @class\n */\nclass ServiceContainer extends AsyncEmitter {\n    logError = (error, message) => {\n        return this.logException('error', error, message);\n    };\n\n    logErrorAsWarning = (error, message) => {\n        return this.logException('warn', error, message);\n    };\n\n    /**\n     * @param {string} name - The name of the container instance.\n     * @param {object} [options] - Container options\n     * @property {string} [options.env] - Environment, default to process.env.NODE_ENV\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath] - App's config path, default to \"conf\" under workingPath\n     * @property {string} [options.configName] - App's config basename, default to \"app\"\n     * @property {string} [options.disableEnvAwareConfig=false] - Don't use environment-aware config\n     * @property {array} [options.allowedFeatures] - A list of enabled feature names\n     * @property {boolean} [options.loadConfigFromOptions=false] - Whether to load config from passed-in options\n     * @property {object} [options.config] - Config in options, used only when loadConfigFromOptions\n     */\n    constructor(name, options) {\n        super();\n\n        /**\n         * Name of the app\n         * @member {object}\n         **/\n        this.name = name;\n\n        /**\n         * App options\n         * @member {object}\n         */\n        this.options = {\n            ...defaultOpts,\n            ...options,\n        };\n\n        /**\n         * Environment flag\n         * @member {string}\n         */\n        this.env = this.options.env;\n\n        /**\n         * Working directory of this cli app\n         * @member {string}\n         */\n        this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();\n\n        /**\n         * Config path\n         * @member {string}\n         */\n        this.configPath = this.toAbsolutePath(this.options.configPath);\n\n        /**\n         * Feature path\n         */\n        this.featuresPath = this.toAbsolutePath(this.options.featuresPath);\n\n        this._logCache = [];\n\n        // dummy\n        this.log = (...args) => {\n            this._logCache.push(args);\n            return this;\n        };\n    }\n\n    /**\n     * Start the container.\n     * @fires ServiceContainer#configLoaded\n     * @fires ServiceContainer#ready\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async start_() {\n        this.log('verbose', `Starting app [${this.name}] ...`);\n\n        await this.emit_('starting', this);\n\n        this._featureRegistry = {\n            //firstly look up \"features\" under current working path, and then try the builtin features path\n            '*': this._getFeatureFallbackPath(),\n        };\n\n        /**\n         * Loaded features, name => feature object\n         * @member {object}\n         */\n        this.features = {};\n\n        /**\n         * Loaded services\n         * @member {object}\n         */\n        this.services = {};\n\n        if (this.options.loadConfigFromOptions) {\n            this.config = this.options.config;\n        } else {\n            /**\n             * Configuration loader instance\n             * @member {ConfigLoader}\n             */\n            this.configLoader = this.options.disableEnvAwareConfig\n                ? new ConfigLoader(\n                      new JsonConfigProvider(path.join(this.configPath, this.options.configName + '.json')),\n                      this\n                  )\n                : ConfigLoader.createEnvAwareJsonLoader(\n                      this.configPath,\n                      this.options.configName,\n                      this.env,\n                      this,\n                      configOverrider\n                  );\n\n            await this.loadConfig_();\n        }\n\n        /**\n         * Config loaded event.\n         * @event ServiceContainer#configLoaded\n         */\n        await this.emit_('configLoaded', this.config);\n\n        if (!_.isEmpty(this.config)) {\n            await this._loadFeatures_();\n        } else {\n            this.log('verbose', `Empty configuration! Config path: ${this.configPath}`);\n        }\n\n        /**\n         * App ready\n         * @event ServiceContainer#ready\n         */\n        await this.emit_('ready', this);\n\n        /**\n         * Flag showing the app is started or not.\n         * @member {bool}\n         */\n        this.started = true;\n\n        return this;\n    }\n\n    /**\n     * Stop the container\n     * @fires ServiceContainer#stopping\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async stop_() {\n        /**\n         * App stopping\n         * @event ServiceContainer#stopping\n         */\n        await this.emit_('stopping', this);\n\n        this.log('verbose', `Stopping app [${this.name}] ...`);\n\n        this.started = false;\n\n        delete this.services;\n        delete this.features;\n        delete this._featureRegistry;\n\n        delete this.config;\n        delete this.configLoader;\n\n        await this.emit_('stopped', this);\n\n        this.allOff();\n    }\n\n    /**\n     * @returns {ServiceContainer}\n     */\n    async loadConfig_() {\n        let configVariables = this._getConfigVariables();\n\n        /**\n         * App configuration\n         * @member {object}\n         */\n        this.config = await this.configLoader.load_(configVariables);\n\n        return this;\n    }\n\n    /**\n     * Translate a relative path of this app module to an absolute path\n     * @param {array} args - Array of path parts\n     * @returns {string}\n     */\n    toAbsolutePath(...args) {\n        if (args.length === 0 || args[0] == null) {\n            return this.workingPath;\n        }\n\n        return path.resolve(this.workingPath, ...args);\n    }\n\n    tryRequire(pkgName, local) {\n        const obj = local ? require(pkgName) : _tryRequire(pkgName, this.workingPath);\n        return esmCheck(obj);\n    }\n\n    /**\n     * Register a service\n     * @param {string} name\n     * @param {object} serviceObject\n     * @param {boolean} override\n     */\n    registerService(name, serviceObject, override) {\n        if (name in this.services && !override) {\n            throw new Error('Service \"' + name + '\" already registered!');\n        }\n\n        this.services[name] = serviceObject;\n        this.log('verbose', `Service \"${name}\" registered.`);\n        return this;\n    }\n\n    /**\n     * Check whether a service exists\n     * @param {*} name\n     * @returns {boolean}\n     */\n    hasService(name) {\n        return name in this.services;\n    }\n\n    /**\n     * Get a service from module hierarchy\n     * @param name\n     * @returns {object}\n     */\n    getService(name) {\n        return this.services[name];\n    }\n\n    /**\n     * Check whether a feature is enabled in the app.\n     * @param {string} feature\n     * @returns {bool}\n     */\n    enabled(feature) {\n        return this.features[feature]?.enabled ?? false;\n    }\n\n    /**\n     * Add more or overide current feature registry\n     * @param {object} registry\n     */\n    addFeatureRegistry(registry) {\n        // * is used as the fallback location to find a feature\n        if (registry.hasOwnProperty('*')) {\n            pushIntoBucket(this._featureRegistry, '*', registry['*']);\n        }\n\n        Object.assign(this._featureRegistry, _.omit(registry, ['*']));\n    }\n\n    /**\n     * Helper method to log an exception\n     * @param {*} level\n     * @param {*} error\n     * @param {*} summary\n     * @returns {ServiceContainer}\n     */\n    logException(level, error, summary) {\n        this.log(\n            level,\n            (summary ? summary + '\\n' : '') + error.message,\n            _.pick(error, ['name', 'status', 'code', 'info', 'stack', 'request'])\n        );\n        return this;\n    }\n\n    featureConfig(config, typeInfo, name) {\n        return this.sanitize(config, typeInfo, name);\n    }\n\n    sanitize(config, typeInfo, name, category) {\n        try {\n            return Types.sanitize(config, { type: 'object', ...typeInfo }, undefined, name);\n        } catch (err) {\n            throw new InvalidConfiguration(err.message, this, category ? `${category}::${name}` : name);\n        }\n    }\n\n    _getConfigVariables() {\n        const processInfo = {\n            env: process.env,\n            arch: process.arch, // The operating system CPU architecture， 'arm', 'arm64','x64', ...\n            argv: process.argv,\n            cwd: process.cwd(),\n            pid: process.pid,\n            platform: process.platform,\n        };\n\n        return {\n            app: this,\n            env: this.env,\n            process: processInfo,\n        };\n    }\n\n    _getFeatureFallbackPath() {\n        return [path.resolve(__dirname, 'features'), this.featuresPath];\n    }\n\n    _sortFeatures(features) {\n        if (features.length === 0) {\n            return features;\n        }\n\n        const topoSort = new TopoSort();\n        features.forEach(([feature]) => {\n            topoSort.depends(feature.name, feature.depends);\n        });\n\n        const groups = arrayToObject(features, ([feature]) => feature.name);\n        const keys = topoSort.sort();\n\n        return keys.map((key) => groups[key]);\n    }\n\n    /**\n     * Load features\n     * @private\n     * @returns {bool}\n     */\n    async _loadFeatures_() {\n        // run config stage separately first\n        let configStageFeatures = [];\n\n        // load features\n        _.each(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature;\n            try {\n                feature = this._loadFeature(name);\n            } catch (err) {\n                //ignore the first trial\n                //this.log('warn', err.message, { err });\n            }\n\n            if (feature && feature.stage === Feature.CONF) {\n                configStageFeatures.push([feature, featureOptions]);\n                delete this.config[name];\n            }\n        });\n\n        if (configStageFeatures.length > 0) {\n            await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);\n\n            //reload all features if any type of configuration feature exists\n            return this._loadFeatures_();\n        }\n\n        // if no logger in config, use console logger\n        if (this.runnable && this.config.logger == null) {\n            setLogLevel(this.options.logLevel);\n            const logging = makeLogger(consoleLogger);\n            this.logger = { log: logging };\n            this.log = logging;\n            this._logCache.forEach((log) => this.logger.log(...log));\n            this._logCache.length = 0;\n        }\n\n        await this.emit_('configFinalized', this.config);\n\n        if (this.options.logLevel === 'debug' || this.options.logLevel === 'verbose') {\n            this.log('verbose', 'Finalized config:', this.config);\n        }\n\n        let featureGroups = {\n            [Feature.INIT]: [],\n            [Feature.SERVICE]: [],\n            [Feature.PLUGIN]: [],\n            [Feature.FINAL]: [],\n        };\n\n        // load features\n        _.each(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature = this._loadFeature(name);\n\n            if (!(feature.stage in featureGroups)) {\n                throw new Error(`Invalid feature stage. Feature: ${name}, type: ${feature.stage}`);\n            }\n\n            featureGroups[feature.stage].push([feature, featureOptions]);\n        });\n\n        return eachAsync_(featureGroups, (group, stage) => this._loadFeatureGroup_(group, stage));\n    }\n\n    async _loadFeatureGroup_(featureGroup, groupStage) {\n        featureGroup = this._sortFeatures(featureGroup);\n\n        await this.emit_('before:' + groupStage);\n        this.log('verbose', `Loading \"${groupStage}\" feature group ...`);\n\n        await eachAsync_(featureGroup, async ([feature, options]) => {\n            const { name, depends } = feature;\n            await this.emit_('before:load:' + name);\n            this.log('verbose', `Loading feature \"${name}\" ...`);\n\n            depends && this._dependsOn(depends, name);\n\n            await feature.load_(this, options, name);\n            this.features[name].enabled = true;\n            this.log('verbose', `Feature \"${name}\" loaded. [OK]`);\n\n            await this.emit_('after:load:' + name);\n        });\n        this.log('verbose', `Finished loading \"${groupStage}\" feature group. [OK]`);\n\n        await this.emit_('after:' + groupStage);\n    }\n\n    _dependsOn(features, fromFeature) {\n        let hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n        if (hasNotEnabled) {\n            throw new Error(`The \"${hasNotEnabled}\" feature depended by \"${fromFeature}\" feature is not enabled.`);\n        }\n    }\n\n    /**\n     * Load a feature object by name.\n     * @private\n     * @param {string} feature\n     * @returns {object}\n     */\n    _loadFeature(feature) {\n        let featureObject = this.features[feature];\n        if (featureObject) return featureObject;\n\n        let featurePath;\n\n        if (this._featureRegistry.hasOwnProperty(feature)) {\n            //load by registry entry\n            let loadOption = this._featureRegistry[feature];\n\n            if (Array.isArray(loadOption)) {\n                if (loadOption.length === 0) {\n                    throw new Error(`Invalid registry value for feature \"${feature}\".`);\n                }\n\n                featurePath = loadOption[0];\n                featureObject = this.tryRequire(featurePath);\n\n                if (loadOption.length > 1) {\n                    //one module may contains more than one feature\n                    featureObject = _.get(featureObject, loadOption[1]);\n                }\n            } else {\n                featurePath = loadOption;\n                featureObject = this.tryRequire(featurePath);\n            }\n        } else {\n            //load by fallback paths\n            let searchingPath = this._featureRegistry['*'];\n\n            //reverse fallback stack\n            let found = _.findLast(searchingPath, (p) =>\n                FILE_EXT.find((ext) => {\n                    featurePath = path.join(p, feature + ext);\n                    return fs.existsSync(featurePath);\n                })\n            );\n\n            if (!found) {\n                throw new InvalidConfiguration(`Don't know where to load feature \"${feature}\".`, this, {\n                    feature,\n                    searchingPath,\n                });\n            }\n\n            featureObject = this.tryRequire(featurePath);\n        }\n\n        if (!Feature.validate(featureObject)) {\n            throw new Error(`Invalid feature object loaded from \"${featurePath}\".`);\n        }\n\n        featureObject = typeof featureObject === 'function' ? featureObject(this) : featureObject;\n        featureObject.name = feature;\n        this.features[feature] = featureObject;\n        return featureObject;\n    }\n}\n\nexport default ServiceContainer;\n"],"names":["FILE_EXT","configOverrider","defConf","envConf","serviceGroup","defServiceGroup","_def","envServiceGroup","_env","_","each","servicesMap","serviceName","ret","isEmpty","ServiceContainer","AsyncEmitter","start_","log","name","emit_","_featureRegistry","_getFeatureFallbackPath","features","services","options","loadConfigFromOptions","config","configLoader","disableEnvAwareConfig","ConfigLoader","JsonConfigProvider","path","join","configPath","configName","createEnvAwareJsonLoader","env","loadConfig_","_loadFeatures_","started","stop_","allOff","configVariables","_getConfigVariables","load_","toAbsolutePath","args","length","workingPath","resolve","tryRequire","pkgName","local","obj","require","_tryRequire","esmCheck","registerService","serviceObject","override","Error","hasService","getService","enabled","feature","addFeatureRegistry","registry","hasOwnProperty","pushIntoBucket","Object","assign","omit","logException","level","error","summary","message","pick","featureConfig","typeInfo","sanitize","category","Types","type","undefined","err","InvalidConfiguration","processInfo","process","arch","argv","cwd","pid","platform","app","__dirname","featuresPath","_sortFeatures","topoSort","TopoSort","forEach","depends","groups","arrayToObject","keys","sort","map","key","configStageFeatures","featureOptions","allowedFeatures","indexOf","_loadFeature","stage","Feature","CONF","push","_loadFeatureGroup_","runnable","logger","setLogLevel","logLevel","logging","makeLogger","consoleLogger","_logCache","featureGroups","INIT","SERVICE","PLUGIN","FINAL","eachAsync_","group","featureGroup","groupStage","_dependsOn","fromFeature","hasNotEnabled","find","castArray","featureObject","featurePath","loadOption","Array","isArray","get","searchingPath","found","findLast","p","ext","fs","existsSync","validate","constructor","logError","logErrorAsWarning","defaultOpts"],"mappings":"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"}