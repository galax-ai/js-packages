{"version":3,"sources":["../../lib/features/settings.js"],"sourcesContent":["/**\n * Enable customized settings\n * @module Feature_Settings\n *\n * \"settings\": {\n *     \"key\": 1,\n *     \"env:development\": {\n *         \"key\": 2\n *     },\n *     \"stage:ppe\": {\n *         \"key\": 3\n *     }\n * }\n */\n\nimport { InvalidConfiguration } from '@galaxar/types';\nimport { _ } from '@galaxar/utils';\nimport Feature from '../Feature';\n\nconst KEY_ENV = 'env:';\nconst KEY_STAGE = 'stage:';\nconst Stage = process.env.STAGE_ENV;\n\nexport default {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Customized settings\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, settings) {\n        let result = {};\n        let envSettings;\n        let stageSettings;\n\n        _.each(settings, (value, key) => {\n            if (key.startsWith(KEY_ENV)) {\n                let envKey = key.substring(KEY_ENV.length);\n                if (envKey === app.env) {\n                    envSettings = value;\n                    if (!_.isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid env settings', app, `settings.${key}`);\n                    }\n                }\n            } else if (Stage && key.startsWith(KEY_STAGE)) {\n                let stageKey = key.substring(KEY_ENV.length);\n                if (stageKey === Stage) {\n                    stageSettings = value;\n                    if (!_.isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid stage settings', app, `settings.${key}`);\n                    }\n                }\n            } else {\n                result[key] = value;\n            }\n        });\n\n        app.settings = Object.assign(result, envSettings, stageSettings);\n    },\n};\n"],"names":["KEY_ENV","KEY_STAGE","Stage","process","env","STAGE_ENV","stage","Feature","INIT","load_","app","settings","result","envSettings","stageSettings","_","each","value","key","startsWith","envKey","substring","length","isPlainObject","InvalidConfiguration","stageKey","Object","assign"],"mappings":"oGAuBA,iDAAA,iCARqC,uCACnB,kEACE,mGAEpB,MAAMA,QAAU,OAChB,MAAMC,UAAY,SAClB,MAAMC,MAAQC,QAAQC,GAAG,CAACC,SAAS,OAEnC,SAAe,CAKXC,MAAOC,gBAAO,CAACC,IAAI,CAQnBC,MAAO,SAAUC,GAAG,CAAEC,QAAQ,CAAE,CAC5B,IAAIC,OAAS,CAAC,EACd,IAAIC,YACJ,IAAIC,cAEJC,QAAC,CAACC,IAAI,CAACL,SAAU,CAACM,MAAOC,MAAQ,CAC7B,GAAIA,IAAIC,UAAU,CAACnB,SAAU,CACzB,IAAIoB,OAASF,IAAIG,SAAS,CAACrB,QAAQsB,MAAM,EACzC,GAAIF,SAAWV,IAAIN,GAAG,CAAE,CACpBS,YAAcI,MACd,GAAI,CAACF,QAAC,CAACQ,aAAa,CAACN,OAAQ,CACzB,MAAM,IAAIO,2BAAoB,CAAC,uBAAwBd,IAAK,CAAC,SAAS,EAAEQ,IAAI,CAAC,CAAE,AACnF,CAAC,AACL,CAAC,AACL,MAAO,GAAIhB,OAASgB,IAAIC,UAAU,CAAClB,WAAY,CAC3C,IAAIwB,SAAWP,IAAIG,SAAS,CAACrB,QAAQsB,MAAM,EAC3C,GAAIG,WAAavB,MAAO,CACpBY,cAAgBG,MAChB,GAAI,CAACF,QAAC,CAACQ,aAAa,CAACN,OAAQ,CACzB,MAAM,IAAIO,2BAAoB,CAAC,yBAA0Bd,IAAK,CAAC,SAAS,EAAEQ,IAAI,CAAC,CAAE,AACrF,CAAC,AACL,CAAC,AACL,KAAO,CACHN,MAAM,CAACM,IAAI,CAAGD,KAClB,CAAC,AACL,EAEAP,CAAAA,IAAIC,QAAQ,CAAGe,OAAOC,MAAM,CAACf,OAAQC,YAAaC,cACtD,CACJ"}