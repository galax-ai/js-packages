{"version":3,"sources":["../../lib/features/configByHostname.js"],"sourcesContent":["/**\n * Enable server specific config identified by host name.\n * @module Feature_ConfigByHostname\n */\n\nimport path from 'node:path';\nimport { fs, run_ } from '@galaxar/sys';\nimport { JsonConfigProvider } from '@galaxar/jsonc';\nimport Feature from '../Feature';\n\nexport default {\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    stage: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.fallbackName] - Fallback name if hostname not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let hostName;\n\n        try {\n            hostName = (await run_('hostname')).trim();\n        } catch (e) {\n            app.log('warn', e.message || e);\n        }\n\n        if (!hostName) {\n            throw new Error('Unable to read \"hostname\" from environment.');\n        }\n\n        let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n        if (!fs.existsSync(hostSpecConfigFile)) {\n            if (options.fallbackName) {\n                hostName = options.fallbackName;\n                let hostSpecConfigFileFb = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n\n                if (!fs.existsSync(hostSpecConfigFileFb)) {\n                    throw new Error(\n                        `The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`\n                    );\n                }\n\n                hostSpecConfigFile = hostSpecConfigFileFb;\n            } else {\n                app.log(\n                    'warn',\n                    `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`\n                );\n                return;\n            }\n        }\n\n        app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);\n        return app.loadConfig_();\n    },\n};\n"],"names":["stage","Feature","CONF","load_","app","options","hostName","run_","trim","e","log","message","Error","hostSpecConfigFile","path","join","configPath","configName","fs","existsSync","fallbackName","hostSpecConfigFileFb","configLoader","provider","JsonConfigProvider","loadConfig_"],"mappings":"oGAUA,iDAAA,6DALiB,iCACQ,qCACU,kEACf,yGAEpB,SAAe,CAKXA,MAAOC,gBAAO,CAACC,IAAI,CASnBC,MAAO,MAAOC,IAAKC,UAAY,CAC3B,IAAIC,SAEJ,GAAI,CACAA,SAAW,AAAC,CAAA,MAAMC,GAAAA,SAAI,EAAC,WAAU,EAAGC,IAAI,EAC5C,CAAE,MAAOC,EAAG,CACRL,IAAIM,GAAG,CAAC,OAAQD,EAAEE,OAAO,EAAIF,EACjC,CAEA,GAAI,CAACH,SAAU,CACX,MAAM,IAAIM,MAAM,8CAA+C,AACnE,CAAC,AAED,IAAIC,mBAAqBC,iBAAI,CAACC,IAAI,CAACX,IAAIY,UAAU,CAAEZ,IAAIa,UAAU,CAAG,IAAMX,SAAW,SACrF,GAAI,CAACY,OAAE,CAACC,UAAU,CAACN,oBAAqB,CACpC,GAAIR,QAAQe,YAAY,CAAE,CACtBd,SAAWD,QAAQe,YAAY,CAC/B,IAAIC,qBAAuBP,iBAAI,CAACC,IAAI,CAACX,IAAIY,UAAU,CAAEZ,IAAIa,UAAU,CAAG,IAAMX,SAAW,SAEvF,GAAI,CAACY,OAAE,CAACC,UAAU,CAACE,sBAAuB,CACtC,MAAM,IAAIT,MACN,CAAC,mCAAmC,EAAEN,SAAS,qCAAqC,EAAEe,qBAAqB,mBAAmB,CAAC,CACjI,AACN,CAAC,AAEDR,mBAAqBQ,oBACzB,KAAO,CACHjB,IAAIM,GAAG,CACH,OACA,CAAC,mCAAmC,EAAEJ,SAAS,kDAAkD,CAAC,EAEtG,MACJ,CAAC,AACL,CAAC,AAEDF,IAAIkB,YAAY,CAACC,QAAQ,CAAG,IAAIC,yBAAkB,CAACX,oBACnD,OAAOT,IAAIqB,WAAW,EAC1B,CACJ"}