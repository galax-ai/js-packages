{"version":3,"sources":["../../lib/features/logger.js"],"sourcesContent":["/**\n * Enable multi-categories logging by pino logger\n * @module Feature_Logger\n */\n\nimport Feature from '../Feature';\nimport { _ } from '@galaxar/utils';\n\n/*\n logger: {\n     transport: {\n        target: '/absolute/path/to/my-transport.mjs'\n     }\n }\n\n logger: {\n    transport: {\n    targets: [\n      { target: '/absolute/path/to/my-transport.mjs', level: 'error' },\n      { target: 'some-file-transport', options: { destination: '/dev/null' }\n    ]\n }    \n*/\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} categories - Configuration for multi-categories\n     * @returns {Promise.<*>}\n     * @example\n     *\n     *  let logger = app.getService('logger');\n     *  logger.log('error', 'error');\n     *\n     *  // with serviceGroup\n     *  let logger1 = app.getService('logger-category1');\n     */\n    load_: function (app, config, name) {\n        const pino = app.tryRequire('pino');\n\n        config = app.featureConfig(\n            config,\n            {\n                schema: {\n                    transport: { type: 'object', optional: true },\n                },\n            },\n            name\n        );\n\n        const options = {\n            nestedKey: 'payload',\n            transport: {\n                target: 'pino-pretty',\n                options: {\n                    colorize: true,\n                },\n            },\n            ...config,\n        };\n\n        const names = name.split('-', 2);\n        let isAppLogger = true;\n\n        if (names.length > 1) {\n            options.name = names[1];\n            isAppLogger = false;\n        }\n\n        const logger = pino({\n            level: app.options.logLevel === 'verbose' ? 'debug' : app.options.logLevel,\n            ...options,\n        });\n\n        if (isAppLogger) {\n            logger.verbose = logger.debug.bind(logger);\n\n            if (app._logCache.length > 0) {\n                app._logCache.forEach(([level, message, obj]) => logger[level](obj, message));\n            }\n\n            app.logger = logger;\n            app.log = (level, message, info) => {\n                logger[level](info, message);\n                return this;\n            };\n        }\n\n        app.registerService(name, logger);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","config","name","pino","tryRequire","featureConfig","schema","transport","type","optional","options","nestedKey","target","colorize","names","split","isAppLogger","length","logger","level","logLevel","verbose","debug","bind","_logCache","forEach","message","obj","log","info","registerService"],"mappings":"oGAuBA,iDAAA,4DAlBoB,oCACF,4GAiBlB,SAAe,CAKXA,MAAOC,gBAAO,CAACC,OAAO,CAEtBC,UAAW,IAAI,CAefC,MAAO,SAAUC,GAAG,CAAEC,MAAM,CAAEC,IAAI,CAAE,CAChC,MAAMC,KAAOH,IAAII,UAAU,CAAC,QAE5BH,OAASD,IAAIK,aAAa,CACtBJ,OACA,CACIK,OAAQ,CACJC,UAAW,CAAEC,KAAM,SAAUC,SAAU,IAAI,AAAC,CAChD,CACJ,EACAP,MAGJ,MAAMQ,QAAU,CACZC,UAAW,UACXJ,UAAW,CACPK,OAAQ,cACRF,QAAS,CACLG,SAAU,IAAI,AAClB,CACJ,EACA,GAAGZ,MAAM,AACb,EAEA,MAAMa,MAAQZ,KAAKa,KAAK,CAAC,IAAK,GAC9B,IAAIC,YAAc,IAAI,CAEtB,GAAIF,MAAMG,MAAM,CAAG,EAAG,CAClBP,QAAQR,IAAI,CAAGY,KAAK,CAAC,EAAE,CACvBE,YAAc,KAAK,AACvB,CAAC,AAED,MAAME,OAASf,KAAK,CAChBgB,MAAOnB,IAAIU,OAAO,CAACU,QAAQ,GAAK,UAAY,QAAUpB,IAAIU,OAAO,CAACU,QAAQ,CAC1E,GAAGV,OAAO,AACd,GAEA,GAAIM,YAAa,CACbE,OAAOG,OAAO,CAAGH,OAAOI,KAAK,CAACC,IAAI,CAACL,QAEnC,GAAIlB,IAAIwB,SAAS,CAACP,MAAM,CAAG,EAAG,CAC1BjB,IAAIwB,SAAS,CAACC,OAAO,CAAC,CAAC,CAACN,MAAOO,QAASC,IAAI,GAAKT,MAAM,CAACC,MAAM,CAACQ,IAAKD,SACxE,CAAC,AAED1B,IAAIkB,MAAM,CAAGA,MACblB,CAAAA,IAAI4B,GAAG,CAAG,CAACT,MAAOO,QAASG,OAAS,CAChCX,MAAM,CAACC,MAAM,CAACU,KAAMH,SACpB,OAAO,IAAI,AACf,CACJ,CAAC,AAED1B,IAAI8B,eAAe,CAAC5B,KAAMgB,OAC9B,CACJ"}