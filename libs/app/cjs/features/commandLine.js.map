{"version":3,"sources":["../../lib/features/commandLine.js"],"sourcesContent":["/**\n * Parse command line arguments using minimist and store the parsed object into app.argv, and add app.showUsage() helper function\n * @module Feature_CommandLine\n */\n\nimport path from 'node:path';\nimport { _, pushIntoBucket, eachAsync_ } from '@galaxar/utils';\nimport { ApplicationError, InvalidConfiguration } from '@galaxar/types';\nimport Feature from '../Feature';\n\nfunction translateMinimistOptions(opts) {\n    let m = {};\n\n    _.forOwn(opts, (detail, name) => {\n        if (detail.bool) {\n            pushIntoBucket(m, 'boolean', name);\n        } else {\n            pushIntoBucket(m, 'string', name);\n        }\n\n        if ('default' in detail) {\n            _.set(m, `default.${name}`, detail.default);\n        }\n\n        if (detail.alias) {\n            _.set(m, `alias.${name}`, detail.alias);\n        }\n    });\n\n    return m;\n}\n\nfunction optionDecorator(name) {\n    return name.length == 1 ? '-' + name : '--' + name;\n}\n\nconst gArgv = process.argv.slice(2);\n\n/**\n * Error caused by command line arguments.\n * @class\n * @extends ApplicationError\n */\nclass CommandLineArgumentError extends ApplicationError {\n    /**\n     * @param {string} message - Error message\n     * @param {string} name - The related config item\n     * @param {boolean} nonOption - Whether it is an option\n     */\n    constructor(message, name, nonOption) {\n        super(message, 'E_CLI_INVALID_ARG', { name, nonOption });\n    }\n}\n\n/**\n * Command line helper object.\n */\nclass CommandLine {\n    constructor(app, usage) {\n        this.app = app;\n        this.usage = usage;\n\n        this.parse(usage.options);\n    }\n\n    injectUsage(injects) {\n        this.injects = injects;\n    }\n\n    parse(options) {\n        const minimist = this.app.tryRequire('minimist');\n        const minimistOpts = translateMinimistOptions(options);\n        this.argv = minimist(gArgv, minimistOpts);\n\n        // fix: non-default arg has default value\n        minimistOpts.boolean?.forEach((bn) => {\n            if (!(bn in minimistOpts.default)) {\n                delete this.argv[bn];\n            }\n        });\n\n        minimistOpts.string?.forEach((sn) => {\n            if (!(sn in minimistOpts.default)) {\n                delete this.argv[sn];\n            }\n        });\n    }\n\n    option(name) {\n        return this.argv[name];\n    }\n\n    arg(name) {\n        if (this.args[name]) return this.args[name];\n\n        let index = _.findIndex(this.usage.arguments, (arg) => arg.name === name);\n\n        if (index === -1 || this.argv._.length <= index) {\n            return undefined;\n        }\n\n        this.args || (this.args = {});\n        return (this.args[name] = this.argv._[index]);\n    }\n\n    updateOption(name, value) {\n        this.argv[name] = value;\n        let opts = this.usage.options[name];\n        if (opts.alias) {\n            _.each(opts.alias, (a) => {\n                this.argv[a] = value;\n            });\n        }\n    }\n\n    async valueOrFunctionCall_(functor) {\n        if (typeof functor === 'function') {\n            return await functor(this);\n        }\n\n        return functor;\n    }\n\n    async doFilter_(name, opt, argIndex) {\n        if (opt.filter) {\n            if (typeof argIndex === 'undefined') {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument option \"${name}\" should be a function!`,\n                        this.app,\n                        `commandLine.options[${name}].filter`\n                    );\n                }\n\n                this.updateOption(name, await opt.filter(this.argv[name], this));\n            } else {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument value \"${name}\" at position ${argIndex} should be a function!`,\n                        this.app,\n                        `commandLine.arguments[${argIndex}].filter`\n                    );\n                }\n\n                this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);\n            }\n        }\n    }\n\n    argExist(name, argIndex) {\n        return typeof argIndex === 'undefined' ? name in this.argv : this.argv._.length > argIndex;\n    }\n\n    async inquire_() {\n        const inquirer = this.app.tryRequire('inquirer');\n\n        const doInquire_ = (item, argIndex) =>\n            inquirer.prompt([item]).then((answers) => {\n                console.log();\n\n                _.forOwn(answers, (ans, name) => {\n                    if (typeof argIndex === 'undefined') {\n                        this.updateOption(name, ans);\n                    } else {\n                        assert: this.argv._.length === argIndex;\n\n                        this.argv._ = this.argv._.concat([ans]);\n                    }\n                });\n            });\n\n        const prepareInquire_ = async (opts, name, argIndex) => {\n            let argExists = this.argExist(name, argIndex);\n\n            if ('inquire' in opts && !argExists) {\n                //need inquire and the value not given through command line\n                let inquire = await this.valueOrFunctionCall_(opts.inquire);\n\n                if (inquire) {\n                    let type;\n                    let q = { name: name, message: opts.promptMessage || opts.desc };\n\n                    if (opts.promptType) {\n                        type = opts.promptType;\n                        if (type === 'list' || type === 'rawList' || type === 'checkbox' || type === 'expand') {\n                            if (!opts.choicesProvider) {\n                                throw new InvalidConfiguration(\n                                    typeof argIndex === 'undefined'\n                                        ? `Missing \"choicesProvider\" in the inquirer option for argument option \"${name}\"!`\n                                        : `Missing \"choicesProvider\" in the inquirer option for argument value \"${name}\" at postion ${argIndex}!`,\n                                    this.app,\n                                    typeof argIndex === 'undefined'\n                                        ? `commandLine.options[${name}].choicesProvider`\n                                        : `commandLine.arguments[${argIndex}].choicesProvider`\n                                );\n                            }\n\n                            q.choices = await this.valueOrFunctionCall_(opts.choicesProvider);\n                        }\n                    } else if (opts.bool) {\n                        type = 'confirm';\n                    } else {\n                        type = 'input';\n                    }\n\n                    q.type = type;\n\n                    if ('promptDefault' in opts) {\n                        q.default = await this.valueOrFunctionCall_(opts.promptDefault);\n                    }\n\n                    await doInquire_(q, argIndex);\n                    await this.doFilter_(name, opts, argIndex);\n\n                    if (opts.afterInquire) {\n                        await opts.afterInquire(this);\n                    }\n                }\n            } else if (argExists) {\n                await this.doFilter_(name, opts, argIndex);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n\n            if ((await this.valueOrFunctionCall_(this.usage.showArguments)) && this.argExist(name, argIndex)) {\n                if (typeof argIndex === 'undefined') {\n                    console.log('option', name, `(${opts.desc})`, ':', this.argv[name]);\n                } else {\n                    console.log(`<${name}>`, ':', this.argv._[argIndex]);\n                }\n            }\n        };\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            await eachAsync_(this.usage.arguments, async (argOpt, index) => {\n                let { name, ...opts } = argOpt;\n\n                return prepareInquire_(opts, name, index);\n            });\n        }\n\n        return (\n            _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name))\n        );\n    }\n\n    /**\n     * validate parsed and filled argument options.\n     */\n    async validate_() {\n        const checkRequire_ = (opts) => this.valueOrFunctionCall_(opts.required);\n\n        let errors = [];\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            let argNum = this.argv._.length;\n\n            if (argNum < this.usage.arguments.length) {\n                let args = [];\n\n                let i = 0;\n\n                await eachAsync_(this.usage.arguments, async (arg) => {\n                    let required = await checkRequire_(arg);\n\n                    if (required) {\n                        if (i >= argNum) {\n                            let msg = `Missing required argument \"${arg.name}\"!`;\n\n                            if (this.usage.showUsageOnError) {\n                                errors.push(msg);\n                            } else {\n                                throw new CommandLineArgumentError(msg, arg.name, true);\n                            }\n                        } else {\n                            args.push(this.argv._[i++]);\n                        }\n                    }\n                });\n\n                this.argv._ = args;\n            }\n        }\n\n        this.usage.options &&\n            (await eachAsync_(this.usage.options, async (opts, name) => {\n                let required = await checkRequire_(opts);\n\n                if (required && !(name in this.argv)) {\n                    let msg = `Missing required argument option of \"${name}\"!`;\n\n                    if (this.usage.showUsageOnError) {\n                        errors.push(msg);\n                    } else {\n                        throw new CommandLineArgumentError(msg, name);\n                    }\n                }\n            }));\n\n        if (errors.length > 0) {\n            this.showUsage({\n                afterBanner: () => 'Error(s):\\n' + errors.map((msg) => ' - ' + msg).join('\\n') + '\\n\\n',\n            });\n\n            process.exit(1);\n        }\n    }\n\n    async processSilentModeArguments_() {\n        await eachAsync_(this.usage.arguments, async (arg, index) => {\n            if (this.argv._.length <= index) {\n                if (arg.hasOwnProperty('silentModeDefault')) {\n                    for (let i = this.argv._.length; i < index; i++) {\n                        this.argv._.push(undefined);\n                    }\n\n                    this.argv._.push(await this.valueOrFunctionCall_(arg.silentModeDefault));\n                }\n            } else {\n                const { name, ...opts } = arg;\n                await this.doFilter_(name, opts, index);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n        });\n\n        await eachAsync_(this.usage.options, async (opts, name) => {\n            if (this.argExist(name)) {\n                await this.doFilter_(name, opts);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            } else if (opts.hasOwnProperty('silentModeDefault')) {\n                this.updateOption(name, await this.valueOrFunctionCall_(opts.silentModeDefault));\n            }\n        });\n    }\n\n    getBanner() {\n        if (this.usage.banner) {\n            let banner = '';\n\n            if (typeof this.usage.banner === 'function') {\n                banner += this.usage.banner(this);\n            } else if (typeof this.usage.banner === 'string') {\n                banner += this.usage.banner;\n            } else {\n                throw new InvalidConfiguration(\n                    'Invalid banner value of commandLine feature.',\n                    this.app,\n                    `commandLine.banner`\n                );\n            }\n\n            banner += '\\n';\n\n            return banner;\n        }\n\n        return undefined;\n    }\n\n    getUsage(injects) {\n        injects = { ...this.injects, ...injects };\n\n        let usage = '';\n\n        let banner = !this.bannerShown && this.getBanner();\n        if (banner) {\n            usage += banner + '\\n';\n        }\n\n        if (injects && injects.afterBanner) {\n            usage += injects.afterBanner();\n        }\n\n        let fmtArgs = '';\n        if (!_.isEmpty(this.usage.arguments)) {\n            fmtArgs =\n                ' ' + this.usage.arguments.map((arg) => (arg.required ? `<${arg.name}>` : `[${arg.name}]`)).join(' ');\n        }\n\n        usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\\n\\n`;\n\n        if (injects && injects.afterCommandLine) {\n            usage += injects.afterCommandLine();\n        }\n\n        if (!_.isEmpty(this.usage.options)) {\n            usage += `Options:\\n`;\n            _.forOwn(this.usage.options, (opts, name) => {\n                let line = '  ' + optionDecorator(name);\n                if (opts.alias) {\n                    line += _.reduce(opts.alias, (sum, a) => sum + ', ' + optionDecorator(a), '');\n                }\n\n                line += '\\n';\n                line += '    ' + opts.desc + '\\n';\n\n                if ('default' in opts) {\n                    line += '    default: ' + opts.default.toString() + '\\n';\n                }\n\n                if (opts.required) {\n                    if (typeof opts.required === 'function') {\n                        line += '    conditional\\n';\n                    } else {\n                        line += '    required\\n';\n                    }\n                }\n\n                if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {\n                    line += '    available values:\\n';\n                    opts.choicesProvider.forEach((choice) => {\n                        line += `        \"${choice.value}\": ${choice.name}\\n`;\n                    });\n                }\n\n                line += '\\n';\n\n                usage += line;\n            });\n        }\n\n        if (injects && injects.afterOptions) {\n            usage += injects.afterOptions();\n        }\n\n        return usage;\n    }\n\n    showBannar() {\n        let banner = this.getBanner();\n        if (banner) {\n            console.log(banner);\n            this.bannerShown = true;\n        }\n    }\n\n    showUsage(injects) {\n        console.log(this.getUsage(injects));\n    }\n}\n\nexport default {\n    /**\n     * This feature is loaded at initialization stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} usageOptions - Options for the feature\n     * @property {string} [usageOptions.banner] - Banner message or banner generator function\n     * @property {string} [usageOptions.program] - Executable name\n     * @property {array} [usageOptions.arguments] - Command line arguments, identified by the position of appearance\n     * @property {object} [usageOptions.options] - Command line options\n     * @property {boolean|function} [usageOptions.silentMode] - Whether to run in silient mode, default false\n     * @property {boolean|function} [usageOptions.nonValidationMode] - Whether to run validation\n     * @property {boolean} [usageOptions.showUsageOnError]\n     *\n     * @example\n     *   options: { [argumentKey]: {\n     *      desc, // {string} - description\n     *      alias, // {array.<string>} - alias array\n     *      bool, // {boolean} - whether it is a boolean value\n     *      default, // {*} - default value\n     *      inquire, // {boolean | function(cli).<boolean>} - whether to enable interactive query\n     *      promptMessage, // {string} - prompt message for query, will use desc if not set\n     *      promptType, // {string} - prompt type, can be one of [ input, number, confirm, list, rawlist, expand, checkbox, password, editor ]\n     *      promptDefault, // {* | function(cli).<*>} - default value appeared on query or a async function to return the default value\n     *      choicesProvider, // {array | function(cli).<array> | function.<function(string).<array>>} - required for prompt type list, rawlist, expand, checkbox\n     *      filter, // {function(argv, cli).<argv>} - filter to process the argument value\n     *      afterInquire, // {function} - after inquire hook,\n     *      onArgumentExists, // {function} - when argument exists,\n     *      silentModeDefault // {*} - default value when run in silient mode,\n     *   } }\n     *\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, usageOptions) => {\n        app.commandLine = new CommandLine(app, usageOptions);\n\n        let silentMode = usageOptions.silentMode;\n\n        if (silentMode && typeof silentMode === 'function') {\n            silentMode = silentMode(app.commandLine);\n        }\n\n        app.commandLine.silentMode = silentMode;\n\n        if (silentMode) {\n            await app.commandLine.processSilentModeArguments_();\n        } else {\n            app.commandLine.showBannar();\n            await app.commandLine.inquire_();\n        }\n\n        let nonValidationMode = usageOptions.nonValidationMode;\n\n        if (nonValidationMode && typeof nonValidationMode === 'function') {\n            nonValidationMode = nonValidationMode(app.commandLine);\n        }\n\n        app.commandLine.nonValidationMode = nonValidationMode;\n\n        if (!nonValidationMode) {\n            await app.commandLine.validate_();\n        }\n    },\n};\n"],"names":["translateMinimistOptions","opts","m","_","forOwn","detail","name","bool","pushIntoBucket","set","default","alias","optionDecorator","length","gArgv","process","argv","slice","CommandLineArgumentError","ApplicationError","constructor","message","nonOption","CommandLine","injectUsage","injects","parse","options","minimist","app","tryRequire","minimistOpts","boolean","forEach","bn","string","sn","option","arg","args","index","findIndex","usage","arguments","undefined","updateOption","value","each","a","valueOrFunctionCall_","functor","doFilter_","opt","argIndex","filter","InvalidConfiguration","argExist","inquire_","inquirer","doInquire_","item","prompt","then","answers","console","log","ans","assert","concat","prepareInquire_","argExists","inquire","type","q","promptMessage","desc","promptType","choicesProvider","choices","promptDefault","afterInquire","onArgumentExists","showArguments","isEmpty","eachAsync_","argOpt","validate_","checkRequire_","required","errors","argNum","i","msg","showUsageOnError","push","showUsage","afterBanner","map","join","exit","processSilentModeArguments_","hasOwnProperty","silentModeDefault","getBanner","banner","getUsage","bannerShown","fmtArgs","program","path","basename","afterCommandLine","line","reduce","sum","toString","Array","isArray","choice","afterOptions","showBannar","stage","Feature","INIT","load_","usageOptions","commandLine","silentMode","nonValidationMode"],"mappings":"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"}