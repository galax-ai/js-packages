{"version":3,"sources":["../../lib/features/commandLine.js"],"sourcesContent":["/**\n * Parse command line arguments using minimist and store the parsed object into app.argv, and add app.showUsage() helper function\n * @module Feature_CommandLine\n */\n\nimport path from 'node:path';\nimport { _, pushIntoBucket, eachAsync_ } from '@galaxar/utils';\nimport { ApplicationError, InvalidConfiguration } from '@galaxar/types';\nimport Feature from '../Feature';\n\nfunction translateMinimistOptions(opts) {\n    let m = {};\n\n    _.forOwn(opts, (detail, name) => {\n        if (detail.bool) {\n            pushIntoBucket(m, 'boolean', name);\n        } else {\n            pushIntoBucket(m, 'string', name);\n        }\n\n        if ('default' in detail) {\n            _.set(m, `default.${name}`, detail.default);\n        }\n\n        if (detail.alias) {\n            _.set(m, `alias.${name}`, detail.alias);\n        }\n    });\n\n    return m;\n}\n\nfunction optionDecorator(name) {\n    return name.length == 1 ? '-' + name : '--' + name;\n}\n\nlet gArgv = process.argv.slice(2);\n\n/**\n * Error caused by command line arguments.\n * @class\n * @extends ApplicationError\n */\nclass CommandLineArgumentError extends ApplicationError {\n    /**\n     * @param {string} message - Error message\n     * @param {string} name - The related config item\n     * @param {boolean} nonOption - Whether it is an option\n     */\n    constructor(message, name, nonOption) {\n        super(message, 'E_CLI_INVALID_ARG', { name, nonOption });\n    }\n}\n\n/**\n * Command line helper object.\n */\nclass CommandLine {\n    constructor(app, usage) {\n        this.app = app;\n        this.usage = usage;        \n\n        this.parse(usage.options);\n    }\n\n    injectUsage(injects) {\n        this.injects = injects;\n    }\n\n    parse(options) {\n        const minimist = this.app.tryRequire('minimist');\n        const minimistOpts = translateMinimistOptions(options);\n        this.argv = minimist(gArgv, minimistOpts);\n    }\n\n    option(name) {\n        return this.argv[name];\n    }\n\n    arg(name) {\n        if (this.args[name]) return this.args[name];\n\n        let index = _.findIndex(this.usage.arguments, (arg) => arg.name === name);\n\n        if (index === -1 || this.argv._.length <= index) {\n            return undefined;\n        }\n\n        this.args || (this.args = {});\n        return (this.args[name] = this.argv._[index]);\n    }\n\n    updateOption(name, value) {\n        this.argv[name] = value;\n        let opts = this.usage.options[name];\n        if (opts.alias) {\n            _.each(opts.alias, (a) => {\n                this.argv[a] = value;\n            });\n        }\n    }\n\n    async valueOrFunctionCall_(functor) {\n        if (typeof functor === 'function') {\n            return await functor(this);\n        }\n\n        return functor;\n    }\n\n    async doFilter_(name, opt, argIndex) {\n        if (opt.filter) {\n            if (typeof argIndex === 'undefined') {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument option \"${name}\" should be a function!`,\n                        this.app,\n                        `commandLine.options[${name}].filter`\n                    );\n                }\n\n                this.updateOption(name, await opt.filter(this.argv[name], this));\n            } else {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument value \"${name}\" at position ${argIndex} should be a function!`,\n                        this.app,\n                        `commandLine.arguments[${argIndex}].filter`\n                    );\n                }\n\n                this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);\n            }\n        }\n    }\n\n    argExist(name, argIndex) {\n        return typeof argIndex === 'undefined' ? name in this.argv : this.argv._.length > argIndex;\n    }\n\n    async inquire_() {\n        const inquirer = this.app.tryRequire('inquirer');\n\n        const doInquire_ = (item, argIndex) =>\n            inquirer.prompt([item]).then((answers) => {\n                console.log();\n\n                _.forOwn(answers, (ans, name) => {\n                    if (typeof argIndex === 'undefined') {\n                        this.updateOption(name, ans);\n                    } else {\n                        assert: this.argv._.length === argIndex;\n\n                        this.argv._ = this.argv._.concat([ans]);\n                    }\n                });\n            });\n\n        const prepareInquire_ = async (opts, name, argIndex) => {\n            let argExists = this.argExist(name, argIndex);\n\n            if ('inquire' in opts && !argExists) {\n                //need inquire and the value not given through command line\n                let inquire = await this.valueOrFunctionCall_(opts.inquire);\n\n                if (inquire) {\n                    let type;\n                    let q = { name: name, message: opts.promptMessage || opts.desc };\n\n                    if (opts.promptType) {\n                        type = opts.promptType;\n                        if (type === 'list' || type === 'rawList' || type === 'checkbox' || type === 'expand') {\n                            if (!opts.choicesProvider) {\n                                throw new InvalidConfiguration(\n                                    typeof argIndex === 'undefined'\n                                        ? `Missing \"choicesProvider\" in the inquirer option for argument option \"${name}\"!`\n                                        : `Missing \"choicesProvider\" in the inquirer option for argument value \"${name}\" at postion ${argIndex}!`,\n                                    this.app,\n                                    typeof argIndex === 'undefined'\n                                        ? `commandLine.options[${name}].choicesProvider`\n                                        : `commandLine.arguments[${argIndex}].choicesProvider`\n                                );\n                            }\n\n                            q.choices = await this.valueOrFunctionCall_(opts.choicesProvider);\n                        }\n                    } else if (opts.bool) {\n                        type = 'confirm';\n                    } else {\n                        type = 'input';\n                    }\n\n                    q.type = type;\n\n                    if ('promptDefault' in opts) {\n                        q.default = await this.valueOrFunctionCall_(opts.promptDefault);\n                    }\n\n                    await doInquire_(q, argIndex);\n                    await this.doFilter_(name, opts, argIndex);\n\n                    if (opts.afterInquire) {\n                        await opts.afterInquire(this);\n                    }\n                }\n            } else if (argExists) {\n                await this.doFilter_(name, opts, argIndex);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n\n            if ((await this.valueOrFunctionCall_(this.usage.showArguments)) && this.argExist(name, argIndex)) {\n                if (typeof argIndex === 'undefined') {\n                    console.log('option', name, `(${opts.desc})`, ':', this.argv[name]);\n                } else {\n                    console.log(`<${name}>`, ':', this.argv._[argIndex]);\n                }\n            }\n        };\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            await eachAsync_(this.usage.arguments, async (argOpt, index) => {\n                let { name, ...opts } = argOpt;\n\n                return prepareInquire_(opts, name, index);\n            });\n        }\n\n        return (\n            _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name))\n        );\n    }\n\n    /**\n     * validate parsed and filled argument options.\n     */\n    async validate_() {\n        const checkRequire_ = (opts) => this.valueOrFunctionCall_(opts.required);\n\n        let errors = [];\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            let argNum = this.argv._.length;\n\n            if (argNum < this.usage.arguments.length) {\n                let args = [];\n\n                let i = 0;\n\n                await eachAsync_(this.usage.arguments, async (arg) => {\n                    let required = await checkRequire_(arg);\n\n                    if (required) {\n                        if (i >= argNum) {\n                            let msg = `Missing required argument \"${arg.name}\"!`;\n\n                            if (this.usage.showUsageOnError) {\n                                errors.push(msg);\n                            } else {\n                                throw new CommandLineArgumentError(msg, arg.name, true);\n                            }\n                        } else {\n                            args.push(this.argv._[i++]);\n                        }\n                    }\n                });\n\n                this.argv._ = args;\n            }\n        }\n\n        this.usage.options &&\n            (await eachAsync_(this.usage.options, async (opts, name) => {\n                let required = await checkRequire_(opts);\n\n                if (required && !(name in this.argv)) {\n                    let msg = `Missing required argument option of \"${name}\"!`;\n\n                    if (this.usage.showUsageOnError) {\n                        errors.push(msg);\n                    } else {\n                        throw new CommandLineArgumentError(msg, name);\n                    }\n                }\n            }));\n\n        if (errors.length > 0) {\n            this.showUsage({\n                afterBanner: () => 'Error(s):\\n' + errors.map((msg) => ' - ' + msg).join('\\n') + '\\n\\n',\n            });\n\n            process.exit(1);\n        }\n    }\n\n    async processSilentModeArguments_() {\n        await eachAsync_(this.usage.arguments, async (arg, index) => {\n            if (this.argv._.length <= index) {\n                if (arg.hasOwnProperty('silentModeDefault')) {\n                    for (let i = this.argv._.length; i < index; i++) {\n                        this.argv._.push(undefined);\n                    }\n\n                    this.argv._.push(await this.valueOrFunctionCall_(arg.silentModeDefault));\n                }\n            } else {\n                const { name, ...opts } = arg;\n                await this.doFilter_(name, opts, index);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n        });\n\n        await eachAsync_(this.usage.options, async (opts, name) => {\n            if (this.argExist(name)) {\n                await this.doFilter_(name, opts);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            } else if (opts.hasOwnProperty('silentModeDefault')) {\n                this.updateOption(name, await this.valueOrFunctionCall_(opts.silentModeDefault));\n            }\n        });\n    }\n\n    getBanner() {\n        if (this.usage.banner) {\n            let banner = '';\n\n            if (typeof this.usage.banner === 'function') {\n                banner += this.usage.banner(this);\n            } else if (typeof this.usage.banner === 'string') {\n                banner += this.usage.banner;\n            } else {\n                throw new InvalidConfiguration(\n                    'Invalid banner value of commandLine feature.',\n                    this.app,\n                    `commandLine.banner`\n                );\n            }\n\n            banner += '\\n';\n\n            return banner;\n        }\n\n        return undefined;\n    }\n\n    getUsage(injects) {\n        injects = { ...this.injects, ...injects };\n\n        let usage = '';\n\n        let banner = !this.bannerShown && this.getBanner();\n        if (banner) {\n            usage += banner + '\\n';\n        }\n\n        if (injects && injects.afterBanner) {\n            usage += injects.afterBanner();\n        }\n\n        let fmtArgs = '';\n        if (!_.isEmpty(this.usage.arguments)) {\n            fmtArgs =\n                ' ' + this.usage.arguments.map((arg) => (arg.required ? `<${arg.name}>` : `[${arg.name}]`)).join(' ');\n        }\n\n        usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\\n\\n`;\n\n        if (injects && injects.afterCommandLine) {\n            usage += injects.afterCommandLine();\n        }\n\n        if (!_.isEmpty(this.usage.options)) {\n            usage += `Options:\\n`;\n            _.forOwn(this.usage.options, (opts, name) => {\n                let line = '  ' + optionDecorator(name);\n                if (opts.alias) {\n                    line += _.reduce(opts.alias, (sum, a) => sum + ', ' + optionDecorator(a), '');\n                }\n\n                line += '\\n';\n                line += '    ' + opts.desc + '\\n';\n\n                if ('default' in opts) {\n                    line += '    default: ' + opts.default.toString() + '\\n';\n                }\n\n                if (opts.required) {\n                    if (typeof opts.required === 'function') {\n                        line += '    conditional\\n';\n                    } else {\n                        line += '    required\\n';\n                    }\n                }\n\n                if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {\n                    line += '    available values:\\n';\n                    opts.choicesProvider.forEach((choice) => {\n                        line += `        \"${choice.value}\": ${choice.name}\\n`;\n                    });\n                }\n\n                line += '\\n';\n\n                usage += line;\n            });\n        }\n\n        if (injects && injects.afterOptions) {\n            usage += injects.afterOptions();\n        }\n\n        return usage;\n    }\n\n    showBannar() {\n        let banner = this.getBanner();\n        if (banner) {\n            console.log(banner);\n            this.bannerShown = true;\n        }\n    }\n\n    showUsage(injects) {\n        console.log(this.getUsage(injects));\n    }\n}\n\nexport default {\n    /**\n     * This feature is loaded at initialization stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} usageOptions - Options for the feature\n     * @property {string} [usageOptions.banner] - Banner message or banner generator function\n     * @property {string} [usageOptions.program] - Executable name\n     * @property {array} [usageOptions.arguments] - Command line arguments, identified by the position of appearance\n     * @property {object} [usageOptions.options] - Command line options\n     * @property {boolean|function} [usageOptions.silentMode] - Whether to run in silient mode, default false\n     * @property {boolean|function} [usageOptions.nonValidationMode] - Whether to run validation\n     * @property {boolean} [usageOptions.showUsageOnError]\n     *\n     * @example\n     *   options: { [argumentKey]: {\n     *      desc, // {string} - description\n     *      alias, // {array.<string>} - alias array\n     *      bool, // {boolean} - whether it is a boolean value\n     *      default, // {*} - default value\n     *      inquire, // {boolean | function(cli).<boolean>} - whether to enable interactive query\n     *      promptMessage, // {string} - prompt message for query, will use desc if not set\n     *      promptType, // {string} - prompt type, can be one of [ input, number, confirm, list, rawlist, expand, checkbox, password, editor ]\n     *      promptDefault, // {* | function(cli).<*>} - default value appeared on query or a async function to return the default value\n     *      choicesProvider, // {array | function(cli).<array> | function.<function(string).<array>>} - required for prompt type list, rawlist, expand, checkbox\n     *      filter, // {function(argv, cli).<argv>} - filter to process the argument value\n     *      afterInquire, // {function} - after inquire hook,\n     *      onArgumentExists, // {function} - when argument exists,\n     *      silentModeDefault // {*} - default value when run in silient mode,\n     *   } }\n     *\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options, name) => {\n        const { testArgs, ...usageOptions } = app.featureConfig(options, {\n            schema: {\n                testArgs: { type: 'array', optional: true },\n            },\n            keepUnsanitized: true,\n        }, name);\n\n        if (testArgs) {\n            gArgv = testArgs;\n        }\n\n        app.commandLine = new CommandLine(app, usageOptions);\n\n        let silentMode = usageOptions.silentMode;\n\n        if (silentMode && typeof silentMode === 'function') {\n            silentMode = silentMode(app.commandLine);\n        }\n\n        app.commandLine.silentMode = silentMode;\n\n        if (silentMode) {\n            await app.commandLine.processSilentModeArguments_();\n        } else {            \n            app.commandLine.showBannar();\n            await app.commandLine.inquire_();\n        }\n\n        let nonValidationMode = usageOptions.nonValidationMode;\n\n        if (nonValidationMode && typeof nonValidationMode === 'function') {\n            nonValidationMode = nonValidationMode(app.commandLine);\n        }\n\n        app.commandLine.nonValidationMode = nonValidationMode;\n\n        if (!nonValidationMode) {\n            await app.commandLine.validate_();\n        }\n    },\n};\n"],"names":["translateMinimistOptions","opts","m","_","forOwn","detail","name","bool","pushIntoBucket","set","default","alias","optionDecorator","length","gArgv","process","argv","slice","CommandLineArgumentError","ApplicationError","constructor","message","nonOption","CommandLine","injectUsage","injects","parse","options","minimist","app","tryRequire","minimistOpts","option","arg","args","index","findIndex","usage","arguments","undefined","updateOption","value","each","a","valueOrFunctionCall_","functor","doFilter_","opt","argIndex","filter","InvalidConfiguration","argExist","inquire_","inquirer","doInquire_","item","prompt","then","answers","console","log","ans","assert","concat","prepareInquire_","argExists","inquire","type","q","promptMessage","desc","promptType","choicesProvider","choices","promptDefault","afterInquire","onArgumentExists","showArguments","isEmpty","eachAsync_","argOpt","validate_","checkRequire_","required","errors","argNum","i","msg","showUsageOnError","push","showUsage","afterBanner","map","join","exit","processSilentModeArguments_","hasOwnProperty","silentModeDefault","getBanner","banner","getUsage","bannerShown","fmtArgs","program","path","basename","afterCommandLine","line","reduce","sum","toString","Array","isArray","forEach","choice","afterOptions","showBannar","stage","Feature","INIT","load_","testArgs","usageOptions","featureConfig","schema","optional","keepUnsanitized","commandLine","silentMode","nonValidationMode"],"mappings":"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"}