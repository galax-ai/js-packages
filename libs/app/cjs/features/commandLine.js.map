{"version":3,"sources":["../../lib/features/commandLine.js"],"sourcesContent":["/**\n * Parse command line arguments using minimist and store the parsed object into app.argv, and add app.showUsage() helper function\n * @module Feature_CommandLine\n */\n\nimport path from 'node:path';\nimport { _, pushIntoBucket, eachAsync_ } from '@galaxar/utils';\nimport { ApplicationError, InvalidConfiguration } from '@galaxar/types';\nimport Feature from '../Feature';\n\nfunction translateMinimistOptions(opts) {\n    let m = {};\n\n    _.forOwn(opts, (detail, name) => {\n        if (detail.bool) {\n            pushIntoBucket(m, 'boolean', name);\n        } else {\n            pushIntoBucket(m, 'string', name);\n        }\n\n        if ('default' in detail) {\n            _.set(m, `default.${name}`, detail.default);\n        }\n\n        if (detail.alias) {\n            _.set(m, `alias.${name}`, detail.alias);\n        }\n    });\n\n    return m;\n}\n\nfunction optionDecorator(name) {\n    return name.length == 1 ? '-' + name : '--' + name;\n}\n\nconst gArgv = process.argv.slice(2);\n\n/**\n * Error caused by command line arguments.\n * @class\n * @extends ApplicationError\n */\nclass CommandLineArgumentError extends ApplicationError {\n    /**\n     * @param {string} message - Error message\n     * @param {string} name - The related config item\n     * @param {boolean} nonOption - Whether it is an option\n     */\n    constructor(message, name, nonOption) {\n        super(message, 'E_CLI_INVALID_ARG', { name, nonOption });\n    }\n}\n\n/**\n * Command line helper object.\n */\nclass CommandLine {\n    constructor(app, usage) {\n        this.app = app;\n        this.usage = usage;\n\n        this.parse(usage.options);\n    }\n\n    injectUsage(injects) {\n        this.injects = injects;\n    }\n\n    parse(options) {\n        const minimist = this.app.tryRequire('minimist');\n        const minimistOpts = translateMinimistOptions(options);\n        this.argv = minimist(gArgv, minimistOpts);\n\n        // fix: non-default arg has default value\n        minimistOpts.boolean?.forEach((bn) => {\n            if (!(bn in minimistOpts.default)) {\n                delete this.argv[bn];\n            }\n        });\n\n        minimistOpts.string?.forEach((sn) => {\n            if (!(sn in minimistOpts.default)) {\n                delete this.argv[sn];\n            }\n        });\n    }\n\n    option(name) {\n        return this.argv[name];\n    }\n\n    arg(name) {\n        if (this.args[name]) return this.args[name];\n\n        let index = _.findIndex(this.usage.arguments, (arg) => arg.name === name);\n\n        if (index === -1 || this.argv._.length <= index) {\n            return undefined;\n        }\n\n        this.args || (this.args = {});\n        return (this.args[name] = this.argv._[index]);\n    }\n\n    updateOption(name, value) {\n        this.argv[name] = value;\n        let opts = this.usage.options[name];\n        if (opts.alias) {\n            _.each(opts.alias, (a) => {\n                this.argv[a] = value;\n            });\n        }\n    }\n\n    async valueOrFunctionCall_(functor) {\n        if (typeof functor === 'function') {\n            return await functor(this);\n        }\n\n        return functor;\n    }\n\n    async doFilter_(name, opt, argIndex) {\n        if (opt.filter) {\n            if (typeof argIndex === 'undefined') {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument option \"${name}\" should be a function!`,\n                        this.app,\n                        `commandLine.options[${name}].filter`\n                    );\n                }\n\n                this.updateOption(name, await opt.filter(this.argv[name], this));\n            } else {\n                if (!(typeof opt.filter !== 'function')) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument value \"${name}\" at position ${argIndex} should be a function!`,\n                        this.app,\n                        `commandLine.arguments[${argIndex}].filter`\n                    );\n                }\n\n                this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);\n            }\n        }\n    }\n\n    argExist(name, argIndex) {\n        return typeof argIndex === 'undefined' ? name in this.argv : this.argv._.length > argIndex;\n    }\n\n    async inquire_() {\n        const inquirer = this.app.tryRequire('inquirer');\n\n        const doInquire_ = (item, argIndex) =>\n            inquirer.prompt([item]).then((answers) => {\n                console.log();\n\n                _.forOwn(answers, (ans, name) => {\n                    if (typeof argIndex === 'undefined') {\n                        this.updateOption(name, ans);\n                    } else {\n                        assert: this.argv._.length === argIndex;\n\n                        this.argv._ = this.argv._.concat([ans]);\n                    }\n                });\n            });\n\n        const prepareInquire_ = async (opts, name, argIndex) => {\n            let argExists = this.argExist(name, argIndex);\n\n            if ('inquire' in opts && !argExists) {\n                //need inquire and the value not given through command line\n                let inquire = await this.valueOrFunctionCall_(opts.inquire);\n\n                if (inquire) {\n                    let type;\n                    let q = { name: name, message: opts.promptMessage || opts.desc };\n\n                    if (opts.promptType) {\n                        type = opts.promptType;\n                        if (type === 'list' || type === 'rawList' || type === 'checkbox' || type === 'expand') {\n                            if (!opts.choicesProvider) {\n                                throw new InvalidConfiguration(\n                                    typeof argIndex === 'undefined'\n                                        ? `Missing \"choicesProvider\" in the inquirer option for argument option \"${name}\"!`\n                                        : `Missing \"choicesProvider\" in the inquirer option for argument value \"${name}\" at postion ${argIndex}!`,\n                                    this.app,\n                                    typeof argIndex === 'undefined'\n                                        ? `commandLine.options[${name}].choicesProvider`\n                                        : `commandLine.arguments[${argIndex}].choicesProvider`\n                                );\n                            }\n\n                            q.choices = await this.valueOrFunctionCall_(opts.choicesProvider);\n                        }\n                    } else if (opts.bool) {\n                        type = 'confirm';\n                    } else {\n                        type = 'input';\n                    }\n\n                    q.type = type;\n\n                    if ('promptDefault' in opts) {\n                        q.default = await this.valueOrFunctionCall_(opts.promptDefault);\n                    }\n\n                    await doInquire_(q, argIndex);\n                    await this.doFilter_(name, opts, argIndex);\n\n                    if (opts.afterInquire) {\n                        await opts.afterInquire(this);\n                    }\n                }\n            } else if (argExists) {\n                await this.doFilter_(name, opts, argIndex);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n\n            if ((await this.valueOrFunctionCall_(this.usage.showArguments)) && this.argExist(name, argIndex)) {\n                if (typeof argIndex === 'undefined') {\n                    console.log('option', name, `(${opts.desc})`, ':', this.argv[name]);\n                } else {\n                    console.log(`<${name}>`, ':', this.argv._[argIndex]);\n                }\n            }\n        };\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            await eachAsync_(this.usage.arguments, async (argOpt, index) => {\n                let { name, ...opts } = argOpt;\n\n                return prepareInquire_(opts, name, index);\n            });\n        }\n\n        return (\n            _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name))\n        );\n    }\n\n    /**\n     * validate parsed and filled argument options.\n     */\n    async validate_() {\n        const checkRequire_ = (opts) => this.valueOrFunctionCall_(opts.required);\n\n        let errors = [];\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            let argNum = this.argv._.length;\n\n            if (argNum < this.usage.arguments.length) {\n                let args = [];\n\n                let i = 0;\n\n                await eachAsync_(this.usage.arguments, async (arg) => {\n                    let required = await checkRequire_(arg);\n\n                    if (required) {\n                        if (i >= argNum) {\n                            let msg = `Missing required argument \"${arg.name}\"!`;\n\n                            if (this.usage.showUsageOnError) {\n                                errors.push(msg);\n                            } else {\n                                throw new CommandLineArgumentError(msg, arg.name, true);\n                            }\n                        } else {\n                            args.push(this.argv._[i++]);\n                        }\n                    }\n                });\n\n                this.argv._ = args;\n            }\n        }\n\n        this.usage.options &&\n            (await eachAsync_(this.usage.options, async (opts, name) => {\n                let required = await checkRequire_(opts);\n\n                if (required && !(name in this.argv)) {\n                    let msg = `Missing required argument option of \"${name}\"!`;\n\n                    if (this.usage.showUsageOnError) {\n                        errors.push(msg);\n                    } else {\n                        throw new CommandLineArgumentError(msg, name);\n                    }\n                }\n            }));\n\n        if (errors.length > 0) {\n            this.showUsage({\n                afterBanner: () => 'Error(s):\\n' + errors.map((msg) => ' - ' + msg).join('\\n') + '\\n\\n',\n            });\n\n            process.exit(1);\n        }\n    }\n\n    async processSilentModeArguments_() {\n        await eachAsync_(this.usage.arguments, async (arg, index) => {\n            if (this.argv._.length <= index) {\n                if (arg.hasOwnProperty('silentModeDefault')) {\n                    for (let i = this.argv._.length; i < index; i++) {\n                        this.argv._.push(undefined);\n                    }\n\n                    this.argv._.push(await this.valueOrFunctionCall_(arg.silentModeDefault));\n                }\n            } else {\n                const { name, ...opts } = arg;\n                await this.doFilter_(name, opts, index);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n        });\n\n        await eachAsync_(this.usage.options, async (opts, name) => {\n            if (this.argExist(name)) {\n                await this.doFilter_(name, opts);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            } else if (opts.hasOwnProperty('silentModeDefault')) {\n                this.updateOption(name, await this.valueOrFunctionCall_(opts.silentModeDefault));\n            }\n        });\n    }\n\n    getBanner() {\n        if (this.usage.banner) {\n            let banner = '';\n\n            if (typeof this.usage.banner === 'function') {\n                banner += this.usage.banner(this);\n            } else if (typeof this.usage.banner === 'string') {\n                banner += this.usage.banner;\n            } else {\n                throw new InvalidConfiguration(\n                    'Invalid banner value of commandLine feature.',\n                    this.app,\n                    `commandLine.banner`\n                );\n            }\n\n            banner += '\\n';\n\n            return banner;\n        }\n\n        return undefined;\n    }\n\n    getUsage(injects) {\n        injects = { ...this.injects, ...injects };\n\n        let usage = '';\n\n        let banner = !this.bannerShown && this.getBanner();\n        if (banner) {\n            usage += banner + '\\n';\n        }\n\n        if (injects && injects.afterBanner) {\n            usage += injects.afterBanner();\n        }\n\n        let fmtArgs = '';\n        if (!_.isEmpty(this.usage.arguments)) {\n            fmtArgs =\n                ' ' + this.usage.arguments.map((arg) => (arg.required ? `<${arg.name}>` : `[${arg.name}]`)).join(' ');\n        }\n\n        usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\\n\\n`;\n\n        if (injects && injects.afterCommandLine) {\n            usage += injects.afterCommandLine();\n        }\n\n        if (!_.isEmpty(this.usage.options)) {\n            usage += `Options:\\n`;\n            _.forOwn(this.usage.options, (opts, name) => {\n                let line = '  ' + optionDecorator(name);\n                if (opts.alias) {\n                    line += _.reduce(opts.alias, (sum, a) => sum + ', ' + optionDecorator(a), '');\n                }\n\n                line += '\\n';\n                line += '    ' + opts.desc + '\\n';\n\n                if ('default' in opts) {\n                    line += '    default: ' + opts.default.toString() + '\\n';\n                }\n\n                if (opts.required) {\n                    if (typeof opts.required === 'function') {\n                        line += '    conditional\\n';\n                    } else {\n                        line += '    required\\n';\n                    }\n                }\n\n                if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {\n                    line += '    available values:\\n';\n                    opts.choicesProvider.forEach((choice) => {\n                        line += `        \"${choice.value}\": ${choice.name}\\n`;\n                    });\n                }\n\n                line += '\\n';\n\n                usage += line;\n            });\n        }\n\n        if (injects && injects.afterOptions) {\n            usage += injects.afterOptions();\n        }\n\n        return usage;\n    }\n\n    showBannar() {\n        let banner = this.getBanner();\n        if (banner) {\n            console.log(banner);\n            this.bannerShown = true;\n        }\n    }\n\n    showUsage(injects) {\n        console.log(this.getUsage(injects));\n    }\n}\n\nexport default {\n    /**\n     * This feature is loaded at initialization stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} usageOptions - Options for the feature\n     * @property {string} [usageOptions.banner] - Banner message or banner generator function\n     * @property {string} [usageOptions.program] - Executable name\n     * @property {array} [usageOptions.arguments] - Command line arguments, identified by the position of appearance\n     * @property {object} [usageOptions.options] - Command line options\n     * @property {boolean|function} [usageOptions.silentMode] - Whether to run in silient mode, default false\n     * @property {boolean|function} [usageOptions.nonValidationMode] - Whether to run validation\n     * @property {boolean} [usageOptions.showUsageOnError]\n     *\n     * @example\n     *   options: { [argumentKey]: {\n     *      desc, // {string} - description\n     *      alias, // {array.<string>} - alias array\n     *      bool, // {boolean} - whether it is a boolean value\n     *      default, // {*} - default value\n     *      inquire, // {boolean | function(cli).<boolean>} - whether to enable interactive query\n     *      promptMessage, // {string} - prompt message for query, will use desc if not set\n     *      promptType, // {string} - prompt type, can be one of [ input, number, confirm, list, rawlist, expand, checkbox, password, editor ]\n     *      promptDefault, // {* | function(cli).<*>} - default value appeared on query or a async function to return the default value\n     *      choicesProvider, // {array | function(cli).<array> | function.<function(string).<array>>} - required for prompt type list, rawlist, expand, checkbox\n     *      filter, // {function(argv, cli).<argv>} - filter to process the argument value\n     *      afterInquire, // {function} - after inquire hook,\n     *      onArgumentExists, // {function} - when argument exists,\n     *      silentModeDefault // {*} - default value when run in silient mode,\n     *   } }\n     *\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, usageOptions) => {\n        app.commandLine = new CommandLine(app, usageOptions);\n\n        let silentMode = usageOptions.silentMode;\n\n        if (silentMode && typeof silentMode === 'function') {\n            silentMode = silentMode(app.commandLine);\n        }\n\n        app.commandLine.silentMode = silentMode;\n\n        if (silentMode) {\n            await app.commandLine.processSilentModeArguments_();\n        } else {\n            app.commandLine.showBannar();\n            await app.commandLine.inquire_();\n        }\n\n        let nonValidationMode = usageOptions.nonValidationMode;\n\n        if (nonValidationMode && typeof nonValidationMode === 'function') {\n            nonValidationMode = nonValidationMode(app.commandLine);\n        }\n\n        app.commandLine.nonValidationMode = nonValidationMode;\n\n        if (!nonValidationMode) {\n            await app.commandLine.validate_();\n        }\n    },\n};\n"],"names":["translateMinimistOptions","opts","m","_","forOwn","detail","name","bool","pushIntoBucket","set","default","alias","optionDecorator","length","gArgv","process","argv","slice","CommandLineArgumentError","ApplicationError","constructor","message","nonOption","CommandLine","injectUsage","injects","parse","options","minimist","app","tryRequire","minimistOpts","boolean","forEach","bn","string","sn","option","arg","args","index","findIndex","usage","arguments","undefined","updateOption","value","each","a","valueOrFunctionCall_","functor","doFilter_","opt","argIndex","filter","InvalidConfiguration","argExist","inquire_","inquirer","doInquire_","item","prompt","then","answers","console","log","ans","assert","concat","prepareInquire_","argExists","inquire","type","q","promptMessage","desc","promptType","choicesProvider","choices","promptDefault","afterInquire","onArgumentExists","showArguments","isEmpty","eachAsync_","argOpt","validate_","checkRequire_","required","errors","argNum","i","msg","showUsageOnError","push","showUsage","afterBanner","map","join","exit","processSilentModeArguments_","hasOwnProperty","silentModeDefault","getBanner","banner","getUsage","bannerShown","fmtArgs","program","path","basename","afterCommandLine","line","reduce","sum","toString","Array","isArray","choice","afterOptions","showBannar","stage","Feature","INIT","load_","usageOptions","commandLine","silentMode","nonValidationMode"],"mappings":"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"}