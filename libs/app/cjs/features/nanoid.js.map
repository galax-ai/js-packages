{"version":3,"sources":["../../lib/features/nanoid.js"],"sourcesContent":["import { Feature } from '@galaxar/app';\nimport { charsets, InvalidArgument } from '@galaxar/types';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    load_: async function (app, options, name) {\n        const { length, charset } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    length: { type: 'number', default: 16 },\n                    charset: {\n                        type: 'text',\n                        enum: [\n                            'up_letter_num',\n                            'low_letter_num',\n                            'up_letter',\n                            'low_letter',\n                            'url_safe_all',\n                        ],\n                        default: 'url_safe_all',\n                    },\n                },\n            },\n            name\n        );\n\n        const { customAlphabet } = await app.tryRequire_('nanoid');\n        const { customAlphabet: customAlphabet_ } = await app.tryRequire_(\n            'nanoid/async'\n        );\n\n        const generators = new Map();\n\n        function getGenerator(_charset, _length, isAsync) {\n            _charset || (_charset = charset);\n            _length || (_length = length);\n\n            const key = `${_charset}:${_length}${isAsync ? '_' : ''}`;\n            let g = generators.get(key);\n            if (g != null) {\n                return g;\n            }\n\n            const charsetString = charsets[_charset];\n            if (charsetString == null) {\n                throw new InvalidArgument(\n                    'Charset not supported for \"nanoid\" feature',\n                    { chatset: _charset }\n                );\n            }\n\n            g = isAsync\n                ? customAlphabet_(charsetString, _length)\n                : customAlphabet(charsetString, _length);\n            generators.set(key, g);\n            return g;\n        }\n\n        const service = {\n            next(_charset, _length) {\n                return getGenerator(_charset, _length, false)();\n            },\n            async next_(_charset, _length) {\n                return getGenerator(_charset, _length, true)();\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","load_","app","options","name","length","charset","featureConfig","schema","type","default","enum","customAlphabet","tryRequire_","customAlphabet_","generators","Map","getGenerator","_charset","_length","isAsync","key","g","get","charsetString","charsets","InvalidArgument","chatset","set","service","next","next_","registerService"],"mappings":";;;;+BAGA;;;eAAA;;;qBAHwB;uBACkB;MAE1C,WAAe;IACXA,OAAOC,YAAO,CAACC,OAAO;IAEtBC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAE;QACvC,MAAM,EAAEC,OAAM,EAAEC,QAAO,EAAE,GAAGJ,IAAIK,aAAa,CACzCJ,SACA;YACIK,QAAQ;gBACJH,QAAQ;oBAAEI,MAAM;oBAAUC,SAAS;gBAAG;gBACtCJ,SAAS;oBACLG,MAAM;oBACNE,MAAM;wBACF;wBACA;wBACA;wBACA;wBACA;qBACH;oBACDD,SAAS;gBACb;YACJ;QACJ,GACAN;QAGJ,MAAM,EAAEQ,eAAc,EAAE,GAAG,MAAMV,IAAIW,WAAW,CAAC;QACjD,MAAM,EAAED,gBAAgBE,gBAAe,EAAE,GAAG,MAAMZ,IAAIW,WAAW,CAC7D;QAGJ,MAAME,aAAa,IAAIC;QAEvB,SAASC,aAAaC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAE;YAC9CF,YAAaA,CAAAA,WAAWZ,OAAM;YAC9Ba,WAAYA,CAAAA,UAAUd,MAAK;YAE3B,MAAMgB,MAAM,CAAC,EAAEH,SAAS,CAAC,EAAEC,QAAQ,EAAEC,UAAU,MAAM,EAAE,CAAC,CAAC;YACzD,IAAIE,IAAIP,WAAWQ,GAAG,CAACF;YACvB,IAAIC,KAAK,IAAI,EAAE;gBACX,OAAOA;YACX,CAAC;YAED,MAAME,gBAAgBC,eAAQ,CAACP,SAAS;YACxC,IAAIM,iBAAiB,IAAI,EAAE;gBACvB,MAAM,IAAIE,sBAAe,CACrB,8CACA;oBAAEC,SAAST;gBAAS,GACtB;YACN,CAAC;YAEDI,IAAIF,UACEN,gBAAgBU,eAAeL,WAC/BP,eAAeY,eAAeL,QAAQ;YAC5CJ,WAAWa,GAAG,CAACP,KAAKC;YACpB,OAAOA;QACX;QAEA,MAAMO,UAAU;YACZC,MAAKZ,QAAQ,EAAEC,OAAO,EAAE;gBACpB,OAAOF,aAAaC,UAAUC,SAAS,KAAK;YAChD;YACA,MAAMY,OAAMb,QAAQ,EAAEC,OAAO,EAAE;gBAC3B,OAAOF,aAAaC,UAAUC,SAAS,IAAI;YAC/C;QACJ;QAEAjB,IAAI8B,eAAe,CAAC5B,MAAMyB;IAC9B;AACJ"}