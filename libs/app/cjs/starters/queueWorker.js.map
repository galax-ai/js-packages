{"version":3,"sources":["../../lib/starters/queueWorker.js"],"sourcesContent":["import startWorker from './worker';\n\n/**\n * Start a message queue worker.\n * @param {Function} worker\n * @param {*} queueService\n * @param {*} queueName\n * @param {object} options\n */\nasync function startQueueWorker(worker, queueService, queueName, options) {\n    const workerOptions = { workerName: queueName + 'Worker', ...options, dontStop: true };\n\n    return startWorker(async (app) => {\n        let messageQueue = app.getService(queueService);\n\n        app.log('info', `A queue worker is started and waiting for message on queue \"${queueName}\" ...`);\n\n        await messageQueue.workerConsume_(queueName, (channel, msg) => {\n            let info = msg && msg.content;\n\n            try {\n                info = info && JSON.parse(info.toString());\n            } catch (error) {\n                app.log('error', 'The incoming message is not a valid JSON string.');\n                channel.ack(msg);\n                return;\n            }\n\n            if (info && info.$mock) {\n                app.log('info', 'A mock message is received.\\nMessage: ' + raw);\n                channel.ack(msg);\n                return;\n            }\n\n            worker(app, info)\n                .then((shouldAck) => {\n                    if (shouldAck) {\n                        channel.ack(msg);\n                    } else {\n                        channel.nack(msg);\n                    }\n                })\n                .catch((error) => {\n                    app.logError(error);\n\n                    if (error.needRetry) {\n                        channel.nack(msg);\n                    } else {\n                        channel.ack(msg);\n                    }\n                });\n        });\n    }, workerOptions);\n}\n\nexport default startQueueWorker;\n"],"names":["startQueueWorker","worker","queueService","queueName","options","workerOptions","workerName","dontStop","startWorker","app","messageQueue","getService","log","workerConsume_","channel","msg","info","content","JSON","parse","toString","error","ack","$mock","raw","then","shouldAck","nack","catch","logError","needRetry"],"mappings":"oGAuDA,iDAAA,2DAvDwB,iGASxB,eAAeA,iBAAiBC,MAAM,CAAEC,YAAY,CAAEC,SAAS,CAAEC,OAAO,CAAE,CACtE,MAAMC,cAAgB,CAAEC,WAAYH,UAAY,SAAU,GAAGC,OAAO,CAAEG,SAAU,IAAI,AAAC,EAErF,MAAOC,GAAAA,eAAW,EAAC,MAAOC,KAAQ,CAC9B,IAAIC,aAAeD,IAAIE,UAAU,CAACT,cAElCO,IAAIG,GAAG,CAAC,OAAQ,CAAC,4DAA4D,EAAET,UAAU,KAAK,CAAC,CAE/F,OAAMO,aAAaG,cAAc,CAACV,UAAW,CAACW,QAASC,MAAQ,CAC3D,IAAIC,KAAOD,KAAOA,IAAIE,OAAO,CAE7B,GAAI,CACAD,KAAOA,MAAQE,KAAKC,KAAK,CAACH,KAAKI,QAAQ,GAC3C,CAAE,MAAOC,MAAO,CACZZ,IAAIG,GAAG,CAAC,QAAS,oDACjBE,QAAQQ,GAAG,CAACP,KACZ,MACJ,CAEA,GAAIC,MAAQA,KAAKO,KAAK,CAAE,CACpBd,IAAIG,GAAG,CAAC,OAAQ,yCAA2CY,KAC3DV,QAAQQ,GAAG,CAACP,KACZ,MACJ,CAAC,AAEDd,OAAOQ,IAAKO,MACPS,IAAI,CAAC,AAACC,WAAc,CACjB,GAAIA,UAAW,CACXZ,QAAQQ,GAAG,CAACP,IAChB,KAAO,CACHD,QAAQa,IAAI,CAACZ,IACjB,CAAC,AACL,GACCa,KAAK,CAAC,AAACP,OAAU,CACdZ,IAAIoB,QAAQ,CAACR,OAEb,GAAIA,MAAMS,SAAS,CAAE,CACjBhB,QAAQa,IAAI,CAACZ,IACjB,KAAO,CACHD,QAAQQ,GAAG,CAACP,IAChB,CAAC,AACL,EACR,EACJ,EAAGV,cACP,OAEA,SAAeL"}