{"version":3,"sources":["../lib/EnvAwareConfigProviderF.js"],"sourcesContent":["import path from 'node:path';\nimport _ from 'lodash';\n\nfunction defaultOverrider(defConfig, envConfig) {\n    return { ...defConfig, ...envConfig };\n}\n\n/**\n * Environment-aware config provider factory\n * @param {string} EXT - File extension name, e.g. \".json\"\n * @param {class} PROVIDER - Config provider class\n * @param {string} [DEFAULT_FLAG=\"default\"] - Default flag\n */\nconst EnvAwareConfigProviderF = (EXT, PROVIDER, DEFAULT_FLAG = 'default') =>\n    class {\n        /**\n         * Environment-aware config provider\n         * @constructs EnvAwareConfigProvider\n         * @param {string} configDir - The base directory of config files\n         * @param {string} baseName - The basename of the config file\n         * @param {string} [envFlag=\"development\"] - Environment flag\n         */\n        constructor(configDir, baseName, envFlag = 'development', overrider) {\n            /**\n             * The raw default config\n             * @type {object}\n             * @private\n             */\n            this._defConfigProvider = new PROVIDER(\n                path.join(configDir, baseName + '.' + DEFAULT_FLAG + EXT)\n            );\n\n            /**\n             * The environment specific config\n             * @type {object}\n             * @public\n             */\n            this._envConfigProvider = new PROVIDER(\n                path.join(configDir, baseName + '.' + envFlag + EXT)\n            );\n\n            this._envFlag = envFlag;\n\n            this._overrider = overrider || defaultOverrider;\n\n            /**\n             * The loaded config\n             * @type {object}\n             * @public\n             */\n            this.config = undefined;\n        }\n\n        /**\n         * Start loading the config files\n         * @memberof EnvAwareConfigProvider\n         * @returns {Promise.<object>}\n         */\n        async load_(logger, noThrow) {\n            const defConfig = await this._defConfigProvider.load_(logger, noThrow);\n            const envConfig = await this._envConfigProvider.load_(logger, true);\n\n            this.config = this._overrider(defConfig, envConfig);\n            if (logger && !_.isEmpty(envConfig)) {\n                logger.log(\n                    'info',\n                    `Configuration is overrided by environment-specific [env=${this._envFlag}] settings.`\n                );\n            }\n\n            return this.config;\n        }\n\n        /**\n         * Start saving the config to files\n         * @memberof EnvAwareConfigProvider\n         * @returns {Promise.<*>}\n         */\n        async save_() {\n            await this._envConfigProvider.save_();\n        }\n\n        /**\n         * Update config item by dotted path.\n         * @memberof EnvAwareConfigProvider\n         * @param {string} key - The path of config item, e.g. \"item.subItem.key\" refers to { item: { subItem: { key: \"*\" } } }\n         * @param {*} value - New value of config item\n         * @returns {JsonConfigProvider}\n         */\n        setItem(key, value) {\n            _.set(this.config, key, value);\n            this._envConfigProvider.setItem(key, value);\n            return this;\n        }\n\n        /**\n         * Get config item by dotted path.\n         * @memberof EnvAwareConfigProvider\n         * @param {string} key\n         * @param {*} defaultValue\n         * @returns {*}\n         */\n        getItem(key, defaultValue) {\n            return _.get(this.config, key, defaultValue);\n        }\n    };\n\nexport default EnvAwareConfigProviderF;\n"],"names":["defaultOverrider","defConfig","envConfig","EnvAwareConfigProviderF","EXT","PROVIDER","DEFAULT_FLAG","load_","logger","noThrow","_defConfigProvider","_envConfigProvider","config","_overrider","_","isEmpty","log","_envFlag","save_","setItem","key","value","set","getItem","defaultValue","get","constructor","configDir","baseName","envFlag","overrider","path","join","undefined"],"mappings":"oGA2GA,iDAAA,6DA3GiB,6DACH,+FAEd,SAASA,iBAAiBC,SAAS,CAAEC,SAAS,CAAE,CAC5C,MAAO,CAAE,GAAGD,SAAS,CAAE,GAAGC,SAAS,AAAC,CACxC,CAQA,MAAMC,wBAA0B,CAACC,IAAKC,SAAUC,aAAe,SAAS,IACpE,aA4CI,MAAMC,MAAMC,MAAM,CAAEC,OAAO,CAAE,CACzB,MAAMR,UAAY,MAAM,IAAI,CAACS,kBAAkB,CAACH,KAAK,CAACC,OAAQC,SAC9D,MAAMP,UAAY,MAAM,IAAI,CAACS,kBAAkB,CAACJ,KAAK,CAACC,OAAQ,IAAI,CAElE,CAAA,IAAI,CAACI,MAAM,CAAG,IAAI,CAACC,UAAU,CAACZ,UAAWC,WACzC,GAAIM,QAAU,CAACM,eAAC,CAACC,OAAO,CAACb,WAAY,CACjCM,OAAOQ,GAAG,CACN,OACA,CAAC,wDAAwD,EAAE,IAAI,CAACC,QAAQ,CAAC,WAAW,CAAC,CAE7F,CAAC,AAED,OAAO,IAAI,CAACL,MAAM,AACtB,CAOA,MAAMM,OAAQ,CACV,MAAM,IAAI,CAACP,kBAAkB,CAACO,KAAK,EACvC,CASAC,QAAQC,GAAG,CAAEC,KAAK,CAAE,CAChBP,eAAC,CAACQ,GAAG,CAAC,IAAI,CAACV,MAAM,CAAEQ,IAAKC,OACxB,IAAI,CAACV,kBAAkB,CAACQ,OAAO,CAACC,IAAKC,OACrC,OAAO,IAAI,AACf,CASAE,QAAQH,GAAG,CAAEI,YAAY,CAAE,CACvB,OAAOV,eAAC,CAACW,GAAG,CAAC,IAAI,CAACb,MAAM,CAAEQ,IAAKI,aACnC,CAlFAE,YAAYC,SAAS,CAAEC,QAAQ,CAAEC,QAAU,aAAa,CAAEC,SAAS,CAAE,CAMjE,IAAI,CAACpB,kBAAkB,CAAG,IAAIL,SAC1B0B,iBAAI,CAACC,IAAI,CAACL,UAAWC,SAAW,IAAMtB,aAAeF,KAQzD,CAAA,IAAI,CAACO,kBAAkB,CAAG,IAAIN,SAC1B0B,iBAAI,CAACC,IAAI,CAACL,UAAWC,SAAW,IAAMC,QAAUzB,KAGpD,CAAA,IAAI,CAACa,QAAQ,CAAGY,OAEhB,CAAA,IAAI,CAAChB,UAAU,CAAGiB,WAAa9B,gBAO/B,CAAA,IAAI,CAACY,MAAM,CAAGqB,SAClB,CAsDJ,sBAEJ,SAAe9B"}