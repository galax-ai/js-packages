{"version":3,"sources":["../lib/ConfigLoader.js"],"sourcesContent":["import _ from 'lodash';\n\nimport JsonConfigProvider from './JsonConfigProvider.js';\nimport EnvAwareConfigProviderF from './EnvAwareConfigProviderF.js';\n\nimport defaultSyntax from './defaultSyntax';\n\nconst EnvAwareJsonConfigProvider = EnvAwareConfigProviderF('.json', JsonConfigProvider);\n\nclass ConfigLoader {\n    /**\n     * Create an environment aware JSON config loader\n     * @param {string} configDir\n     * @param {string} baseName\n     * @param {string} envFlag\n     * @param {Logger} logger\n     * @param {function} overrider\n     * @param {object} postProcessors\n     */\n    static createEnvAwareJsonLoader(configDir, baseName, envFlag, logger, overrider, postProcessors) {\n        return new ConfigLoader(\n            new EnvAwareJsonConfigProvider(configDir, baseName, envFlag, overrider),\n            logger,\n            postProcessors\n        );\n    }\n\n    /**\n     * The config loader\n     * @constructs ConfigLoader\n     * @extends EventEmitter\n     * @example\n     *   let fileSource = new JsonConfigProvider('path/to/config.json');\n     *   let config = new ConfigLoader(fileSource);\n     *   await config.load_()...;\n     *\n     *   let dbSource = new DbConfigProvider(config.data.dbConnection);\n     *   config.provider = dbSource;\n     *   await config.reload_()...;\n     *\n     *   // same as: let envAwareLoader = new ConfigLoader(\n     *   //    new (EnvAwareConfigProviderF('.json', JsonConfigProvider, 'default'))('config/dir', 'app', 'production')\n     *   // );\n     *   let envAwareLoader = ConfigLoader.createEnvAwareJsonLoader('config/dir', 'app', 'production');\n     *\n     *   // Loader will load config/dir/app.default.json first,\n     *   // and then load config/dir/app.production.json,\n     *   // and finally override the default.\n     *   let cfg = await envAwareLoader.load_();\n     */\n    constructor(configProvider, logger, postProcessors) {\n        /**\n         * The config data source provider\n         * @type {object}\n         * @public\n         **/\n        this.provider = configProvider;\n\n        /**\n         * The config data\n         * @type {object}\n         * @public\n         **/\n        this.data = undefined;\n\n        /**\n         * Whether to do string post process automatically after loading\n         * @type {boolean}\n         * @public\n         */\n        this.autoPostProcess = true;\n\n        /**\n         * Logger with log(level, message, meta) function.\n         * @type {Logger}\n         * @public\n         */\n        this.logger = logger;\n\n        /**\n         * Post processors\n         * @private\n         */\n        this.postProcessors = postProcessors != null ? _.defaultsDeep(postProcessors, defaultSyntax) : defaultSyntax;\n    }\n\n    /**\n     * Start loading the config files and override existing\n     * @param {object} variables - variables\n     * @returns {Promise.<object>}\n     */\n    async load_(variables) {\n        const oldData = this.data;\n\n        await this.reload_(variables);\n\n        if (oldData) {\n            this.data = _.defaults(this.data, oldData);\n        }\n\n        return this.data;\n    }\n\n    /**\n     * Reload config\n     * @returns {Promise.<object>}\n     */\n    async reload_(variables) {\n        this.data = await this.provider.load_(this.logger, true);\n        if (this.autoPostProcess) this.postProcess(variables);\n\n        return this.data;\n    }\n\n    /**\n     * PostProcess the loaded config\n     * @param {object} variables - variables\n     */\n    postProcess(variables) {\n        const queue = [this.data];\n\n        this._l = this.postProcessors.prefix.length;\n\n        variables = { ...variables, $this: this.data };\n\n        const interpolateElement = (coll, key, val) => {\n            if (typeof val === 'string') {\n                coll[key] = this._tryProcessStringValue(val, variables);\n            } else if (_.isPlainObject(val) || _.isArray(val)) {\n                queue.push(val);\n            }\n        };\n\n        let offset = 0;\n\n        while (queue.length > offset) {\n            const node = queue[offset];\n\n            if (_.isPlainObject(node)) {\n                _.forOwn(node, (value, key) => {\n                    interpolateElement(node, key, value);\n                });\n            } else {\n                const l = node.length;\n                for (let i = 0; i < l; i++) {\n                    interpolateElement(node, i, node[i]);\n                }\n            }\n\n            offset++;\n        }\n    }\n\n    _tryProcessStringValue(strVal, variables) {\n        if (strVal.startsWith(this.postProcessors.prefix)) {\n            const colonPos = strVal.indexOf(':');\n            if (colonPos > this._l) {\n                const token = strVal.substring(this._l, colonPos);\n                const operator = this.postProcessors.processors[token];\n                if (operator) {\n                    return operator(strVal.substr(colonPos + 1), variables);\n                }\n\n                throw new Error('Unsupported post processor: ' + token);\n            }\n\n            throw new Error('Invalid post processor syntax: ' + strVal);\n        }\n\n        return strVal;\n    }\n}\n\nexport default ConfigLoader;\n"],"names":["EnvAwareJsonConfigProvider","EnvAwareConfigProviderF","JsonConfigProvider","ConfigLoader","createEnvAwareJsonLoader","configDir","baseName","envFlag","logger","overrider","postProcessors","load_","variables","oldData","data","reload_","_","defaults","provider","autoPostProcess","postProcess","queue","_l","prefix","length","$this","interpolateElement","coll","key","val","_tryProcessStringValue","isPlainObject","isArray","push","offset","node","forOwn","value","l","i","strVal","startsWith","colonPos","indexOf","token","substring","operator","processors","substr","Error","constructor","configProvider","undefined","defaultsDeep","defaultSyntax"],"mappings":"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"}