{"version":3,"sources":["../lib/ConfigLoader.js"],"sourcesContent":["import _ from 'lodash';\n\nimport JsonConfigProvider from './JsonConfigProvider.js';\nimport EnvAwareConfigProviderF from './EnvAwareConfigProviderF.js';\n\nimport defaultSyntax from './defaultSyntax';\n\nconst EnvAwareJsonConfigProvider = EnvAwareConfigProviderF(\n    '.json',\n    JsonConfigProvider\n);\n\nclass ConfigLoader {\n    /**\n     * Create an environment aware JSON config loader\n     * @param {string} configDir\n     * @param {string} baseName\n     * @param {string} envFlag\n     * @param {Logger} logger\n     * @param {function} overrider\n     * @param {object} postProcessors\n     */\n    static createEnvAwareJsonLoader(\n        configDir,\n        baseName,\n        envFlag,        \n        logger,\n        overrider,\n        postProcessors,        \n    ) {\n        return new ConfigLoader(\n            new EnvAwareJsonConfigProvider(configDir, baseName, envFlag, overrider),\n            logger,\n            postProcessors\n        );\n    }\n\n    /**\n     * The config loader\n     * @constructs ConfigLoader\n     * @extends EventEmitter\n     * @example\n     *   let fileSource = new JsonConfigProvider('path/to/config.json');\n     *   let config = new ConfigLoader(fileSource);\n     *   await config.load_()...;\n     *\n     *   let dbSource = new DbConfigProvider(config.data.dbConnection);\n     *   config.provider = dbSource;\n     *   await config.reload_()...;\n     *\n     *   // same as: let envAwareLoader = new ConfigLoader(\n     *   //    new (EnvAwareConfigProviderF('.json', JsonConfigProvider, 'default'))('config/dir', 'app', 'production')\n     *   // );\n     *   let envAwareLoader = ConfigLoader.createEnvAwareJsonLoader('config/dir', 'app', 'production');\n     *\n     *   // Loader will load config/dir/app.default.json first,\n     *   // and then load config/dir/app.production.json,\n     *   // and finally override the default.\n     *   let cfg = await envAwareLoader.load_();\n     */\n    constructor(configProvider, logger, postProcessors) {\n        /**\n         * The config data source provider\n         * @type {object}\n         * @public\n         **/\n        this.provider = configProvider;\n\n        /**\n         * The config data\n         * @type {object}\n         * @public\n         **/\n        this.data = undefined;\n\n        /**\n         * Whether to do string post process automatically after loading\n         * @type {boolean}\n         * @public\n         */\n        this.autoPostProcess = true;\n\n        /**\n         * Logger with log(level, message, meta) function.\n         * @type {Logger}\n         * @public\n         */\n        this.logger = logger;\n\n        /**\n         * Post processors\n         * @private\n         */\n        this.postProcessors =\n            postProcessors != null\n                ? _.defaultsDeep(postProcessors, defaultSyntax)\n                : defaultSyntax;\n    }\n\n    /**\n     * Start loading the config files and override existing\n     * @param {object} variables - variables\n     * @returns {Promise.<object>}\n     */\n    async load_(variables) {\n        const oldData = this.data;\n\n        await this.reload_(variables);\n\n        if (oldData) {\n            this.data = _.defaults(this.data, oldData);\n        }\n\n        return this.data;\n    }\n\n    /**\n     * Reload config\n     * @returns {Promise.<object>}\n     */\n    async reload_(variables) {\n        this.data = await this.provider.load_(this.logger, true);\n        if (this.autoPostProcess) this.postProcess(variables);\n\n        return this.data;\n    }\n\n    /**\n     * PostProcess the loaded config\n     * @param {object} variables - variables\n     */\n    postProcess(variables) {\n        const queue = [this.data];\n\n        this._l = this.postProcessors.prefix.length;\n\n        variables = { ...variables, $this: this.data };\n\n        const interpolateElement = (coll, key, val) => {\n            if (typeof val === 'string') {\n                coll[key] = this._tryProcessStringValue(val, variables);\n            } else if (_.isPlainObject(val) || _.isArray(val)) {\n                queue.push(val);\n            }\n        };\n\n        let offset = 0;\n\n        while (queue.length > offset) {\n            const node = queue[offset];\n\n            if (_.isPlainObject(node)) {\n                _.forOwn(node, (value, key) => {\n                    interpolateElement(node, key, value);\n                });\n            } else {\n                const l = node.length;\n                for (let i = 0; i < l; i++) {\n                    interpolateElement(node, i, node[i]);\n                }\n            }\n\n            offset++;\n        }\n    }\n\n    _tryProcessStringValue(strVal, variables) {\n        if (strVal.startsWith(this.postProcessors.prefix)) {\n            const colonPos = strVal.indexOf(':');\n            if (colonPos > this._l) {\n                const token = strVal.substring(this._l, colonPos);\n                const operator = this.postProcessors.processors[token];\n                if (operator) {\n                    return operator(strVal.substr(colonPos + 1), variables);\n                }\n\n                throw new Error('Unsupported post processor: ' + token);\n            }\n\n            throw new Error('Invalid post processor syntax: ' + strVal);\n        }\n\n        return strVal;\n    }\n}\n\nexport default ConfigLoader;\n"],"names":["EnvAwareJsonConfigProvider","EnvAwareConfigProviderF","JsonConfigProvider","ConfigLoader","createEnvAwareJsonLoader","configDir","baseName","envFlag","logger","overrider","postProcessors","load_","variables","oldData","data","reload_","_","defaults","provider","autoPostProcess","postProcess","queue","_l","prefix","length","$this","interpolateElement","coll","key","val","_tryProcessStringValue","isPlainObject","isArray","push","offset","node","forOwn","value","l","i","strVal","startsWith","colonPos","indexOf","token","substring","operator","processors","substr","Error","constructor","configProvider","undefined","defaultsDeep","defaultSyntax"],"mappings":"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"}