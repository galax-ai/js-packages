{"version":3,"sources":["../src/main.js"],"sourcesContent":["import { startCommand } from \"@galaxar/app\";\nimport { _ } from \"@galaxar/utils\";\nimport { appModeList } from \"./modes\";\nimport chalk from \"chalk\";\n\nimport runner from \"./runner\";\nimport appNameToFileName from \"./utils/appNameToFileName\";\n\nimport pkg from \"../package.json\";\n\nfunction main() {\n    return startCommand(runner, {\n        loggerLevel: \"verbose\",\n        commandName: \"gx-init\",\n        config: {\n            version: pkg.version,\n            commandLine: {\n                banner: () => chalk.white.bgBlue.bold(` Galaxar application initiator command line v${pkg.version} `),\n                program: \"npm init @genx/app\",\n                arguments: [\n                    {\n                        name: \"app-directory\",\n                        required: false,\n                        inquire: true,\n                        promptMessage: \"Please enter the application directory (usually the app name):\",\n                    },\n                ],\n                options: {\n                    s: {\n                        desc: \"Silent mode\",\n                        alias: [\"silent\"],\n                        bool: true,\n                        default: false,\n                    },\n                    v: {\n                        desc: \"Show version information\",\n                        alias: [\"version\"],\n                        bool: true,\n                        default: false,\n                    },\n                    l: {\n                        desc: \"Show a list of built-in app modes\",\n                        alias: [\"list-modes\"],\n                        bool: true,\n                        default: false,\n                    },\n                    h: {\n                        desc: \"Show usage message\",\n                        alias: [\"help\"],\n                        bool: true,\n                        default: false,\n                    },\n                    m: {\n                        desc: \"Target application mode\",\n                        alias: [\"mode\"],\n                        silentModeDefault: \"custom\",\n                        inquire: true,\n                        required: true,\n                        promptType: \"list\",\n                        promptMessage: \"Please choose the target application mode:\",\n                        choicesProvider: appModeList,\n                    },\n                    t: {\n                        desc: \"Custom template url\",\n                        alias: [\"template\", \"template-url\"],\n                        inquire: (cli) => {\n                            return cli.argv[\"mode\"] === \"custom\";\n                        },\n                        required: (cli) => {\n                            return cli.argv[\"mode\"] === \"custom\";\n                        },                        \n                        promptMessage: \"Please input the custom tempalte url:\"\n                    },\n                    n: {\n                        desc: \"Application name\",\n                        alias: [\"name\", \"app-name\"],\n                        inquire: true,\n                        required: true,\n                        promptMessage: \"Please input the application name:\",\n                        promptDefault: (cli) => cli.argv._[0],\n                        silentModeDefault: (cli) => cli.argv._[0],\n                    },\n                    c: {\n                        desc: \"Config path\",\n                        alias: [\"conf\", \"config\"],\n                    },\n                    \"skip-install\": {\n                        desc: \"Skip dependencies installation\",\n                        alias: [\"skip-npm-install\"],\n                        bool: true,\n                        inquire: true,\n                        required: true,\n                        promptDefault: false,\n                        silentModeDefault: false,\n                    },\n                    manager: {\n                        desc: \"Specify the package manager (e.g. npm)\",\n                        alias: [\"package-manager\"],\n                        silentModeDefault: \"pnpm\",\n                        inquire: true,\n                        required: true,\n                        promptType: \"list\",\n                        promptMessage: \"Please choose the package manager for the app:\",\n                        promptDefault: \"pnpm\",\n                        choicesProvider: [\"npm\", \"pnpm\", \"yarn\"].map(name => ({ name, value: name })),\n                    },\n                    reg: {\n                        desc: \"Specify the package registry (e.g. npmjs)\",\n                        alias: [\"registry\"],\n                        default: \"npmjs\",\n                    },\n                    lts: {\n                        desc: \"Use long-term-support dependencies\",\n                        alias: [\"stable\"],\n                        bool: true,\n                        inquire: true,\n                        promptDefault: false,\n                        silentModeDefault: false,\n                    },\n                    bin: {\n                        desc: \"Add executable bin\",\n                        alias: [\"with-bin\"],\n                        bool: true,\n                        inquire: (cli) => {\n                            return cli.argv[\"mode\"] === \"cli\";\n                        },\n                        promptDefault: false\n                    },\n                    'bin-name': {\n                        desc: \"Enter the executable bin name\",\n                        alias: [\"executable-bin-name\"],\n                        inquire: (cli) => {\n                            return cli.argv[\"bin\"];\n                        },\n                        promptDefault: (cli) => appNameToFileName(cli.argv[\"name\"])\n                    },\n                    public: {\n                        desc: \"Create as public package\",\n                        bool: true,\n                        inquire: true,\n                        promptDefault: false,\n                        silentModeDefault: false,\n                    },\n                },\n                silentMode: (cli) => cli.argv[\"s\"] || cli.argv[\"v\"] || cli.argv[\"h\"] || cli.argv[\"l\"],\n                nonValidationMode: (cli) => cli.argv[\"v\"] || cli.argv[\"h\"] || cli.argv[\"l\"],\n                showUsageOnError: true,\n                showArguments: false,\n            },\n        },\n    });\n}\n\nexport default main;"],"names":["main","startCommand","runner","loggerLevel","commandName","config","version","pkg","commandLine","banner","chalk","white","bgBlue","bold","program","arguments","name","required","inquire","promptMessage","options","s","desc","alias","bool","default","v","l","h","m","silentModeDefault","promptType","choicesProvider","appModeList","t","cli","argv","n","promptDefault","_","c","manager","map","value","reg","lts","bin","appNameToFileName","public","silentMode","nonValidationMode","showUsageOnError","showArguments"],"mappings":"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"}