{"version":3,"sources":["../../src/steps/copyFilesFromTemplate_.js"],"sourcesContent":["const path = require(\"path\");\nconst { fs, glob } = require(\"@genx/sys\");\nconst { _, eachAsync_, replaceAll } = require(\"@genx/july\");\n\nconst copyFileFromTemplate_ = require(\"../utils/createFileFromTemplate_\");\nconst appNameToFileName = require('../utils/appNameToFileName');\n\nmodule.exports = async (app, templatePath, targetPath, options, skipOverriding) => {\n    const files = await glob(\"**/*.*\", { cwd: templatePath, dot: true });\n    await eachAsync_(files, async (relativePath) => {\n        let sourceFile = path.join(templatePath, relativePath);\n        let destFile = path.join(targetPath, relativePath);\n\n        const ls = await fs.lstat(sourceFile);\n        if (ls.isDirectory()) {\n            await fs.ensureDir(destFile);\n            return;\n        }\n\n        if (relativePath.endsWith(\".tpl\")) {            \n            relativePath = relativePath.slice(0, -4);\n\n            const regex = /\\[([^\\]]+)\\]\\.\\w+$/;\n            const match = relativePath.match(regex);\n\n            if (match) {\n                const vars = {\n                    appName: appNameToFileName(options.appName)\n                };\n\n                relativePath = _.template(relativePath, {\n                    interpolate: /\\[([\\s\\S]+?)\\]/g\n                })(vars);                \n            }\n            \n            destFile = path.join(targetPath, relativePath);\n\n            if (skipOverriding && fs.existsSync(destFile)) {\n                app.log('info', `Skipped existing ${relativePath}`);       \n                return;\n            }\n\n            await fs.ensureFile(destFile);\n            await copyFileFromTemplate_(sourceFile, destFile, options);     \n            app.log('info', `Created ${relativePath}`);       \n            return;\n        }\n\n        if (skipOverriding && fs.existsSync(destFile)) {\n            app.log('info', `Skipped existing ${relativePath}`);       \n            return;\n        }\n\n        await fs.ensureFile(destFile);\n        await fs.copyFile(sourceFile, destFile);\n        app.log('info', `Copied ${relativePath}`);       \n    });\n};\n"],"names":["path","require","fs","glob","_","eachAsync_","replaceAll","copyFileFromTemplate_","appNameToFileName","module","exports","app","templatePath","targetPath","options","skipOverriding","files","cwd","dot","relativePath","sourceFile","join","destFile","ls","lstat","isDirectory","ensureDir","endsWith","slice","regex","match","vars","appName","template","interpolate","existsSync","log","ensureFile","copyFile"],"mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,GAAE,EAAEC,KAAI,EAAE,GAAGF,QAAQ;AAC7B,MAAM,EAAEG,EAAC,EAAEC,WAAU,EAAEC,WAAU,EAAE,GAAGL,QAAQ;AAE9C,MAAMM,wBAAwBN,QAAQ;AACtC,MAAMO,oBAAoBP,QAAQ;AAElCQ,OAAOC,OAAO,GAAG,OAAOC,KAAKC,cAAcC,YAAYC,SAASC,iBAAmB;IAC/E,MAAMC,QAAQ,MAAMb,KAAK,UAAU;QAAEc,KAAKL;QAAcM,KAAK,IAAI;IAAC;IAClE,MAAMb,WAAWW,OAAO,OAAOG,eAAiB;QAC5C,IAAIC,aAAapB,KAAKqB,IAAI,CAACT,cAAcO;QACzC,IAAIG,WAAWtB,KAAKqB,IAAI,CAACR,YAAYM;QAErC,MAAMI,KAAK,MAAMrB,GAAGsB,KAAK,CAACJ;QAC1B,IAAIG,GAAGE,WAAW,IAAI;YAClB,MAAMvB,GAAGwB,SAAS,CAACJ;YACnB;QACJ,CAAC;QAED,IAAIH,aAAaQ,QAAQ,CAAC,SAAS;YAC/BR,eAAeA,aAAaS,KAAK,CAAC,GAAG,CAAC;YAEtC,MAAMC,QAAQ;YACd,MAAMC,QAAQX,aAAaW,KAAK,CAACD;YAEjC,IAAIC,OAAO;gBACP,MAAMC,OAAO;oBACTC,SAASxB,kBAAkBM,QAAQkB,OAAO;gBAC9C;gBAEAb,eAAef,EAAE6B,QAAQ,CAACd,cAAc;oBACpCe,aAAa;gBACjB,GAAGH;YACP,CAAC;YAEDT,WAAWtB,KAAKqB,IAAI,CAACR,YAAYM;YAEjC,IAAIJ,kBAAkBb,GAAGiC,UAAU,CAACb,WAAW;gBAC3CX,IAAIyB,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAEjB,aAAa,CAAC;gBAClD;YACJ,CAAC;YAED,MAAMjB,GAAGmC,UAAU,CAACf;YACpB,MAAMf,sBAAsBa,YAAYE,UAAUR;YAClDH,IAAIyB,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAEjB,aAAa,CAAC;YACzC;QACJ,CAAC;QAED,IAAIJ,kBAAkBb,GAAGiC,UAAU,CAACb,WAAW;YAC3CX,IAAIyB,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAEjB,aAAa,CAAC;YAClD;QACJ,CAAC;QAED,MAAMjB,GAAGmC,UAAU,CAACf;QACpB,MAAMpB,GAAGoC,QAAQ,CAAClB,YAAYE;QAC9BX,IAAIyB,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAEjB,aAAa,CAAC;IAC5C;AACJ"}