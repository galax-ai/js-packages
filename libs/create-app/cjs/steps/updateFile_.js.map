{"version":3,"sources":["../../src/steps/updateFile_.js"],"sourcesContent":["const path = require(\"path\");\nconst { fs } = require(\"@genx/sys\");\nconst { unquote, quote, _ } = require(\"@genx/july\");\n\nconst fileTypeMapper = {\n    \".npmrc\": \"export\",\n};\n\nfunction parseExports(content) {\n    const lines = content.split(\"\\n\");\n    return lines.reduce((vars, line) => {\n        if (line === \"\") return vars;\n\n        let [key, value] = line.split(\"=\");\n        value = value.trim();\n\n        vars[key.trim()] = unquote(value, true, ['\"', \"'\"]);\n\n        return vars;\n    }, {});\n}\n\nfunction formatExports(vars) {\n    const lines = [];\n\n    _.each(vars, (v, k) => {\n        lines.push(`${k} = ${typeof v === \"string\" ? quote(v) : v}`);\n    });\n\n    return lines.join(\"\\n\") + \"\\n\";\n}\n\nmodule.exports = async (app, targetPath, relativePath, updater) => {\n    const filePath = path.resolve(targetPath, relativePath);\n    const baseName = path.basename(relativePath);\n\n    const fileExists = await fs.exists(filePath);\n    const content = fileExists ? await fs.readFile(filePath, \"utf8\") : \"\";\n\n    const fileType = fileTypeMapper[baseName];\n\n    let updated;\n    let noContent = false;\n\n    switch (fileType) {\n        case \"export\":\n            updated = await updater(parseExports(content));\n            noContent = _.isEmpty(updated);\n            updated = formatExports(updated);\n            break;\n\n        case \"json\":\n            updated = await updater(JSON.parse(content));\n            noContent = _.isEmpty(updated);\n            updated = JSON.stringify(updated);\n            break;\n    }\n\n    if (!fileExists && noContent) {\n        return;\n    }\n\n    await fs.writeFile(filePath, updated, \"utf8\");\n    app.log(\"info\", `Updated file ${relativePath}`);\n};\n"],"names":["path","require","fs","unquote","quote","_","fileTypeMapper","parseExports","content","lines","split","reduce","vars","line","key","value","trim","formatExports","each","v","k","push","join","module","exports","app","targetPath","relativePath","updater","filePath","resolve","baseName","basename","fileExists","exists","readFile","fileType","updated","noContent","isEmpty","JSON","parse","stringify","writeFile","log"],"mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,GAAE,EAAE,GAAGD,QAAQ;AACvB,MAAM,EAAEE,QAAO,EAAEC,MAAK,EAAEC,EAAC,EAAE,GAAGJ,QAAQ;AAEtC,MAAMK,iBAAiB;IACnB,UAAU;AACd;AAEA,SAASC,aAAaC,OAAO,EAAE;IAC3B,MAAMC,QAAQD,QAAQE,KAAK,CAAC;IAC5B,OAAOD,MAAME,MAAM,CAAC,CAACC,MAAMC,OAAS;QAChC,IAAIA,SAAS,IAAI,OAAOD;QAExB,IAAI,CAACE,KAAKC,MAAM,GAAGF,KAAKH,KAAK,CAAC;QAC9BK,QAAQA,MAAMC,IAAI;QAElBJ,IAAI,CAACE,IAAIE,IAAI,GAAG,GAAGb,QAAQY,OAAO,IAAI,EAAE;YAAC;YAAK;SAAI;QAElD,OAAOH;IACX,GAAG,CAAC;AACR;AAEA,SAASK,cAAcL,IAAI,EAAE;IACzB,MAAMH,QAAQ,EAAE;IAEhBJ,EAAEa,IAAI,CAACN,MAAM,CAACO,GAAGC,IAAM;QACnBX,MAAMY,IAAI,CAAC,CAAC,EAAED,EAAE,GAAG,EAAE,OAAOD,MAAM,WAAWf,MAAMe,KAAKA,CAAC,CAAC,CAAC;IAC/D;IAEA,OAAOV,MAAMa,IAAI,CAAC,QAAQ;AAC9B;AAEAC,OAAOC,OAAO,GAAG,OAAOC,KAAKC,YAAYC,cAAcC,UAAY;IAC/D,MAAMC,WAAW7B,KAAK8B,OAAO,CAACJ,YAAYC;IAC1C,MAAMI,WAAW/B,KAAKgC,QAAQ,CAACL;IAE/B,MAAMM,aAAa,MAAM/B,GAAGgC,MAAM,CAACL;IACnC,MAAMrB,UAAUyB,aAAa,MAAM/B,GAAGiC,QAAQ,CAACN,UAAU,UAAU,EAAE;IAErE,MAAMO,WAAW9B,cAAc,CAACyB,SAAS;IAEzC,IAAIM;IACJ,IAAIC,YAAY,KAAK;IAErB,OAAQF;QACJ,KAAK;YACDC,UAAU,MAAMT,QAAQrB,aAAaC;YACrC8B,YAAYjC,EAAEkC,OAAO,CAACF;YACtBA,UAAUpB,cAAcoB;YACxB,KAAM;QAEV,KAAK;YACDA,UAAU,MAAMT,QAAQY,KAAKC,KAAK,CAACjC;YACnC8B,YAAYjC,EAAEkC,OAAO,CAACF;YACtBA,UAAUG,KAAKE,SAAS,CAACL;YACzB,KAAM;IACd;IAEA,IAAI,CAACJ,cAAcK,WAAW;QAC1B;IACJ,CAAC;IAED,MAAMpC,GAAGyC,SAAS,CAACd,UAAUQ,SAAS;IACtCZ,IAAImB,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAEjB,aAAa,CAAC;AAClD"}