{"version":3,"sources":["../src/init_.js"],"sourcesContent":["import path from 'node:path';\nimport { fs } from '@galaxar/sys';\nimport { modesDetail } from \"./modes\";\nimport { getTempPath, download_, untar_ } from \"./utils\";\nimport * as steps from \"./steps\";\n\nasync function downloadTemplate_(app, options) {\n    let templateUrl;\n\n    if (options.appMode === 'custom') {\n        templateUrl = cmd.option(\"template\");          \n    } else {\n        templateUrl = modesDetail[options.appMode].url;\n    }\n\n    const tempDir = getTempPath('template', options.appMode);\n    await fs.emptyDir(tempDir);\n\n    const tarFile = path.join(tempDir, 'template.tgz');\n    await download_(app, templateUrl, tarFile);    \n\n    app.log('verbose', `Saved to ${tarFile}`);\n\n    return { \n        tempDir,\n        tarFile\n    };\n}\n\n async function init_(app, options) {\n    const { tempDir, tarFile } = await downloadTemplate_(app, options);\n\n    const tempPath = path.join(tempDir, 'extracted');\n    await fs.emptyDir(tempPath);\n    await untar_(tarFile, tempPath);\n\n    const initFile = path.join(tempPath, '.galaxar.init.js');\n    const templateMetadata = require(initFile);\n    const targetPath = steps.ensureTargetPath(options);\n\n    if (templateMetadata.newProject) {\n        steps.ensureSafeToCreateProject(app, targetPath, [\"package.json\"]);        \n    }\n\n    await steps.copyFiles_(app, tempPath, targetPath, !templateMetadata.newProject && templateMetadata.noOverriding);\n\n    if (templateMetadata.newProject) {\n        // For new project, update the name in package.json\n        await steps.updatePackageJson_(app, targetPath, templateMetadata, options, [\n            (packageConfig, $_, options) => {\n                packageConfig.name = options.appName;\n            }\n        ]);\n    }\n\n    // update npmrc, remove unused files\n    await steps.common_(app, targetPath, templateMetadata, options);\n\n    await steps.npmInstall_(app, targetPath, options);\n};\n\nexport default init_;"],"names":["downloadTemplate_","app","options","templateUrl","appMode","cmd","option","modesDetail","url","tempDir","getTempPath","fs","emptyDir","tarFile","path","join","download_","log","init_","tempPath","untar_","initFile","templateMetadata","require","targetPath","steps","ensureTargetPath","newProject","ensureSafeToCreateProject","copyFiles_","noOverriding","updatePackageJson_","packageConfig","$_","name","appName","common_","npmInstall_"],"mappings":";;;;+BA6DA;;;eAAA;;;iEA7DiB;qBACE;uBACS;uBACmB;+DACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEvB,eAAeA,kBAAkBC,GAAG,EAAEC,OAAO,EAAE;IAC3C,IAAIC;IAEJ,IAAID,QAAQE,OAAO,KAAK,UAAU;QAC9BD,cAAcE,IAAIC,MAAM,CAAC;IAC7B,OAAO;QACHH,cAAcI,kBAAW,CAACL,QAAQE,OAAO,CAAC,CAACI,GAAG;IAClD,CAAC;IAED,MAAMC,UAAUC,IAAAA,kBAAW,EAAC,YAAYR,QAAQE,OAAO;IACvD,MAAMO,OAAE,CAACC,QAAQ,CAACH;IAElB,MAAMI,UAAUC,iBAAI,CAACC,IAAI,CAACN,SAAS;IACnC,MAAMO,IAAAA,gBAAS,EAACf,KAAKE,aAAaU;IAElCZ,IAAIgB,GAAG,CAAC,WAAW,CAAC,SAAS,EAAEJ,QAAQ,CAAC;IAExC,OAAO;QACHJ;QACAI;IACJ;AACJ;AAEC,eAAeK,MAAMjB,GAAG,EAAEC,OAAO,EAAE;IAChC,MAAM,EAAEO,QAAO,EAAEI,QAAO,EAAE,GAAG,MAAMb,kBAAkBC,KAAKC;IAE1D,MAAMiB,WAAWL,iBAAI,CAACC,IAAI,CAACN,SAAS;IACpC,MAAME,OAAE,CAACC,QAAQ,CAACO;IAClB,MAAMC,IAAAA,aAAM,EAACP,SAASM;IAEtB,MAAME,WAAWP,iBAAI,CAACC,IAAI,CAACI,UAAU;IACrC,MAAMG,mBAAmBC,QAAQF;IACjC,MAAMG,aAAaC,OAAMC,gBAAgB,CAACxB;IAE1C,IAAIoB,iBAAiBK,UAAU,EAAE;QAC7BF,OAAMG,yBAAyB,CAAC3B,KAAKuB,YAAY;YAAC;SAAe;IACrE,CAAC;IAED,MAAMC,OAAMI,UAAU,CAAC5B,KAAKkB,UAAUK,YAAY,CAACF,iBAAiBK,UAAU,IAAIL,iBAAiBQ,YAAY;IAE/G,IAAIR,iBAAiBK,UAAU,EAAE;QAC7B,mDAAmD;QACnD,MAAMF,OAAMM,kBAAkB,CAAC9B,KAAKuB,YAAYF,kBAAkBpB,SAAS;YACvE,CAAC8B,eAAeC,IAAI/B,UAAY;gBAC5B8B,cAAcE,IAAI,GAAGhC,QAAQiC,OAAO;YACxC;SACH;IACL,CAAC;IAED,oCAAoC;IACpC,MAAMV,OAAMW,OAAO,CAACnC,KAAKuB,YAAYF,kBAAkBpB;IAEvD,MAAMuB,OAAMY,WAAW,CAACpC,KAAKuB,YAAYtB;AAC7C;;MAEA,WAAegB"}