{"version":3,"sources":["../src/runner.js"],"sourcesContent":["import { fs } from \"@galaxar/sys\";\n\nimport { appModes, appModeList, modesDetail } from \"./modes\";\nimport exitWithError from \"./utils/exitWithError\";\nimport tryDo_ from \"./utils/tryDo_\";\n\nimport getTempPath from \"./utils/getTempPath\";\nimport download_ from \"./utils/download_\";\n\nfunction overrideOptions(options, cmd, validatedArgs) {\n    Object.assign(options, validatedArgs);\n    \n    if (cmd.option(\"skip-install\")) {\n        options.skipNpmInstall = true;\n    }\n\n    if (cmd.option(\"lts\")) {\n        options.useStable = true;\n    }\n\n    if (cmd.option(\"public\")) {\n        options.publicMode = true;\n    }\n\n    options.packageManager = cmd.option(\"package-manager\");\n    options.registry = cmd.option(\"registry\");\n\n    options.workingPath = process.cwd();      \n}\n\nasync function getInitiator_(app, appMode) {\n    let templateUrl;\n\n    if (appMode === 'custom') {\n        templateUrl = cmd.option(\"template\");          \n    } else {\n        templateUrl = modesDetail[appMode].url;\n    }\n\n    const templateDir = getTempPath('template');\n    await fs.emptyDir(templateDir);\n    await download_(app, templateUrl, templateDir); \n\n    return require(path.join(templateDir, 'galaxar-init.js'));\n}\n\nfunction validateArguments(app, cmd) {\n    const appDir = cmd.argv._[0];\n    const appName = cmd.option(\"name\");\n    const appMode = cmd.option(\"mode\");\n    \n    if (appDir.indexOf(\"/\") !== -1 || appDir.indexOf(\"\\\\\") !== -1) {\n        exitWithError(app, \"App directory should not contain path separator.\");\n    }\n\n    if (appName.indexOf(\" \") !== -1) {\n        exitWithError(app, \"App name should not contain any space character.\");\n    }\n\n    if (appName.split(\"/\").length > 2) {\n        exitWithError(app, 'App name should not contain more than one \"/\" character.');\n    }\n\n    if (!appModes.includes(appMode)) {\n        exitWithError(app, `Unsupported app mode: ${appMode}`);\n    }\n\n    return {\n        appDir,\n        appName,\n        appMode,\n    };\n}\n\nconst run_ = async (app) => {\n    const cmd = app.commandLine;\n\n    if (cmd.option(\"help\")) {\n        cmd.showUsage();\n        return;\n    }\n\n    if (cmd.option(\"version\")) {\n        console.log(app.version);\n        return;\n    }\n\n    if (cmd.option(\"list-modes\")) {\n        cmd.showBannar();\n        \n        console.log(`All available app modes:\\n\\n  - ${appModeList.map(item => item.name).join('\\n  - ')}\\n`);        \n        return;\n    }\n\n    const validatedArgs = validateArguments(app, cmd);    \n\n    let options;\n\n    const configFile = cmd.option(\"config\");\n    if (configFile && fs.existsSync(configFile)) {\n        options = fs.readJsonSync(configFile);\n    } else {\n        options = {};\n    }\n\n    //override options with command line arguments\n    overrideOptions(options, cmd, validatedArgs);    \n\n    //load initiator by url or app mode\n    const init_ = await getInitiator_(app, validatedArgs.appMode);\n\n    //ensure project folder exists\n    return tryDo_(app, () => {\n        return init_(app, options);\n    });\n};\n\nexport default run_;"],"names":["overrideOptions","options","cmd","validatedArgs","Object","assign","option","skipNpmInstall","useStable","publicMode","packageManager","registry","workingPath","process","cwd","getInitiator_","app","appMode","templateUrl","modesDetail","url","templateDir","getTempPath","fs","emptyDir","download_","require","path","join","validateArguments","appDir","argv","_","appName","indexOf","exitWithError","split","length","appModes","includes","run_","commandLine","showUsage","console","log","version","showBannar","appModeList","map","item","name","configFile","existsSync","readJsonSync","init_","tryDo_"],"mappings":"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"}