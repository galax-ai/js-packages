{"version":3,"sources":["../src/runner.js"],"sourcesContent":["import { fs } from \"@galaxar/sys\";\n\nimport { appModes, appModeList } from \"./modes\";\nimport exitWithError from \"./utils/exitWithError\";\nimport init_ from \"./init_\";\n\nfunction overrideOptions(options, cmd, validatedArgs) {\n    Object.assign(options, validatedArgs);\n    \n    if (cmd.option(\"skip-install\")) {\n        options.skipNpmInstall = true;\n    }\n\n    if (cmd.option(\"lts\")) {\n        options.useStable = true;\n    }\n\n    if (cmd.option(\"public\")) {\n        options.publicMode = true;\n    }\n\n    options.packageManager = cmd.option(\"package-manager\");\n    options.registry = cmd.option(\"registry\");\n\n    options.workingPath = process.cwd();      \n}\n\nfunction validateArguments(app, cmd) {\n    const appDir = cmd.argv._[0];\n    const appName = cmd.option(\"name\");\n    const appMode = cmd.option(\"mode\");\n    \n    if (appDir.indexOf(\"/\") !== -1 || appDir.indexOf(\"\\\\\") !== -1) {\n        exitWithError(app, \"App directory should not contain path separator.\");\n    }\n\n    if (appName.indexOf(\" \") !== -1) {\n        exitWithError(app, \"App name should not contain any space character.\");\n    }\n\n    if (appName.split(\"/\").length > 2) {\n        exitWithError(app, 'App name should not contain more than one \"/\" character.');\n    }\n\n    if (!appModes.has(appMode)) {\n        exitWithError(app, `Unsupported app mode: ${appMode}`);\n    }\n\n    return {\n        appDir,\n        appName,\n        appMode,\n    };\n}\n\nconst run_ = async (app) => {\n    const cmd = app.commandLine;\n\n    if (cmd.option(\"help\")) {\n        cmd.showUsage();\n        return;\n    }\n\n    if (cmd.option(\"version\")) {\n        console.log(app.version);\n        return;\n    }\n\n    if (cmd.option(\"list-modes\")) {\n        cmd.showBannar();\n        \n        console.log(`All available app modes:\\n\\n  - ${appModeList.map(item => item.name).join('\\n  - ')}\\n`);        \n        return;\n    }\n\n    const validatedArgs = validateArguments(app, cmd);    \n\n    let options;\n\n    const configFile = cmd.option(\"config\");\n    if (configFile && fs.existsSync(configFile)) {\n        options = fs.readJsonSync(configFile);\n    } else {\n        options = {};\n    }\n\n    //override options with command line arguments\n    overrideOptions(options, cmd, validatedArgs);    \n\n    return init_(app, options);\n};\n\nexport default run_;"],"names":["overrideOptions","options","cmd","validatedArgs","Object","assign","option","skipNpmInstall","useStable","publicMode","packageManager","registry","workingPath","process","cwd","validateArguments","app","appDir","argv","_","appName","appMode","indexOf","exitWithError","split","length","appModes","has","run_","commandLine","showUsage","console","log","version","showBannar","appModeList","map","item","name","join","configFile","fs","existsSync","readJsonSync","init_"],"mappings":";;;;+BA4FA;;;eAAA;;;qBA5FmB;uBAEmB;sEACZ;8DACR;;;;;;AAElB,SAASA,gBAAgBC,OAAO,EAAEC,GAAG,EAAEC,aAAa,EAAE;IAClDC,OAAOC,MAAM,CAACJ,SAASE;IAEvB,IAAID,IAAII,MAAM,CAAC,iBAAiB;QAC5BL,QAAQM,cAAc,GAAG,IAAI;IACjC,CAAC;IAED,IAAIL,IAAII,MAAM,CAAC,QAAQ;QACnBL,QAAQO,SAAS,GAAG,IAAI;IAC5B,CAAC;IAED,IAAIN,IAAII,MAAM,CAAC,WAAW;QACtBL,QAAQQ,UAAU,GAAG,IAAI;IAC7B,CAAC;IAEDR,QAAQS,cAAc,GAAGR,IAAII,MAAM,CAAC;IACpCL,QAAQU,QAAQ,GAAGT,IAAII,MAAM,CAAC;IAE9BL,QAAQW,WAAW,GAAGC,QAAQC,GAAG;AACrC;AAEA,SAASC,kBAAkBC,GAAG,EAAEd,GAAG,EAAE;IACjC,MAAMe,SAASf,IAAIgB,IAAI,CAACC,CAAC,CAAC,EAAE;IAC5B,MAAMC,UAAUlB,IAAII,MAAM,CAAC;IAC3B,MAAMe,UAAUnB,IAAII,MAAM,CAAC;IAE3B,IAAIW,OAAOK,OAAO,CAAC,SAAS,CAAC,KAAKL,OAAOK,OAAO,CAAC,UAAU,CAAC,GAAG;QAC3DC,IAAAA,sBAAa,EAACP,KAAK;IACvB,CAAC;IAED,IAAII,QAAQE,OAAO,CAAC,SAAS,CAAC,GAAG;QAC7BC,IAAAA,sBAAa,EAACP,KAAK;IACvB,CAAC;IAED,IAAII,QAAQI,KAAK,CAAC,KAAKC,MAAM,GAAG,GAAG;QAC/BF,IAAAA,sBAAa,EAACP,KAAK;IACvB,CAAC;IAED,IAAI,CAACU,eAAQ,CAACC,GAAG,CAACN,UAAU;QACxBE,IAAAA,sBAAa,EAACP,KAAK,CAAC,sBAAsB,EAAEK,QAAQ,CAAC;IACzD,CAAC;IAED,OAAO;QACHJ;QACAG;QACAC;IACJ;AACJ;AAEA,MAAMO,OAAO,OAAOZ,MAAQ;IACxB,MAAMd,MAAMc,IAAIa,WAAW;IAE3B,IAAI3B,IAAII,MAAM,CAAC,SAAS;QACpBJ,IAAI4B,SAAS;QACb;IACJ,CAAC;IAED,IAAI5B,IAAII,MAAM,CAAC,YAAY;QACvByB,QAAQC,GAAG,CAAChB,IAAIiB,OAAO;QACvB;IACJ,CAAC;IAED,IAAI/B,IAAII,MAAM,CAAC,eAAe;QAC1BJ,IAAIgC,UAAU;QAEdH,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAEG,kBAAW,CAACC,GAAG,CAACC,CAAAA,OAAQA,KAAKC,IAAI,EAAEC,IAAI,CAAC,UAAU,EAAE,CAAC;QACpG;IACJ,CAAC;IAED,MAAMpC,gBAAgBY,kBAAkBC,KAAKd;IAE7C,IAAID;IAEJ,MAAMuC,aAAatC,IAAII,MAAM,CAAC;IAC9B,IAAIkC,cAAcC,OAAE,CAACC,UAAU,CAACF,aAAa;QACzCvC,UAAUwC,OAAE,CAACE,YAAY,CAACH;IAC9B,OAAO;QACHvC,UAAU,CAAC;IACf,CAAC;IAED,8CAA8C;IAC9CD,gBAAgBC,SAASC,KAAKC;IAE9B,OAAOyC,IAAAA,cAAK,EAAC5B,KAAKf;AACtB;MAEA,WAAe2B"}