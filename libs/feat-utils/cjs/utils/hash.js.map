{"version":3,"sources":["../../lib/utils/hash.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { createReadStream } from 'node:fs';\n\nexport function hash(hashAlgorithm, message, salt, encoding = 'hex') {\n    const hash = crypto.createHash(hashAlgorithm);\n    hash.update(message);\n    if (salt != null) {\n        hash.update(salt);\n    }\n\n    return hash.digest(encoding);\n};\n\nexport async function hashFile_(hashAlgorithm, filePath, encoding = 'hex') {\n    const hash = crypto.createHash(hashAlgorithm);\n    return new Promise((resolve, reject) =>\n        createReadStream(filePath)\n            .on('error', reject)\n            .pipe(hash)\n            .on('error', reject)\n            .on('finish', () => {\n                if (encoding === 'buffer') {\n                    const { buffer } = new Uint8Array(hash.read());\n                    resolve(buffer);\n                } else {\n                    resolve(hash.read().toString(encoding));\n                }\n            })\n    );\n};\n\n"],"names":["hash","hashFile_","hashAlgorithm","message","salt","encoding","crypto","createHash","update","digest","filePath","Promise","resolve","reject","createReadStream","on","pipe","buffer","Uint8Array","read","toString"],"mappings":";;;;;;;;;;;IAGgBA,IAAI;eAAJA;;IAUMC,SAAS;eAATA;;;mEAbH;wBACc;;;;;;AAE1B,SAASD,KAAKE,aAAa,EAAEC,OAAO,EAAEC,IAAI,EAAEC,WAAW,KAAK,EAAE;IACjE,MAAML,OAAOM,mBAAM,CAACC,UAAU,CAACL;IAC/BF,KAAKQ,MAAM,CAACL;IACZ,IAAIC,QAAQ,IAAI,EAAE;QACdJ,KAAKQ,MAAM,CAACJ;IAChB,CAAC;IAED,OAAOJ,KAAKS,MAAM,CAACJ;AACvB;;AAEO,eAAeJ,UAAUC,aAAa,EAAEQ,QAAQ,EAAEL,WAAW,KAAK,EAAE;IACvE,MAAML,OAAOM,mBAAM,CAACC,UAAU,CAACL;IAC/B,OAAO,IAAIS,QAAQ,CAACC,SAASC,SACzBC,IAAAA,wBAAgB,EAACJ,UACZK,EAAE,CAAC,SAASF,QACZG,IAAI,CAAChB,MACLe,EAAE,CAAC,SAASF,QACZE,EAAE,CAAC,UAAU,IAAM;YAChB,IAAIV,aAAa,UAAU;gBACvB,MAAM,EAAEY,OAAM,EAAE,GAAG,IAAIC,WAAWlB,KAAKmB,IAAI;gBAC3CP,QAAQK;YACZ,OAAO;gBACHL,QAAQZ,KAAKmB,IAAI,GAAGC,QAAQ,CAACf;YACjC,CAAC;QACL;AAEZ"}