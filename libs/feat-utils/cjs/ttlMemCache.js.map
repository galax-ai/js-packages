{"version":3,"sources":["../lib/ttlMemCache.js"],"sourcesContent":["import { Feature } from '@galaxar/app';\n\n/**\n * Time-to-live (TTL) Memory Cache\n * @module Feature_TtlMemCache\n */\n\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} options - Options for the feature\n     * @property {number} [options.stdTTL=0] - The standard ttl as number in seconds for every generated cache element. 0 = unlimited\n     * @property {number} [options.checkperiod=600] - The period in seconds, as a number, used for the automatic delete check interval. 0 = no periodic check.\n     * @property {boolean} [options.useClones=false] - En/disable cloning of variables. If true you'll get a copy of the cached variable. If false you'll save and get just the reference.\n     * @returns {Promise.<*>}\n     *\n     * @see[methods]{@link https://github.com/node-cache/node-cache}\n     *\n     */\n    load_: async function (app, options, name) {\n        const NodeCache = app.tryRequire('node-cache');\n        const nodeCache = new NodeCache({\n            useClones: false,\n            ...options,\n        });\n\n        app.registerService(name, nodeCache);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","options","name","NodeCache","tryRequire","nodeCache","useClones","registerService"],"mappings":"oGAOA,iDAAA,+BAPwB,sBAOxB,SAAe,CAKXA,MAAOC,YAAO,CAACC,OAAO,CAEtBC,UAAW,IAAI,CAcfC,MAAO,eAAgBC,GAAG,CAAEC,OAAO,CAAEC,IAAI,CAAE,CACvC,MAAMC,UAAYH,IAAII,UAAU,CAAC,cACjC,MAAMC,UAAY,IAAIF,UAAU,CAC5BG,UAAW,KAAK,CAChB,GAAGL,OAAO,AACd,GAEAD,IAAIO,eAAe,CAACL,KAAMG,UAC9B,CACJ"}