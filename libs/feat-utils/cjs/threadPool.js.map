{"version":3,"sources":["../lib/threadPool.js"],"sourcesContent":["import { Worker } from 'node:worker_threads';\nimport { Feature } from '@galaxar/app';\nimport { InvalidConfiguration } from '@galaxar/types';\nimport Deque from 'collections/deque';\n\nconst recreateWorkerError = (sourceError) => {\n    const error = new Error(sourceError.message);\n\n    for (const [key, value] of Object.entries(sourceError)) {\n        if (key !== 'message') {\n            error[key] = value;\n        }\n    }\n\n    return error;\n};\n\nlet poolIdCounter = 0;\n\nexport class WorkerPool {\n    constructor(app, options) {\n        const { name, workerFile, lowThreadNum, highThreadNum, workerOptions } = options;\n\n        this.app = app;\n        this.workerFile = workerFile;\n        this.lowThreadNum = lowThreadNum;\n        this.highThreadNum = highThreadNum;\n        this.workerOptions = workerOptions;\n        this.poolId = poolIdCounter++;\n        this.name = name ?? `${this.app.name}_tp${this.poolId}`;\n        this.taskIdCounter = 0;\n        this.tasks = new Map();\n        this.idleWorkers = new Deque();\n        this.busyWorkers = new Map();\n\n        if (lowThreadNum > 0) {\n            for (let i = 0; i < lowThreadNum; i++) {\n                this.createWorker(true);\n            }\n        }\n    }\n\n    createWorker(idle) {\n        const worker = new Worker(this.workerFile, this.workerOptions);\n\n        worker.on('message', (message) => {\n            const task = this.tasks.get(message.id);\n            this.tasks.delete(message.id);\n\n            const workerContext = this.busyWorkers.get(worker.threadId);\n            workerContext.ongoing--;\n\n            if (workerContext.ongoing === 0) {\n                worker.unref();            \n                this.busyWorkers.delete(worker.threadId);\n\n                if (this.idleWorkers.length < this.lowThreadNum) {\n                    this.idleWorkers.push(worker);\n                } else {\n                    worker.terminate();\n                }\n            }\n\n            if (message.error == null) {\n                task.resolve(message.value);\n            } else {\n                task.reject(recreateWorkerError(message.error));\n            }\n        });\n\n        worker.on('error', (error) => {\n            // Any error here is effectively an equivalent of segfault, and have no scope, so we just throw it on callback level\n            throw error;\n        });\n\n        if (idle) {\n            this.idleWorkers.push(worker);\n        }\n\n        return worker;\n    }\n\n    getNextWorker() {\n        // If we have idle workers, just use them\n        if (this.idleWorkers.length > 0) {\n            const worker = this.idleWorkers.shift();\n            this.busyWorkers.set(worker.threadId, { ongoing: 1, worker });\n            return worker;\n        }\n\n        // If we have less than highThreadNum workers, create a new one\n        if (this.busyWorkers.size < this.highThreadNum) {\n            const worker = this.createWorker();\n            this.busyWorkers.set(worker.threadId, { ongoing: 1, worker });\n            return worker;\n        }\n\n        // Otherwise, just use the first worker\n        const [ workerThreadId, workerContext ] = this.busyWorkers.entries().next().value;\n        workerContext.ongoing++;\n        this.busyWorkers.delete(workerThreadId);\n        this.busyWorkers.set(workerThreadId, workerContext);\n        return workerContext.worker;\n    }\n\n    async runTask_(task, payload, transferList) {\n        return new Promise((resolve, reject) => {\n            const taskId = this.taskIdCounter++;\n            this.tasks.set(taskId, { resolve, reject });\n\n            const worker = this.getNextWorker();\n\n            worker.ref();\n            worker.postMessage({ id: taskId, task, payload }, transferList);\n        });\n    }\n}\n\n/**\n * Thread pool to run tasks in parallel\n * @module Feature_ThreadPool\n */\n\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} [options] - Options for the feature\n     * @returns {Promise.<void>}\n     *\n     */\n    load_: async function (app, options, name) {\n        options = app.featureConfig(\n            options,\n            {\n                schema: {\n                    name: { type: 'text', optional: true },\n                    workerFile: { type: 'text' },\n                    workerOptions: { type: 'object', optional: true },\n                    lowThreadNum: { type: 'integer', default: 0 },\n                    highThreadNum: { type: 'integer', default: 1 },\n                },\n                keepUnsanitized: true,\n            },\n            name\n        );\n\n        const { lowThreadNum, highThreadNum } = options;\n\n        if (highThreadNum < lowThreadNum) {\n            throw new InvalidConfiguration(\n                '\"highThreadNum\" must be greater than or equal to \"lowThreadNum\".',\n                app,\n                `${name}.highThreadNum`\n            );\n        }\n\n        if (highThreadNum === 0) {\n            throw new InvalidConfiguration('\"highThreadNum\" must be greater than 0.', app, `${name}.highThreadNum`);\n        }\n\n        const pool = new WorkerPool(app, options);\n\n        app.registerService(name, pool);\n    },\n};\n"],"names":["WorkerPool","recreateWorkerError","sourceError","error","Error","message","key","value","Object","entries","poolIdCounter","createWorker","idle","worker","Worker","workerFile","workerOptions","on","task","tasks","get","id","delete","workerContext","busyWorkers","threadId","ongoing","unref","idleWorkers","length","lowThreadNum","push","terminate","resolve","reject","getNextWorker","shift","set","size","highThreadNum","workerThreadId","next","runTask_","payload","transferList","Promise","taskId","taskIdCounter","ref","postMessage","constructor","app","options","name","poolId","Map","Deque","i","stage","Feature","SERVICE","groupable","load_","featureConfig","schema","type","optional","default","keepUnsanitized","InvalidConfiguration","pool","registerService"],"mappings":"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"}