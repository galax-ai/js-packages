{"version":3,"sources":["../lib/cipher.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { Feature } from '@galaxar/app';\nimport { ValidationError } from '@galaxar/types';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { hashAlgorithm, cipherAlgorithm, key, asymmetricAlgorithm, asymmetricBits, signerAlgorithm } =\n            app.featureConfig(\n                options,\n                {\n                    schema: {\n                        key: { type: 'text', fixedLength: 32, optional: true },\n                        hashAlgorithm: { type: 'text', optional: true, default: 'sha256' },\n                        cipherAlgorithm: { type: 'text', optional: true, default: 'aes-256-cbc' },\n                        asymmetricAlgorithm: {\n                            type: 'enum',\n                            values: ['rsa', 'rsa-pss', 'dsa', 'ec', 'ed25519', 'ed448', 'x25519', 'x448', 'dh'],\n                            optional: true,\n                            default: 'rsa',\n                        },\n                        asymmetricBits: { type: 'integer', optional: true, default: 2048 },\n                        signerAlgorithm: { type: 'text', optional: true, default: 'rsa-sha256' },\n                    },\n                },\n                name\n            );\n\n        const service = {\n            hash: (message, salt, encoding = 'hex', _hashAlgorithm) => {\n                const hash = crypto.createHash(_hashAlgorithm ?? hashAlgorithm);\n                hash.update(message);\n                hash.update(salt);\n\n                return hash.digest(encoding);\n            },\n\n            encrypt: (message, _key, _cipherAlgorithm) => {\n                if (_key && _key.length !== 32) {\n                    throw new ValidationError('The length of symmetric key should be exactly 32.', {\n                        key: _key,\n                    });\n                }\n\n                const buf = Buffer.alloc(16);\n                crypto.randomFillSync(buf);\n\n                const cipher = crypto.createCipheriv(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, buf);\n\n                let encryptedData = cipher.update(message, 'utf-8', 'base64');\n                encryptedData += cipher.final('base64');\n                encryptedData += buf.toString('hex');\n                return encryptedData;\n            },\n\n            decrypt: (message, _key, _cipherAlgorithm) => {\n                if (_key && _key.length !== 32) {\n                    throw new ValidationError('The length of symmetric key should be exactly 32.', {\n                        key: _key,\n                    });\n                }\n\n                const l = message.length - 32;\n                const iv = Buffer.from(message.substring(l), 'hex');\n\n                const encrypted = message.substring(0, l);\n\n                const decipher = crypto.createDecipheriv(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, iv);\n                let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return decrypted;\n            },\n\n            generateKeyPair: (algorithm, _options) => {\n                const keypair = crypto.generateKeyPairSync(algorithm ?? asymmetricAlgorithm, {\n                    modulusLength: asymmetricBits,\n                    publicKeyEncoding: {\n                        type: 'spki',\n                        format: 'pem',\n                    },\n                    privateKeyEncoding: {\n                        type: 'pkcs8',\n                        format: 'pem',\n                    },\n                    ..._options,\n                });\n\n                return keypair;\n            },\n\n            generateKeyPair_: async (algorithm, _options) => {\n                const keypair = await new Promise((resolve, reject) =>\n                    crypto.generateKeyPair(\n                        algorithm ?? asymmetricAlgorithm,\n                        {\n                            modulusLength: asymmetricBits,\n                            publicKeyEncoding: {\n                                type: 'spki',\n                                format: 'pem',\n                            },\n                            privateKeyEncoding: {\n                                type: 'pkcs8',\n                                format: 'pem',\n                            },\n                            ..._options,\n                        },\n                        (err, publicKey, privateKey) => {\n                            if (err) {\n                                reject(err);\n                                return;\n                            }\n\n                            resolve({ publicKey, privateKey });\n                        }\n                    )\n                );\n\n                return keypair;\n            },\n\n            publicEncrypt: (message, publicKey, encoding = 'base64') => {\n                return crypto.publicEncrypt(publicKey, Buffer.from(message, 'utf8')).toString(encoding);\n            },\n\n            privateDecrypt: (message, privateKey, encoding = 'base64') => {\n                return crypto.privateDecrypt(privateKey, Buffer.from(message, encoding)).toString('utf8');\n            },\n\n            privateSign: (message, privateKey, _signerAlgorithm, encoding = 'base64') => {\n                const signer = crypto.createSign(_signerAlgorithm ?? signerAlgorithm);\n                signer.update(message);\n\n                return signer.sign(privateKey, encoding);\n            },\n\n            publicVerify: (message, signature, publicKey, _signerAlgorithm, encoding = 'base64') => {\n                const verifier = crypto.createVerify(_signerAlgorithm ?? signerAlgorithm);\n                verifier.update(message);\n\n                return verifier.verify(publicKey, signature, encoding);\n            }\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","options","name","hashAlgorithm","cipherAlgorithm","key","asymmetricAlgorithm","asymmetricBits","signerAlgorithm","featureConfig","schema","type","fixedLength","optional","default","values","service","hash","message","salt","encoding","_hashAlgorithm","crypto","createHash","update","digest","encrypt","_key","_cipherAlgorithm","length","ValidationError","buf","Buffer","alloc","randomFillSync","cipher","createCipheriv","encryptedData","final","toString","decrypt","l","iv","from","substring","encrypted","decipher","createDecipheriv","decrypted","generateKeyPair","algorithm","_options","keypair","generateKeyPairSync","modulusLength","publicKeyEncoding","format","privateKeyEncoding","generateKeyPair_","Promise","resolve","reject","err","publicKey","privateKey","publicEncrypt","privateDecrypt","privateSign","_signerAlgorithm","signer","createSign","sign","publicVerify","signature","verifier","createVerify","verify","registerService"],"mappings":"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"}