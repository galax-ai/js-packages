{"version":3,"sources":["../lib/cipher.js"],"sourcesContent":["import { Feature } from '@galaxar/app';\nimport { hash, hashFile_ } from './utils/hash';\nimport {\n    encrypt,\n    decrypt,\n    generateKeyPair_,\n    generateKeyPair,\n    publicEncrypt,\n    privateDecrypt,\n    publicVerify,\n    privateSign,\n} from './utils/crypto';\n\nconst hashes = [\n    'rsa-md5',\n    'rsa-ripemd160',\n    'rsa-sha1',\n    'rsa-sha1-2',\n    'rsa-sha224',\n    'rsa-sha256',\n    'rsa-sha3-224',\n    'rsa-sha3-256',\n    'rsa-sha3-384',\n    'rsa-sha3-512',\n    'rsa-sha384',\n    'rsa-sha512',\n    'rsa-sha512/224',\n    'rsa-sha512/256',\n    'rsa-sm3',\n    'blake2b512',\n    'blake2s256',\n    'id-rsassa-pkcs1-v1_5-with-sha3-224',\n    'id-rsassa-pkcs1-v1_5-with-sha3-256',\n    'id-rsassa-pkcs1-v1_5-with-sha3-384',\n    'id-rsassa-pkcs1-v1_5-with-sha3-512',\n    'md5',\n    'md5-sha1',\n    'md5withrsaencryption',\n    'ripemd',\n    'ripemd160',\n    'ripemd160withrsa',\n    'rmd160',\n    'sha1',\n    'sha1withrsaencryption',\n    'sha224',\n    'sha224withrsaencryption',\n    'sha256',\n    'sha256withrsaencryption',\n    'sha3-224',\n    'sha3-256',\n    'sha3-384',\n    'sha3-512',\n    'sha384',\n    'sha384withrsaencryption',\n    'sha512',\n    'sha512-224',\n    'sha512-224withrsaencryption',\n    'sha512-256',\n    'sha512-256withrsaencryption',\n    'sha512withrsaencryption',\n    'shake128',\n    'shake256',\n    'sm3',\n    'sm3withrsaencryption',\n    'ssl3-md5',\n    'ssl3-sha1',\n];\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { hashAlgorithm, cipherAlgorithm, key, asymmetricAlgorithm, asymmetricBits, signerAlgorithm } =\n            app.featureConfig(\n                options,\n                {\n                    schema: {\n                        key: { type: 'text', fixedLength: 32, optional: true },\n                        hashAlgorithm: { type: 'text', enum: hashes, optional: true, default: 'sha256' },\n                        cipherAlgorithm: { type: 'text', optional: true, default: 'aes-256-cbc' },\n                        asymmetricAlgorithm: {\n                            type: 'text',\n                            enum: ['rsa', 'rsa-pss', 'dsa', 'ec', 'ed25519', 'ed448', 'x25519', 'x448', 'dh'],\n                            optional: true,\n                            default: 'rsa',\n                        },\n                        asymmetricBits: { type: 'integer', optional: true, default: 2048 },\n                        signerAlgorithm: { type: 'text', enum: hashes, optional: true, default: 'rsa-sha256' },\n                    },\n                },\n                name\n            );\n\n        const service = {\n            hash: (message, salt, encoding = 'hex', _hashAlgorithm) =>\n                hash(_hashAlgorithm ?? hashAlgorithm, message, salt, encoding),\n\n            hashFile_: (filePath, encoding = 'hex', _hashAlgorithm) =>\n                hashFile_(_hashAlgorithm ?? hashAlgorithm, filePath, encoding),\n\n            encrypt: (message, _key, _cipherAlgorithm) =>\n                encrypt(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, message),\n\n            decrypt: (message, _key, _cipherAlgorithm) =>\n                decrypt(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, message),\n\n            generateKeyPair: (algorithm, _options) =>\n                generateKeyPair(algorithm ?? asymmetricAlgorithm, asymmetricBits, _options),\n\n            generateKeyPair_: async (algorithm, _options) =>\n                generateKeyPair_(algorithm ?? asymmetricAlgorithm, asymmetricBits, _options),\n\n            publicEncrypt: (message, publicKey, encoding = 'base64') => publicEncrypt(publicKey, message, encoding),\n\n            privateDecrypt: (message, privateKey, encoding = 'base64') => privateDecrypt(privateKey, message, encoding),\n\n            privateSign: (message, privateKey, _signerAlgorithm, encoding = 'base64') =>\n                privateSign(_signerAlgorithm ?? signerAlgorithm, privateKey, message, encoding),\n\n            publicVerify: (message, signature, publicKey, _signerAlgorithm, encoding = 'base64') =>\n                publicVerify(_signerAlgorithm ?? signerAlgorithm, publicKey, message, signature, encoding),\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["hashes","stage","Feature","SERVICE","groupable","load_","app","options","name","hashAlgorithm","cipherAlgorithm","key","asymmetricAlgorithm","asymmetricBits","signerAlgorithm","featureConfig","schema","type","fixedLength","optional","enum","default","service","hash","message","salt","encoding","_hashAlgorithm","hashFile_","filePath","encrypt","_key","_cipherAlgorithm","decrypt","generateKeyPair","algorithm","_options","generateKeyPair_","publicEncrypt","publicKey","privateDecrypt","privateKey","privateSign","_signerAlgorithm","publicVerify","signature","registerService"],"mappings":";;;;+BAoEA;;;eAAA;;;qBApEwB;sBACQ;wBAUzB;AAEP,MAAMA,SAAS;IACX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH;MAED,WAAe;IACXC,OAAOC,YAAO,CAACC,OAAO;IAEtBC,WAAW,IAAI;IAEfC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAE;QACvC,MAAM,EAAEC,cAAa,EAAEC,gBAAe,EAAEC,IAAG,EAAEC,oBAAmB,EAAEC,eAAc,EAAEC,gBAAe,EAAE,GAC/FR,IAAIS,aAAa,CACbR,SACA;YACIS,QAAQ;gBACJL,KAAK;oBAAEM,MAAM;oBAAQC,aAAa;oBAAIC,UAAU,IAAI;gBAAC;gBACrDV,eAAe;oBAAEQ,MAAM;oBAAQG,MAAMpB;oBAAQmB,UAAU,IAAI;oBAAEE,SAAS;gBAAS;gBAC/EX,iBAAiB;oBAAEO,MAAM;oBAAQE,UAAU,IAAI;oBAAEE,SAAS;gBAAc;gBACxET,qBAAqB;oBACjBK,MAAM;oBACNG,MAAM;wBAAC;wBAAO;wBAAW;wBAAO;wBAAM;wBAAW;wBAAS;wBAAU;wBAAQ;qBAAK;oBACjFD,UAAU,IAAI;oBACdE,SAAS;gBACb;gBACAR,gBAAgB;oBAAEI,MAAM;oBAAWE,UAAU,IAAI;oBAAEE,SAAS;gBAAK;gBACjEP,iBAAiB;oBAAEG,MAAM;oBAAQG,MAAMpB;oBAAQmB,UAAU,IAAI;oBAAEE,SAAS;gBAAa;YACzF;QACJ,GACAb;QAGR,MAAMc,UAAU;YACZC,MAAM,CAACC,SAASC,MAAMC,WAAW,KAAK,EAAEC,iBACpCJ,IAAAA,UAAI,EAACI,kBAAkBlB,eAAee,SAASC,MAAMC;YAEzDE,WAAW,CAACC,UAAUH,WAAW,KAAK,EAAEC,iBACpCC,IAAAA,eAAS,EAACD,kBAAkBlB,eAAeoB,UAAUH;YAEzDI,SAAS,CAACN,SAASO,MAAMC,mBACrBF,IAAAA,eAAO,EAACE,oBAAoBtB,iBAAiBqB,QAAQpB,KAAKa;YAE9DS,SAAS,CAACT,SAASO,MAAMC,mBACrBC,IAAAA,eAAO,EAACD,oBAAoBtB,iBAAiBqB,QAAQpB,KAAKa;YAE9DU,iBAAiB,CAACC,WAAWC,WACzBF,IAAAA,uBAAe,EAACC,aAAavB,qBAAqBC,gBAAgBuB;YAEtEC,kBAAkB,OAAOF,WAAWC,WAChCC,IAAAA,wBAAgB,EAACF,aAAavB,qBAAqBC,gBAAgBuB;YAEvEE,eAAe,CAACd,SAASe,WAAWb,WAAW,QAAQ,GAAKY,IAAAA,qBAAa,EAACC,WAAWf,SAASE;YAE9Fc,gBAAgB,CAAChB,SAASiB,YAAYf,WAAW,QAAQ,GAAKc,IAAAA,sBAAc,EAACC,YAAYjB,SAASE;YAElGgB,aAAa,CAAClB,SAASiB,YAAYE,kBAAkBjB,WAAW,QAAQ,GACpEgB,IAAAA,mBAAW,EAACC,oBAAoB7B,iBAAiB2B,YAAYjB,SAASE;YAE1EkB,cAAc,CAACpB,SAASqB,WAAWN,WAAWI,kBAAkBjB,WAAW,QAAQ,GAC/EkB,IAAAA,oBAAY,EAACD,oBAAoB7B,iBAAiByB,WAAWf,SAASqB,WAAWnB;QACzF;QAEApB,IAAIwC,eAAe,CAACtC,MAAMc;IAC9B;AACJ"}