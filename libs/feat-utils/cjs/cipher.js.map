{"version":3,"sources":["../lib/cipher.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { Feature } from '@galaxar/app';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        options = app.featureConfig(options, {\n            schema: {\n                key: { type: 'text' },\n            },\n            keepUnsanitized: true,\n        }, name);\n\n        const { hashAlgorithm, cipherAlgorithm, key } = {\n            hashAlgorithm: 'sha256',\n            cipherAlgorithm: 'aes-256-cbc',\n            ...options,\n        };\n\n        const service = {\n            hash: (message, salt, encoding = 'hex', _hashAlgorithm) => {\n                const hash = crypto.createHash(_hashAlgorithm ?? hashAlgorithm);\n                hash.update(message);\n                hash.update(salt);\n\n                return hash.digest(encoding);\n            },\n\n            encrypt: (message) => {\n                const buf = Buffer.alloc(16);\n                crypto.randomFillSync(buf);\n\n                const cipher = crypto.createCipheriv(cipherAlgorithm, key, buf);\n\n                let encryptedData = cipher.update(message, 'utf-8', 'base64');\n                encryptedData += cipher.final('base64');\n                encryptedData += buf.toString('hex');\n                return encryptedData;\n            },\n\n            decrypt: (message) => {\n                const l = message.length - 32;\n                const iv = Buffer.from(message.substring(l), 'hex');\n\n                const encrypted = message.substring(0, l);\n\n                const decipher = crypto.createDecipheriv(cipherAlgorithm, key, iv);\n                let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return decrypted;\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","options","name","featureConfig","schema","key","type","keepUnsanitized","hashAlgorithm","cipherAlgorithm","service","hash","message","salt","encoding","_hashAlgorithm","crypto","createHash","update","digest","encrypt","buf","Buffer","alloc","randomFillSync","cipher","createCipheriv","encryptedData","final","toString","decrypt","l","length","iv","from","substring","encrypted","decipher","createDecipheriv","decrypted","registerService"],"mappings":";;;;+BAGA;;;eAAA;;;mEAHmB;qBACK;;;;;;MAExB,WAAe;IACXA,OAAOC,YAAO,CAACC,OAAO;IAEtBC,WAAW,IAAI;IAEfC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAE;QACvCD,UAAUD,IAAIG,aAAa,CAACF,SAAS;YACjCG,QAAQ;gBACJC,KAAK;oBAAEC,MAAM;gBAAO;YACxB;YACAC,iBAAiB,IAAI;QACzB,GAAGL;QAEH,MAAM,EAAEM,cAAa,EAAEC,gBAAe,EAAEJ,IAAG,EAAE,GAAG;YAC5CG,eAAe;YACfC,iBAAiB;YACjB,GAAGR,OAAO;QACd;QAEA,MAAMS,UAAU;YACZC,MAAM,CAACC,SAASC,MAAMC,WAAW,KAAK,EAAEC,iBAAmB;gBACvD,MAAMJ,OAAOK,mBAAM,CAACC,UAAU,CAACF,kBAAkBP;gBACjDG,KAAKO,MAAM,CAACN;gBACZD,KAAKO,MAAM,CAACL;gBAEZ,OAAOF,KAAKQ,MAAM,CAACL;YACvB;YAEAM,SAAS,CAACR,UAAY;gBAClB,MAAMS,MAAMC,OAAOC,KAAK,CAAC;gBACzBP,mBAAM,CAACQ,cAAc,CAACH;gBAEtB,MAAMI,SAAST,mBAAM,CAACU,cAAc,CAACjB,iBAAiBJ,KAAKgB;gBAE3D,IAAIM,gBAAgBF,OAAOP,MAAM,CAACN,SAAS,SAAS;gBACpDe,iBAAiBF,OAAOG,KAAK,CAAC;gBAC9BD,iBAAiBN,IAAIQ,QAAQ,CAAC;gBAC9B,OAAOF;YACX;YAEAG,SAAS,CAAClB,UAAY;gBAClB,MAAMmB,IAAInB,QAAQoB,MAAM,GAAG;gBAC3B,MAAMC,KAAKX,OAAOY,IAAI,CAACtB,QAAQuB,SAAS,CAACJ,IAAI;gBAE7C,MAAMK,YAAYxB,QAAQuB,SAAS,CAAC,GAAGJ;gBAEvC,MAAMM,WAAWrB,mBAAM,CAACsB,gBAAgB,CAAC7B,iBAAiBJ,KAAK4B;gBAC/D,IAAIM,YAAYF,SAASnB,MAAM,CAACkB,WAAW,UAAU;gBACrDG,aAAaF,SAAST,KAAK,CAAC;gBAC5B,OAAOW;YACX;QACJ;QAEAvC,IAAIwC,eAAe,CAACtC,MAAMQ;IAC9B;AACJ"}