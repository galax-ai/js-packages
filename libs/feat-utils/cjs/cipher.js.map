{"version":3,"sources":["../lib/cipher.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { Feature } from '@galaxar/app';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        options = app.featureConfig(options, {\n            schema: {\n                key: { type: 'text' },\n            },\n            keepUnsanitized: true,\n        }, name);\n\n        const { hashAlgorithm, cipherAlgorithm, key } = {\n            hashAlgorithm: 'sha256',\n            cipherAlgorithm: 'aes-256-cbc',\n            ...options,\n        };\n\n        const service = {\n            hash: (message, salt, encoding = 'hex', _hashAlgorithm) => {\n                const hash = crypto.createHash(_hashAlgorithm ?? hashAlgorithm);\n                hash.update(message);\n                hash.update(salt);\n\n                return hash.digest(encoding);\n            },\n\n            encrypt: (message) => {\n                const buf = Buffer.alloc(16);\n                crypto.randomFillSync(buf);\n\n                const cipher = crypto.createCipheriv(cipherAlgorithm, key, buf);\n\n                let encryptedData = cipher.update(message, 'utf-8', 'base64');\n                encryptedData += cipher.final('base64');\n                encryptedData += buf.toString('hex');\n                return encryptedData;\n            },\n\n            decrypt: (message) => {\n                const l = message.length - 32;\n                const iv = Buffer.from(message.substring(l), 'hex');\n\n                const encrypted = message.substring(0, l);\n\n                const decipher = crypto.createDecipheriv(cipherAlgorithm, key, iv);\n                let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return decrypted;\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","options","name","featureConfig","schema","key","type","keepUnsanitized","hashAlgorithm","cipherAlgorithm","service","hash","message","salt","encoding","_hashAlgorithm","crypto","createHash","update","digest","encrypt","buf","Buffer","alloc","randomFillSync","cipher","createCipheriv","encryptedData","final","toString","decrypt","l","length","iv","from","substring","encrypted","decipher","createDecipheriv","decrypted","registerService"],"mappings":"oGAGA,iDAAA,+DAHmB,mCACK,0GAExB,SAAe,CACXA,MAAOC,YAAO,CAACC,OAAO,CAEtBC,UAAW,IAAI,CAEfC,MAAO,eAAgBC,GAAG,CAAEC,OAAO,CAAEC,IAAI,CAAE,CACvCD,QAAUD,IAAIG,aAAa,CAACF,QAAS,CACjCG,OAAQ,CACJC,IAAK,CAAEC,KAAM,MAAO,CACxB,EACAC,gBAAiB,IAAI,AACzB,EAAGL,MAEH,KAAM,CAAEM,aAAa,CAAEC,eAAe,CAAEJ,GAAG,CAAE,CAAG,CAC5CG,cAAe,SACfC,gBAAiB,cACjB,GAAGR,OAAO,AACd,EAEA,MAAMS,QAAU,CACZC,KAAM,CAACC,QAASC,KAAMC,SAAW,KAAK,CAAEC,iBAAmB,CACvD,MAAMJ,KAAOK,mBAAM,CAACC,UAAU,CAACF,gBAAkBP,eACjDG,KAAKO,MAAM,CAACN,SACZD,KAAKO,MAAM,CAACL,MAEZ,OAAOF,KAAKQ,MAAM,CAACL,SACvB,EAEAM,QAAS,AAACR,SAAY,CAClB,MAAMS,IAAMC,OAAOC,KAAK,CAAC,IACzBP,mBAAM,CAACQ,cAAc,CAACH,KAEtB,MAAMI,OAAST,mBAAM,CAACU,cAAc,CAACjB,gBAAiBJ,IAAKgB,KAE3D,IAAIM,cAAgBF,OAAOP,MAAM,CAACN,QAAS,QAAS,UACpDe,eAAiBF,OAAOG,KAAK,CAAC,UAC9BD,eAAiBN,IAAIQ,QAAQ,CAAC,OAC9B,OAAOF,aACX,EAEAG,QAAS,AAAClB,SAAY,CAClB,MAAMmB,EAAInB,QAAQoB,MAAM,CAAG,GAC3B,MAAMC,GAAKX,OAAOY,IAAI,CAACtB,QAAQuB,SAAS,CAACJ,GAAI,OAE7C,MAAMK,UAAYxB,QAAQuB,SAAS,CAAC,EAAGJ,GAEvC,MAAMM,SAAWrB,mBAAM,CAACsB,gBAAgB,CAAC7B,gBAAiBJ,IAAK4B,IAC/D,IAAIM,UAAYF,SAASnB,MAAM,CAACkB,UAAW,SAAU,QACrDG,WAAaF,SAAST,KAAK,CAAC,QAC5B,OAAOW,SACX,CACJ,EAEAvC,IAAIwC,eAAe,CAACtC,KAAMQ,QAC9B,CACJ"}