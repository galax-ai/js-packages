{"version":3,"sources":["../lib/cipher.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { createReadStream } from 'node:fs';\nimport { Feature } from '@galaxar/app';\nimport { ValidationError } from '@galaxar/types';\n\nconst hashes = [\n    'rsa-md5',\n    'rsa-ripemd160',\n    'rsa-sha1',\n    'rsa-sha1-2',\n    'rsa-sha224',\n    'rsa-sha256',\n    'rsa-sha3-224',\n    'rsa-sha3-256',\n    'rsa-sha3-384',\n    'rsa-sha3-512',\n    'rsa-sha384',\n    'rsa-sha512',\n    'rsa-sha512/224',\n    'rsa-sha512/256',\n    'rsa-sm3',\n    'blake2b512',\n    'blake2s256',\n    'id-rsassa-pkcs1-v1_5-with-sha3-224',\n    'id-rsassa-pkcs1-v1_5-with-sha3-256',\n    'id-rsassa-pkcs1-v1_5-with-sha3-384',\n    'id-rsassa-pkcs1-v1_5-with-sha3-512',\n    'md5',\n    'md5-sha1',\n    'md5withrsaencryption',\n    'ripemd',\n    'ripemd160',\n    'ripemd160withrsa',\n    'rmd160',\n    'sha1',\n    'sha1withrsaencryption',\n    'sha224',\n    'sha224withrsaencryption',\n    'sha256',\n    'sha256withrsaencryption',\n    'sha3-224',\n    'sha3-256',\n    'sha3-384',\n    'sha3-512',\n    'sha384',\n    'sha384withrsaencryption',\n    'sha512',\n    'sha512-224',\n    'sha512-224withrsaencryption',\n    'sha512-256',\n    'sha512-256withrsaencryption',\n    'sha512withrsaencryption',\n    'shake128',\n    'shake256',\n    'sm3',\n    'sm3withrsaencryption',\n    'ssl3-md5',\n    'ssl3-sha1',\n];\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { hashAlgorithm, cipherAlgorithm, key, asymmetricAlgorithm, asymmetricBits, signerAlgorithm } =\n            app.featureConfig(\n                options,\n                {\n                    schema: {\n                        key: { type: 'text', fixedLength: 32, optional: true },\n                        hashAlgorithm: { type: 'text', enum: hashes, optional: true, default: 'sha256' },\n                        cipherAlgorithm: { type: 'text', optional: true, default: 'aes-256-cbc' },\n                        asymmetricAlgorithm: {\n                            type: 'text',\n                            enum: ['rsa', 'rsa-pss', 'dsa', 'ec', 'ed25519', 'ed448', 'x25519', 'x448', 'dh'],\n                            optional: true,\n                            default: 'rsa',\n                        },\n                        asymmetricBits: { type: 'integer', optional: true, default: 2048 },\n                        signerAlgorithm: { type: 'text', enum: hashes, optional: true, default: 'rsa-sha256' },\n                    },\n                },\n                name\n            );\n\n        const service = {\n            hash: (message, salt, encoding = 'hex', _hashAlgorithm) => {\n                const hash = crypto.createHash(_hashAlgorithm ?? hashAlgorithm);\n                hash.update(message);\n                hash.update(salt);\n\n                return hash.digest(encoding);\n            },\n\n            hashFile_: async (filePath, encoding = 'hex', _hashAlgorithm) => {\n                const hash = crypto.createHash(_hashAlgorithm ?? hashAlgorithm);\n                return new Promise((resolve, reject) =>\n                    createReadStream(filePath)\n                        .on('error', reject)\n                        .pipe(hash)\n                        .on('error', reject)\n                        .on('finish', () => {\n                            if (encoding === 'buffer') {\n                                const { buffer } = new Uint8Array(hash.read());\n                                resolve(buffer);\n                            } else {\n                                resolve(hash.read().toString(encoding));\n                            }\n                        })\n                );\n            },\n\n            encrypt: (message, _key, _cipherAlgorithm) => {\n                if (_key && _key.length !== 32) {\n                    throw new ValidationError('The length of symmetric key should be exactly 32.', {\n                        key: _key,\n                    });\n                }\n\n                const buf = Buffer.alloc(16);\n                crypto.randomFillSync(buf);\n\n                const cipher = crypto.createCipheriv(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, buf);\n\n                let encryptedData = cipher.update(message, 'utf-8', 'base64');\n                encryptedData += cipher.final('base64');\n                encryptedData += buf.toString('hex');\n                return encryptedData;\n            },\n\n            decrypt: (message, _key, _cipherAlgorithm) => {\n                if (_key && _key.length !== 32) {\n                    throw new ValidationError('The length of symmetric key should be exactly 32.', {\n                        key: _key,\n                    });\n                }\n\n                const l = message.length - 32;\n                const iv = Buffer.from(message.substring(l), 'hex');\n\n                const encrypted = message.substring(0, l);\n\n                const decipher = crypto.createDecipheriv(_cipherAlgorithm ?? cipherAlgorithm, _key ?? key, iv);\n                let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return decrypted;\n            },\n\n            generateKeyPair: (algorithm, _options) => {\n                const keypair = crypto.generateKeyPairSync(algorithm ?? asymmetricAlgorithm, {\n                    modulusLength: asymmetricBits,\n                    publicKeyEncoding: {\n                        type: 'spki',\n                        format: 'pem',\n                    },\n                    privateKeyEncoding: {\n                        type: 'pkcs8',\n                        format: 'pem',\n                    },\n                    ..._options,\n                });\n\n                return keypair;\n            },\n\n            generateKeyPair_: async (algorithm, _options) => {\n                const keypair = await new Promise((resolve, reject) =>\n                    crypto.generateKeyPair(\n                        algorithm ?? asymmetricAlgorithm,\n                        {\n                            modulusLength: asymmetricBits,\n                            publicKeyEncoding: {\n                                type: 'spki',\n                                format: 'pem',\n                            },\n                            privateKeyEncoding: {\n                                type: 'pkcs8',\n                                format: 'pem',\n                            },\n                            ..._options,\n                        },\n                        (err, publicKey, privateKey) => {\n                            if (err) {\n                                reject(err);\n                                return;\n                            }\n\n                            resolve({ publicKey, privateKey });\n                        }\n                    )\n                );\n\n                return keypair;\n            },\n\n            publicEncrypt: (message, publicKey, encoding = 'base64') => {\n                return crypto.publicEncrypt(publicKey, Buffer.from(message, 'utf8')).toString(encoding);\n            },\n\n            privateDecrypt: (message, privateKey, encoding = 'base64') => {\n                return crypto.privateDecrypt(privateKey, Buffer.from(message, encoding)).toString('utf8');\n            },\n\n            privateSign: (message, privateKey, _signerAlgorithm, encoding = 'base64') => {\n                const signer = crypto.createSign(_signerAlgorithm ?? signerAlgorithm);\n                signer.update(message);\n\n                return signer.sign(privateKey, encoding);\n            },\n\n            publicVerify: (message, signature, publicKey, _signerAlgorithm, encoding = 'base64') => {\n                const verifier = crypto.createVerify(_signerAlgorithm ?? signerAlgorithm);\n                verifier.update(message);\n\n                return verifier.verify(publicKey, signature, encoding);\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["hashes","stage","Feature","SERVICE","groupable","load_","app","options","name","hashAlgorithm","cipherAlgorithm","key","asymmetricAlgorithm","asymmetricBits","signerAlgorithm","featureConfig","schema","type","fixedLength","optional","enum","default","service","hash","message","salt","encoding","_hashAlgorithm","crypto","createHash","update","digest","hashFile_","filePath","Promise","resolve","reject","createReadStream","on","pipe","buffer","Uint8Array","read","toString","encrypt","_key","_cipherAlgorithm","length","ValidationError","buf","Buffer","alloc","randomFillSync","cipher","createCipheriv","encryptedData","final","decrypt","l","iv","from","substring","encrypted","decipher","createDecipheriv","decrypted","generateKeyPair","algorithm","_options","keypair","generateKeyPairSync","modulusLength","publicKeyEncoding","format","privateKeyEncoding","generateKeyPair_","err","publicKey","privateKey","publicEncrypt","privateDecrypt","privateSign","_signerAlgorithm","signer","createSign","sign","publicVerify","signature","verifier","createVerify","verify","registerService"],"mappings":"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"}