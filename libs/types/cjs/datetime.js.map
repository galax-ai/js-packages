{"version":3,"sources":["../lib/datetime.js"],"sourcesContent":["import { Plugins, beginSanitize } from './types';\nimport { ValidationError, ApplicationError } from './errors';\n\nexport default {\n    name: 'datetime',\n    alias: ['date', 'time', 'timestamp'],\n    defaultValue: new Date(0),\n    validate: (value) => value instanceof Date,\n\n    /**\n     * Transform a value into a JavaScript Date object.\n     * @param {*} value\n     * @param {*} meta\n     * @param {*} i18n\n     * @param {string} [path]\n     * @returns {Date|null}\n     */\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n\n        if (value instanceof Date) {\n            return value;\n        } else {\n            const type = typeof value;\n\n            if (type === 'string') {\n                if (meta.format) {\n                    const parser = Plugins['datetimeParser'];\n                    if (!parser) {\n                        throw new ApplicationError('Missing datetime parser plugin.');\n                    }\n                    value = parser(value, { format: meta.format, timezone: i18n?.timezone });\n                } else {\n                    value = new Date(value);\n                }\n            } else if (type === 'number') {\n                value = new Date(value);\n            } else if (value.toJSDate) {\n                value = value.toJSDate();\n            }\n\n            if (isNaN(value)) {\n                throw new ValidationError('Invalid datetime value.', {\n                    value: raw,\n                    meta,\n                    i18n,\n                    path,\n                });\n            }\n        }\n\n        return value;\n    },\n\n    serialize: (value) => {\n        return value?.toISOString();\n    },\n};\n"],"names":["name","alias","defaultValue","Date","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","type","format","parser","Plugins","ApplicationError","timezone","toJSDate","isNaN","ValidationError","serialize","toISOString"],"mappings":";;;;+BAGA;;;eAAA;;;uBAHuC;wBACW;MAElD,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;QAAQ;QAAQ;KAAY;IACpCC,cAAc,IAAIC,KAAK;IACvBC,UAAU,CAACC,QAAUA,iBAAiBF;IAEtC;;;;;;;KAOC,GACDG,UAAU,CAACD,OAAOE,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,oBAAa,EAACP,OAAOE,MAAMC,MAAMC;QAC7D,IAAIC,QAAQ,OAAOC;QAEnB,MAAME,MAAMR;QAEZ,IAAIA,iBAAiBF,MAAM;YACvB,OAAOE;QACX,OAAO;YACH,MAAMS,OAAO,OAAOT;YAEpB,IAAIS,SAAS,UAAU;gBACnB,IAAIP,KAAKQ,MAAM,EAAE;oBACb,MAAMC,SAASC,cAAO,CAAC,iBAAiB;oBACxC,IAAI,CAACD,QAAQ;wBACT,MAAM,IAAIE,wBAAgB,CAAC,mCAAmC;oBAClE,CAAC;oBACDb,QAAQW,OAAOX,OAAO;wBAAEU,QAAQR,KAAKQ,MAAM;wBAAEI,UAAUX,MAAMW;oBAAS;gBAC1E,OAAO;oBACHd,QAAQ,IAAIF,KAAKE;gBACrB,CAAC;YACL,OAAO,IAAIS,SAAS,UAAU;gBAC1BT,QAAQ,IAAIF,KAAKE;YACrB,OAAO,IAAIA,MAAMe,QAAQ,EAAE;gBACvBf,QAAQA,MAAMe,QAAQ;YAC1B,CAAC;YAED,IAAIC,MAAMhB,QAAQ;gBACd,MAAM,IAAIiB,uBAAe,CAAC,2BAA2B;oBACjDjB,OAAOQ;oBACPN;oBACAC;oBACAC;gBACJ,GAAG;YACP,CAAC;QACL,CAAC;QAED,OAAOJ;IACX;IAEAkB,WAAW,CAAClB,QAAU;QAClB,OAAOA,OAAOmB;IAClB;AACJ"}