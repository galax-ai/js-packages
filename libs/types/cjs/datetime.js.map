{"version":3,"sources":["../datetime.js"],"sourcesContent":["import { Plugins, beginSanitize } from './types';\nimport { ValidationError, ApplicationError } from './errors';\n\nexport default {\n    name: 'datetime',\n    alias: ['date', 'time', 'timestamp'],\n    defaultValue: new Date(0),\n    validate: (value) => value instanceof Date,\n\n    /**\n     * Transform a value into a JavaScript Date object.\n     * @param {*} value\n     * @param {*} meta\n     * @param {*} i18n\n     * @param {string} [path]\n     * @returns {Date|null}\n     */\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n\n        if (value instanceof Date) {\n            return value;\n        } else {\n            const type = typeof value;\n\n            if (type === 'string') {\n                if (meta.format) {\n                    const parser = Plugins['datetimeParser'];\n                    if (!parser) {\n                        throw new ApplicationError('Missing datetime parser plugin.');\n                    }\n                    value = parser(value, { format: meta.format, timezone: i18n?.timezone });\n                } else {\n                    value = new Date(value);\n                }\n            } else if (type === 'number') {\n                value = new Date(value);\n            } else if (value.toJSDate) {\n                value = value.toJSDate();\n            }\n\n            if (isNaN(value)) {\n                throw new ValidationError('Invalid datetime value.', {\n                    value: raw,\n                    meta,\n                    i18n,\n                    path,\n                });\n            }\n        }\n\n        return value;\n    },\n\n    serialize: (value) => {\n        return value?.toISOString();\n    },\n};\n"],"names":["name","alias","defaultValue","Date","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","type","format","parser","Plugins","ApplicationError","timezone","toJSDate","isNaN","ValidationError","serialize","toISOString"],"mappings":"oGAGA,iDAAA,iCAHuC,iCACW,kBAElD,SAAe,CACXA,KAAM,WACNC,MAAO,CAAC,OAAQ,OAAQ,YAAY,CACpCC,aAAc,IAAIC,KAAK,GACvBC,SAAU,AAACC,OAAUA,iBAAiBF,KAUtCG,SAAU,CAACD,MAAOE,KAAMC,KAAMC,OAAS,CACnC,KAAM,CAACC,OAAQC,UAAU,CAAGC,GAAAA,oBAAa,EAACP,MAAOE,KAAMC,KAAMC,MAC7D,GAAIC,OAAQ,OAAOC,SAAU,CAE7B,MAAME,IAAMR,MAEZ,GAAIA,iBAAiBF,KAAM,CACvB,OAAOE,KACX,KAAO,CACH,MAAMS,KAAO,OAAOT,MAEpB,GAAIS,OAAS,SAAU,CACnB,GAAIP,KAAKQ,MAAM,CAAE,CACb,MAAMC,OAASC,cAAO,CAAC,iBAAiB,CACxC,GAAI,CAACD,OAAQ,CACT,MAAM,IAAIE,wBAAgB,CAAC,kCAAmC,AAClE,CAAC,AACDb,MAAQW,OAAOX,MAAO,CAAEU,OAAQR,KAAKQ,MAAM,CAAEI,SAAUX,MAAMW,QAAS,EAC1E,KAAO,CACHd,MAAQ,IAAIF,KAAKE,MACrB,CAAC,AACL,MAAO,GAAIS,OAAS,SAAU,CAC1BT,MAAQ,IAAIF,KAAKE,MACrB,MAAO,GAAIA,MAAMe,QAAQ,CAAE,CACvBf,MAAQA,MAAMe,QAAQ,EAC1B,CAAC,AAED,GAAIC,MAAMhB,OAAQ,CACd,MAAM,IAAIiB,uBAAe,CAAC,0BAA2B,CACjDjB,MAAOQ,IACPN,KACAC,KACAC,IACJ,EAAG,AACP,CAAC,AACL,CAAC,AAED,OAAOJ,KACX,EAEAkB,UAAW,AAAClB,OAAU,CAClB,OAAOA,OAAOmB,aAClB,CACJ"}