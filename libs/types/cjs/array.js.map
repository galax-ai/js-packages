{"version":3,"sources":["../lib/array.js"],"sourcesContent":["import { ValidationError } from './errors';\n\nimport csvLineParse from '@galaxar/utils/csvLineParse';\nimport arrayToCsv from '@galaxar/utils/arrayToCsv';\nimport { padLeft } from '@galaxar/utils/padding';\nimport batchAsync_ from '@galaxar/utils/batchAsync_';\n\nclass T_ARRAY {\n    name = 'array';\n    alias = ['list'];\n    primitive = true;\n    defaultValue = [];\n\n    constructor(system) {\n        this.system = system;\n    }\n\n    validate(value) {\n        return Array.isArray(value);\n    }\n\n    _sanitize(value, meta, opts) {\n        if (typeof value === 'string') {\n            if (meta.csv) {\n                value = csvLineParse(value, { delimiter: meta.delimiter || ',' });\n            } else {\n                const trimmed = value.trim();\n                if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                    value = JSON.parse(trimmed);\n                }\n            }\n        }\n\n        if (Array.isArray(value)) {\n            if (meta.elementSchema) {\n                const schema = typeof meta.elementSchema === 'function' ? meta.elementSchema() : meta.elementSchema;\n\n                return value.map((a, i) => this.system.sanitize(a, schema, opts.i18n, padLeft(`[${i}]`, opts.path)));\n            }\n\n            return value;\n        }\n\n        throw new ValidationError('Invalid array value.', {\n            value,\n            meta,\n            ...opts,\n        });\n    }\n\n    async _sanitizeAsync(value, meta, opts) {\n        if (typeof value === 'string') {\n            if (meta.csv) {\n                value = csvLineParse(value, { delimiter: meta.delimiter || ',' });\n            } else {\n                const trimmed = value.trim();\n                if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                    value = JSON.parse(trimmed);\n                }\n            }\n        }\n\n        if (Array.isArray(value)) {\n            if (meta.elementSchema) {\n                const schema = typeof meta.elementSchema === 'function' ? meta.elementSchema() : meta.elementSchema;\n\n                return batchAsync_(value, (a, i) => this.system.sanitize_(a, schema, opts.i18n, padLeft(`[${i}]`, opts.path)));\n            }\n\n            return value;\n        }\n\n        throw new ValidationError('Invalid array value.', {\n            value,\n            meta,\n            ...opts,\n        });\n    }\n\n    serialize(value, typeInfo) {\n        return value == null\n            ? null\n            : typeInfo?.csv\n            ? arrayToCsv(value, typeInfo?.delimiter, this.system.getStringifier())\n            : this.system.safeJsonStringify(value);\n    }\n}\n\nexport default T_ARRAY;\n"],"names":["T_ARRAY","validate","value","Array","isArray","_sanitize","meta","opts","csv","csvLineParse","delimiter","trimmed","trim","startsWith","endsWith","JSON","parse","elementSchema","schema","map","a","i","system","sanitize","i18n","padLeft","path","ValidationError","_sanitizeAsync","batchAsync_","sanitize_","serialize","typeInfo","arrayToCsv","getStringifier","safeJsonStringify","constructor","name","alias","primitive","defaultValue"],"mappings":"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"}