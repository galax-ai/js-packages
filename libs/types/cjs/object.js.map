{"version":3,"sources":["../object.js"],"sourcesContent":["import _each from 'lodash/each';\nimport { ValidationError } from './errors';\nimport { Types, safeJsonStringify, beginSanitize } from './types';\nimport { makePath } from '@galaxar/utils/objectPathUtils';\nimport isPlainObject from '@galaxar/utils/isPlainObject';\n\nconst jsonStarter = new Set(['\"', '[', '{']);\nconst jsonEnding = {\n    '\"': '\"',\n    '[': ']',\n    '{': '}',\n};\n\nexport default {\n    name: 'object',\n    alias: ['json'],\n    defaultValue: {},\n    validate: (value) => isPlainObject(value),\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        const type = typeof value;\n\n        if (type === 'string') {\n            if (value.length > 1 && jsonStarter.has(value[0]) && jsonEnding[value[0]] === value[value.length - 1]) {\n                value = JSON.parse(value);\n            }\n        }\n\n        if (meta.schema) {\n            if (typeof value !== 'object') {\n                throw new ValidationError('Invalid object value.', {\n                    value: raw,\n                    meta,\n                    i18n,\n                    path,\n                });\n            }\n\n            const schema = typeof meta.schema === 'function' ? meta.schema() : meta.schema;\n            const newValue = {};\n            _each(schema, (validationObject, fieldName) => {\n                const fieldValue = value[fieldName];\n                newValue[fieldName] = Types.sanitize(fieldValue, validationObject, i18n, makePath(path, fieldName));\n            });\n\n            if (meta.keepUnsanitized) {\n                return { ...value, ...newValue };\n            }\n\n            return newValue;\n        }\n\n        return value;\n    },\n\n    serialize: (value) => {\n        if (value == null) return null;\n        return safeJsonStringify(value);\n    },\n};\n"],"names":["jsonStarter","Set","jsonEnding","name","alias","defaultValue","validate","value","isPlainObject","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","type","length","has","JSON","parse","schema","ValidationError","newValue","_each","validationObject","fieldName","fieldValue","Types","makePath","keepUnsanitized","serialize","safeJsonStringify"],"mappings":"oGAaA,iDAAA,yDAbkB,sCACc,iCACwB,0CAC/B,wFACC,qHAE1B,MAAMA,YAAc,IAAIC,IAAI,CAAC,IAAK,IAAK,IAAI,EAC3C,MAAMC,WAAa,CACf,IAAK,IACL,IAAK,IACL,IAAK,GACT,QAEA,SAAe,CACXC,KAAM,SACNC,MAAO,CAAC,OAAO,CACfC,aAAc,CAAC,EACfC,SAAU,AAACC,OAAUC,GAAAA,sBAAa,EAACD,OACnCE,SAAU,CAACF,MAAOG,KAAMC,KAAMC,OAAS,CACnC,KAAM,CAACC,OAAQC,UAAU,CAAGC,GAAAA,oBAAa,EAACR,MAAOG,KAAMC,KAAMC,MAC7D,GAAIC,OAAQ,OAAOC,SAAU,CAE7B,MAAME,IAAMT,MACZ,MAAMU,KAAO,OAAOV,MAEpB,GAAIU,OAAS,SAAU,CACnB,GAAIV,MAAMW,MAAM,CAAG,GAAKlB,YAAYmB,GAAG,CAACZ,KAAK,CAAC,EAAE,GAAKL,UAAU,CAACK,KAAK,CAAC,EAAE,CAAC,GAAKA,KAAK,CAACA,MAAMW,MAAM,CAAG,EAAE,CAAE,CACnGX,MAAQa,KAAKC,KAAK,CAACd,MACvB,CAAC,AACL,CAAC,AAED,GAAIG,KAAKY,MAAM,CAAE,CACb,GAAI,OAAOf,QAAU,SAAU,CAC3B,MAAM,IAAIgB,uBAAe,CAAC,wBAAyB,CAC/ChB,MAAOS,IACPN,KACAC,KACAC,IACJ,EAAG,AACP,CAAC,AAED,MAAMU,OAAS,OAAOZ,KAAKY,MAAM,GAAK,WAAaZ,KAAKY,MAAM,GAAKZ,KAAKY,MAAM,CAC9E,MAAME,SAAW,CAAC,EAClBC,GAAAA,aAAK,EAACH,OAAQ,CAACI,iBAAkBC,YAAc,CAC3C,MAAMC,WAAarB,KAAK,CAACoB,UAAU,AACnCH,CAAAA,QAAQ,CAACG,UAAU,CAAGE,YAAK,CAACpB,QAAQ,CAACmB,WAAYF,iBAAkBf,KAAMmB,GAAAA,yBAAQ,EAAClB,KAAMe,WAC5F,GAEA,GAAIjB,KAAKqB,eAAe,CAAE,CACtB,MAAO,CAAE,GAAGxB,KAAK,CAAE,GAAGiB,QAAQ,AAAC,CACnC,CAAC,AAED,OAAOA,QACX,CAAC,AAED,OAAOjB,KACX,EAEAyB,UAAW,AAACzB,OAAU,CAClB,GAAIA,OAAS,IAAI,CAAE,OAAO,IAAI,AAAC,CAC/B,MAAO0B,GAAAA,wBAAiB,EAAC1B,MAC7B,CACJ"}