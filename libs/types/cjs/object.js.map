{"version":3,"sources":["../lib/object.js"],"sourcesContent":["import _each from 'lodash/each';\nimport _every from 'lodash/every';\nimport { ValidationError } from './errors';\nimport { makePath } from '@galaxar/utils/objectPathUtils';\nimport isPlainObject from '@galaxar/utils/isPlainObject';\nimport batchAsync_ from '@galaxar/utils/batchAsync_';\nimport findAsync_ from '@galaxar/utils/findAsync_';\n\nconst jsonStarter = new Set(['\"', '[', '{']);\nconst jsonEnding = {\n    '\"': '\"',\n    '[': ']',\n    '{': '}',\n};\n\nclass T_OBJECT {\n    name = 'object';\n    alias = ['json'];\n    primitive = true;\n    defaultValue = {};\n\n    _sanitizeMember = (value, opts, newValue) => (validationObject, fieldName) => {\n        const fieldValue = value[fieldName];\n        const fieldPath = makePath(opts.path, fieldName);\n\n        let _fieldValue;        \n\n        if (Array.isArray(validationObject)) {\n            const errors = [];\n            const foudMatched = validationObject.find(_validationObject => {\n                try {\n                    _fieldValue = this.system.sanitize(fieldValue, _validationObject, opts.i18n, fieldPath);\n                    return true;\n                } catch (error) {\n                    errors.push(ValidationError.extractFromError(error));\n                    return false;\n                }\n            });\n\n            if (foudMatched == null) {\n                throw new ValidationError('Object member schema validation failed.', {\n                    value: fieldValue,\n                    meta: validationObject,\n                    rawValue: opts.rawValue,\n                    i18n: opts.i18n,            \n                    path: fieldPath,\n                    errors\n                });\n            }\n        } else {\n            _fieldValue = this.system.sanitize(fieldValue, validationObject, opts.i18n, fieldPath);\n        }\n\n        if (_fieldValue != null || (fieldName in value)) {\n            newValue[fieldName] = _fieldValue;\n        }\n    };\n\n    _sanitizeMember_ = (value, opts, newValue) => async (validationObject, fieldName) => {\n        const fieldValue = value[fieldName];\n        const fieldPath = makePath(opts.path, fieldName);\n\n        let _fieldValue;        \n\n        if (Array.isArray(validationObject)) {\n            const errors = [];\n            const foudMatched = await findAsync_(validationObject, async _validationObject => {\n                try {\n                    _fieldValue = await this.system.sanitize_(fieldValue, _validationObject, opts.i18n, fieldPath);\n                    return true;\n                } catch (error) {\n                    errors.push(ValidationError.extractFromError(error));\n                    return false;\n                }\n            });\n\n            if (foudMatched == null) {\n                throw new ValidationError('Object member schema validation failed.', {\n                    value: fieldValue,\n                    meta: validationObject,\n                    rawValue: opts.rawValue,\n                    i18n: opts.i18n,            \n                    path: fieldPath,\n                    errors\n                });\n            }\n        } else {\n            _fieldValue = await this.system.sanitize_(fieldValue, validationObject, opts.i18n, fieldPath);\n        }\n\n        if (_fieldValue != null || fieldName in value) {\n            newValue[fieldName] = _fieldValue;\n        }\n    };\n\n    constructor(system) {\n        this.system = system;\n    }\n\n    validate(value) {\n        return isPlainObject(value);\n    }\n\n    _sanitize(value, meta, opts) {\n        const type = typeof value;\n\n        if (type === 'string') {\n            if (value.length > 1 && jsonStarter.has(value[0]) && jsonEnding[value[0]] === value[value.length - 1]) {\n                value = JSON.parse(value);\n            }\n        }\n\n        if (meta.schema) {\n            if (typeof value !== 'object') {\n                throw new ValidationError('Invalid object value.', {\n                    value,\n                    meta,\n                    rawValue: opts.rawValue,\n                    i18n: opts.i18n,\n                    path: opts.path,\n                });\n            }\n\n            let schema = typeof meta.schema === 'function' ? meta.schema() : meta.schema;\n            let newValue;\n\n            if (Array.isArray(schema)) {\n                const errors = [];\n                const pass = schema.find((altSchema) => {\n                    newValue = {};\n                    try {\n                        _each(altSchema, this._sanitizeMember(value, opts, newValue));                    \n                        return true;\n                    } catch (error) {\n                        errors.push(ValidationError.extractFromError(error));\n                        return false;\n                    }\n                });\n\n                if (pass == null) {\n                    throw new ValidationError('Object schema validation failed.', {\n                        value,\n                        meta,\n                        rawValue: opts.rawValue,\n                        i18n: opts.i18n,\n                        path: opts.path,\n                        errors\n                    });\n                }\n            } else {\n                newValue = {};\n                _each(schema, this._sanitizeMember(value, opts, newValue));\n            }\n\n            if (meta.keepUnsanitized) {\n                return { ...value, ...newValue };\n            }\n\n            return newValue;\n        }\n\n        return value;\n    }\n\n    async _sanitizeAsync(value, meta, opts) {\n        const type = typeof value;\n\n        if (type === 'string') {\n            if (value.length > 1 && jsonStarter.has(value[0]) && jsonEnding[value[0]] === value[value.length - 1]) {\n                value = JSON.parse(value);\n            }\n        }\n\n        if (meta.schema) {\n            if (typeof value !== 'object') {\n                throw new ValidationError('Invalid object value.', {\n                    value,\n                    meta,\n                    rawValue: opts.rawValue,\n                    i18n: opts.i18n,\n                    path: opts.path,\n                });\n            }\n\n            const schema = typeof meta.schema === 'function' ? meta.schema() : meta.schema;\n            let newValue;\n\n            if (Array.isArray(schema)) {\n                const errors = [];\n                const pass = await findAsync_(schema, async (altSchema) => {\n                    newValue = {};\n                    try {\n                        await batchAsync_(altSchema, this._sanitizeMember_(value, opts, newValue));                    \n                        return true;\n                    } catch (error) {\n                        errors.push(ValidationError.extractFromError(error));\n                        return false;\n                    }\n                });\n\n                if (pass == null) {\n                    throw new ValidationError('Object schema validation failed.', {\n                        value,\n                        meta,\n                        rawValue: opts.rawValue,\n                        i18n: opts.i18n,\n                        path: opts.path,\n                        errors\n                    });\n                }\n            } else {\n                newValue = {};\n                await batchAsync_(schema, this._sanitizeMember_(value, opts, newValue));\n            }\n\n            if (meta.keepUnsanitized) {\n                return { ...value, ...newValue };\n            }\n\n            return newValue;\n        }\n\n        return value;\n    }\n\n    serialize(value) {\n        if (value == null) return null;\n        return this.system.safeJsonStringify(value);\n    }\n};\n\nexport default T_OBJECT;\n"],"names":["jsonStarter","Set","jsonEnding","T_OBJECT","validate","value","isPlainObject","_sanitize","meta","opts","type","length","has","JSON","parse","schema","ValidationError","rawValue","i18n","path","newValue","Array","isArray","errors","pass","find","altSchema","_each","_sanitizeMember","error","push","extractFromError","keepUnsanitized","_sanitizeAsync","findAsync_","batchAsync_","_sanitizeMember_","serialize","system","safeJsonStringify","constructor","name","alias","primitive","defaultValue","validationObject","fieldName","fieldValue","fieldPath","makePath","_fieldValue","foudMatched","_validationObject","sanitize","sanitize_"],"mappings":"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"}