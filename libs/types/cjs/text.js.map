{"version":3,"sources":["../text.js"],"sourcesContent":["import { identity } from './functions';\nimport { ValidationError } from './errors';\nimport { beginSanitize } from './types';\n\nexport default {\n    name: 'text',\n    alias: ['string'],\n    defaultValue: '',\n    validate: value => typeof value === 'string',\n    sanitize: (value, meta, i18n, path) => {\n        const isString = typeof value === 'string';\n\n        if (isString && meta.trim) {\n            value = value.trim();\n        }\n\n        if (value === '' && meta.nonEmpty) {\n            value = null;\n        }\n\n        const [ isDone, sanitized ] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;        \n\n        if (!isString) {\n            throw new ValidationError('Invalid text value.', {\n                value,\n                meta,\n                i18n,\n                path\n            });\n        }\n\n        return value;\n    },\n\n    serialize: identity\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isString","trim","nonEmpty","isDone","sanitized","beginSanitize","ValidationError","serialize","identity"],"mappings":"oGAIA,iDAAA,qCAJyB,qCACO,iCACF,iBAE9B,SAAe,CACXA,KAAM,OACNC,MAAO,CAAC,SAAS,CACjBC,aAAc,GACdC,SAAUC,OAAS,OAAOA,QAAU,SACpCC,SAAU,CAACD,MAAOE,KAAMC,KAAMC,OAAS,CACnC,MAAMC,SAAW,OAAOL,QAAU,SAElC,GAAIK,UAAYH,KAAKI,IAAI,CAAE,CACvBN,MAAQA,MAAMM,IAAI,EACtB,CAAC,AAED,GAAIN,QAAU,IAAME,KAAKK,QAAQ,CAAE,CAC/BP,MAAQ,IAAI,AAChB,CAAC,AAED,KAAM,CAAEQ,OAAQC,UAAW,CAAGC,GAAAA,oBAAa,EAACV,MAAOE,KAAMC,KAAMC,MAC/D,GAAII,OAAQ,OAAOC,SAAU,CAE7B,GAAI,CAACJ,SAAU,CACX,MAAM,IAAIM,uBAAe,CAAC,sBAAuB,CAC7CX,MACAE,KACAC,KACAC,IACJ,EAAG,AACP,CAAC,AAED,OAAOJ,KACX,EAEAY,UAAWC,mBAAQ,AACvB"}