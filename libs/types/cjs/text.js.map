{"version":3,"sources":["../lib/text.js"],"sourcesContent":["import { identity } from './functions';\nimport { ValidationError } from './errors';\nimport { beginSanitize } from './types';\n\nexport default {\n    name: 'text',\n    alias: ['string'],\n    defaultValue: '',\n    validate: (value) => typeof value === 'string',\n    sanitize: (value, meta, i18n, path) => {\n        const isString = typeof value === 'string';\n\n        if (isString && meta.trim) {\n            value = value.trim();\n        }\n\n        if (value === '' && meta.nonEmpty) {\n            value = null;\n        }\n\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        if (!isString) {\n            throw new ValidationError('Invalid text value.', {\n                value,\n                meta,\n                i18n,\n                path,\n            });\n        }\n\n        return value;\n    },\n\n    serialize: identity,\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isString","trim","nonEmpty","isDone","sanitized","beginSanitize","ValidationError","serialize","identity"],"mappings":";;;;+BAIA;;;eAAA;;;2BAJyB;wBACO;uBACF;MAE9B,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;KAAS;IACjBC,cAAc;IACdC,UAAU,CAACC,QAAU,OAAOA,UAAU;IACtCC,UAAU,CAACD,OAAOE,MAAMC,MAAMC,OAAS;QACnC,MAAMC,WAAW,OAAOL,UAAU;QAElC,IAAIK,YAAYH,KAAKI,IAAI,EAAE;YACvBN,QAAQA,MAAMM,IAAI;QACtB,CAAC;QAED,IAAIN,UAAU,MAAME,KAAKK,QAAQ,EAAE;YAC/BP,QAAQ,IAAI;QAChB,CAAC;QAED,MAAM,CAACQ,QAAQC,UAAU,GAAGC,IAAAA,oBAAa,EAACV,OAAOE,MAAMC,MAAMC;QAC7D,IAAII,QAAQ,OAAOC;QAEnB,IAAI,CAACJ,UAAU;YACX,MAAM,IAAIM,uBAAe,CAAC,uBAAuB;gBAC7CX;gBACAE;gBACAC;gBACAC;YACJ,GAAG;QACP,CAAC;QAED,OAAOJ;IACX;IAEAY,WAAWC,mBAAQ;AACvB"}