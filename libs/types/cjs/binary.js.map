{"version":3,"sources":["../lib/binary.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport { beginSanitize } from './types';\n\nmodule.exports = {\n    name: 'binary',\n    alias: ['blob', 'buffer'],\n    defaultValue: null,\n    validate: (value) => value instanceof Buffer,\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        if (value instanceof Buffer) {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            return Buffer.from(value, meta.encoding || 'base64');\n        }\n\n        throw new ValidationError('Invalid binary value.', {\n            value,\n            meta,\n            i18n,\n            path,\n        });\n    },\n\n    serialize: (value, meta) => (value == null ? null : value.toString(meta.encoding || 'base64')),\n};\n"],"names":["module","exports","name","alias","defaultValue","validate","value","Buffer","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","from","encoding","ValidationError","serialize","toString"],"mappings":";;;;wBAAgC;uBACF;AAE9BA,OAAOC,OAAO,GAAG;IACbC,MAAM;IACNC,OAAO;QAAC;QAAQ;KAAS;IACzBC,cAAc,IAAI;IAClBC,UAAU,CAACC,QAAUA,iBAAiBC;IACtCC,UAAU,CAACF,OAAOG,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,oBAAa,EAACR,OAAOG,MAAMC,MAAMC;QAC7D,IAAIC,QAAQ,OAAOC;QAEnB,IAAIP,iBAAiBC,QAAQ;YACzB,OAAOD;QACX,CAAC;QAED,IAAI,OAAOA,UAAU,UAAU;YAC3B,OAAOC,OAAOQ,IAAI,CAACT,OAAOG,KAAKO,QAAQ,IAAI;QAC/C,CAAC;QAED,MAAM,IAAIC,uBAAe,CAAC,yBAAyB;YAC/CX;YACAG;YACAC;YACAC;QACJ,GAAG;IACP;IAEAO,WAAW,CAACZ,OAAOG,OAAUH,SAAS,IAAI,GAAG,IAAI,GAAGA,MAAMa,QAAQ,CAACV,KAAKO,QAAQ,IAAI,SAAS;AACjG"}