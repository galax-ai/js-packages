{"version":3,"sources":["../binary.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport { beginSanitize } from './types';\n\nmodule.exports = {\n    name: 'binary',\n    alias: ['blob', 'buffer'],\n    defaultValue: null,\n    validate: (value) => value instanceof Buffer,\n    sanitize: (value, meta, i18n, path) => {\n        const [ isDone, sanitized ] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        if (value instanceof Buffer) {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            return Buffer.from(value, meta.encoding || 'base64');\n        }\n\n        throw new ValidationError('Invalid binary value.', {\n            value,\n            meta,\n            i18n,\n            path\n        });\n    },\n\n    serialize: (value, meta) =>\n        value == null\n            ? null\n            : value.toString(meta.encoding || 'base64'),\n};\n"],"names":["module","exports","name","alias","defaultValue","validate","value","Buffer","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","from","encoding","ValidationError","serialize","toString"],"mappings":"4FAAgC,iCACF,UAE9BA,CAAAA,OAAOC,OAAO,CAAG,CACbC,KAAM,SACNC,MAAO,CAAC,OAAQ,SAAS,CACzBC,aAAc,IAAI,CAClBC,SAAU,AAACC,OAAUA,iBAAiBC,OACtCC,SAAU,CAACF,MAAOG,KAAMC,KAAMC,OAAS,CACnC,KAAM,CAAEC,OAAQC,UAAW,CAAGC,GAAAA,oBAAa,EAACR,MAAOG,KAAMC,KAAMC,MAC/D,GAAIC,OAAQ,OAAOC,SAAU,CAE7B,GAAIP,iBAAiBC,OAAQ,CACzB,OAAOD,KACX,CAAC,AAED,GAAI,OAAOA,QAAU,SAAU,CAC3B,OAAOC,OAAOQ,IAAI,CAACT,MAAOG,KAAKO,QAAQ,EAAI,SAC/C,CAAC,AAED,MAAM,IAAIC,uBAAe,CAAC,wBAAyB,CAC/CX,MACAG,KACAC,KACAC,IACJ,EAAG,AACP,EAEAO,UAAW,CAACZ,MAAOG,OACfH,OAAS,IAAI,CACP,IAAI,CACJA,MAAMa,QAAQ,CAACV,KAAKO,QAAQ,EAAI,SAAS,AACvD"}