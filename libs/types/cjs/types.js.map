{"version":3,"sources":["../lib/types.js"],"sourcesContent":["import { InvalidArgument, ValidationError, ApplicationError } from './errors';\n\nlet counter = 0;\n\nconst defaultTypeClasses = [];\nconst defaultPlugins = [];\n\nexport class TypeSystem {\n    primitives = new Set();\n    scalarTypes = new Set();\n    plugins = {};\n    types = {};\n    sanitize = this.callType('sanitize');\n    sanitize_ = this.callType('sanitize_');\n    serialize = this.callType('serialize');\n\n    constructor() {\n        this._counter = counter++;\n    }\n\n    static fromDefault() {\n        const ts = new TypeSystem();\n\n        defaultTypeClasses.forEach(({ name, TypeMeta }) => {\n            ts.addType(name, TypeMeta);\n        });\n\n        defaultPlugins.forEach(({ name, plugin }) => {\n            ts.addPlugin(name, plugin);\n        });\n\n        return ts;\n    }\n\n    addPlugin(name, plugin) {\n        this.plugins[name] = plugin;\n    }\n\n    removePlugin(name) {\n        delete this.plugins[name];\n    }\n\n    _addType(name, typeMeta) {\n        if (name in this.types) {\n            throw new ApplicationError(`Type \"${name}\" already exist.`, { name });\n        }\n\n        this.types[name] = typeMeta;\n        if (typeMeta.primitive) {\n            this.primitives.add(name);\n        }\n        if (typeMeta.scalar) {\n            this.scalarTypes.add(name);\n        }\n    }\n\n    addType(name, TypeMeta) {\n        const typeMeta = new TypeMeta(this);\n\n        typeMeta.sanitize = (value, meta, i18n, path) => {\n            meta = { type: typeMeta.name, ...meta };\n            const opts = { rawValue: value, i18n, path };\n            const [isDone, sanitized] = this.beginSanitize(value, meta, opts);\n            return this.endSanitize(isDone ? sanitized : typeMeta._sanitize(value, meta, opts), meta, opts);\n        };\n\n        typeMeta.sanitize_ = async (value, meta, i18n, path) => {\n            meta = { type: typeMeta.name, ...meta };\n            const opts = { rawValue: value, i18n, path };\n            const [isDone, sanitized] = await this.beginSanitize(value, meta, opts);\n            return this.endSanitize(\n                isDone\n                    ? sanitized\n                    : typeMeta._sanitizeAsync\n                    ? await typeMeta._sanitizeAsync(value, meta, opts)\n                    : typeMeta._sanitize(value, meta, opts),\n                meta,\n                opts\n            );\n        };\n\n        this._addType(name, typeMeta);\n        this._addType(typeMeta.name, typeMeta);\n\n        typeMeta.alias?.forEach((a) => {\n            this._addType(a, typeMeta);\n        });\n    }\n\n    callType(method) {\n        return (value, typeInfo, i18n, fieldPath) => {\n            if (!this.primitives.has(typeInfo.type)) {\n                throw new InvalidArgument(`Unsupported primitive type: \"${typeInfo.type}\".`);\n            }\n\n            const typeObject = this.types[typeInfo.type];            \n            return typeObject[method](value, typeInfo, i18n, fieldPath);\n        };\n    }\n\n    safeJsonStringify(value) {\n        const bigintWriter = this.plugins['bigintWriter'];\n        if (bigintWriter) {\n            const replacer = (_, value) => (typeof value === 'bigint' ? bigintWriter(value) : value);\n\n            return JSON.stringify(value, replacer);\n        }\n\n        return JSON.stringify(value);\n    }\n\n    getStringifier() {\n        const bigintWriter = this.plugins['bigintWriter'];\n        if (bigintWriter) {\n            return (value) => (typeof value === 'bigint' ? bigintWriter(value) : value.toString());\n        }\n\n        return null;\n    }\n\n    beginSanitize(value, meta, opts) {\n        if (value == null) {\n            if (meta.default != null) {\n                return [true, meta.default];\n            } else if (meta.optional) {\n                return [true, null];\n            }\n\n            throw new ValidationError('Value ' + (opts.path ? `of \"${opts.path}\" ` : '') + 'is required.', {\n                value,\n                meta,\n                ...opts,\n            });\n        }\n\n        if (meta.rawValue) return [true, value];\n\n        // more prerequisites here ...\n        if (this.plugins.preProcess) {\n            return this.plugins.preProcess(value, meta, opts);\n        }\n\n        return [false];\n    }\n\n    endSanitize(value, meta, opts) {\n        if (this.scalarTypes.has(meta.type)) {\n            this.verifyEnum(value, meta, opts);\n        }\n\n        if (this.plugins.postProcess) {\n            return this.plugins.postProcess(value, meta, opts);\n        }\n\n        return value;\n    }\n\n    verifyEnum(value, meta, opts) {\n        if (meta.enum && !meta.enum.includes(value)) {\n            throw new ValidationError('Invalid enum value.', {\n                value,\n                meta,\n                ...opts,\n            });\n        }\n    }\n}\n\nconst defaultTypeSystem = new TypeSystem();\n\nexport const addType = (name, TypeMeta) => {\n    defaultTypeSystem.addType(name, TypeMeta);\n    defaultTypeClasses.push({ name, TypeMeta });\n};\n\nexport const addPlugin = (name, plugin) => {\n    defaultTypeSystem.addPlugin(name, plugin);\n    defaultPlugins.push({ name, plugin });\n};\n\nexport const createTypeSystem = (emptySystem) => {\n    return emptySystem ? new TypeSystem() : TypeSystem.fromDefault();\n};\n\nexport const Types = defaultTypeSystem.types;\n\n// compatibility\nTypes.sanitize = defaultTypeSystem.sanitize.bind(defaultTypeSystem);\nTypes.sanitize_ = defaultTypeSystem.sanitize_.bind(defaultTypeSystem);\nTypes.serialize = defaultTypeSystem.serialize.bind(defaultTypeSystem);\nTypes.primitives = defaultTypeSystem.primitives;\n\nexport default defaultTypeSystem;\n"],"names":["TypeSystem","addType","addPlugin","createTypeSystem","Types","counter","defaultTypeClasses","defaultPlugins","fromDefault","ts","forEach","name","TypeMeta","plugin","plugins","removePlugin","_addType","typeMeta","types","ApplicationError","primitive","primitives","add","scalar","scalarTypes","sanitize","value","meta","i18n","path","type","opts","rawValue","isDone","sanitized","beginSanitize","endSanitize","_sanitize","sanitize_","_sanitizeAsync","alias","a","callType","method","typeInfo","fieldPath","has","InvalidArgument","typeObject","safeJsonStringify","bigintWriter","replacer","_","JSON","stringify","getStringifier","toString","default","optional","ValidationError","preProcess","verifyEnum","postProcess","enum","includes","constructor","Set","serialize","_counter","defaultTypeSystem","push","emptySystem","bind"],"mappings":"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"}