{"version":3,"sources":["../lib/bigint.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport { Plugins, beginSanitize } from './types';\n\nexport default {\n    name: 'bigint',\n    alias: ['biginteger'],\n    defaultValue: 0n,\n    validate: (value) => typeof value === 'bigint',\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        try {\n            value = BigInt(value);\n        } catch (e) {\n            throw new ValidationError(\n                'Invalid bigint value.',\n                {\n                    value: raw,\n                    meta,\n                    i18n,\n                    path,\n                },\n                e\n            );\n        }\n\n        return value;\n    },\n\n    serialize: (value) =>\n        value == null ? null : Plugins['bigintWriter'] ? Plugins['bigintWriter'](value) : value.toString(),\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","BigInt","e","ValidationError","serialize","Plugins","toString"],"mappings":";;;;+BAGA;;;eAAA;;;wBAHgC;uBACO;MAEvC,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;KAAa;IACrBC,cAAc,EAAE;IAChBC,UAAU,CAACC,QAAU,OAAOA,UAAU;IACtCC,UAAU,CAACD,OAAOE,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,oBAAa,EAACP,OAAOE,MAAMC,MAAMC;QAC7D,IAAIC,QAAQ,OAAOC;QAEnB,MAAME,MAAMR;QACZ,IAAI;YACAA,QAAQS,OAAOT;QACnB,EAAE,OAAOU,GAAG;YACR,MAAM,IAAIC,uBAAe,CACrB,yBACA;gBACIX,OAAOQ;gBACPN;gBACAC;gBACAC;YACJ,GACAM,GACF;QACN;QAEA,OAAOV;IACX;IAEAY,WAAW,CAACZ,QACRA,SAAS,IAAI,GAAG,IAAI,GAAGa,cAAO,CAAC,eAAe,GAAGA,cAAO,CAAC,eAAe,CAACb,SAASA,MAAMc,QAAQ,EAAE;AAC1G"}