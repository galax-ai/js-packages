{"version":3,"sources":["../bigint.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport { Plugins, beginSanitize } from './types';\n\nexport default {\n    name: 'bigint',\n    alias: ['biginteger'],\n    defaultValue: 0n,\n    validate: value => typeof value === 'bigint',\n    sanitize: (value, meta, i18n, path) => {\n        const [ isDone, sanitized ] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        try {\n            value = BigInt(value);\n        } catch (e) {\n            throw new ValidationError('Invalid bigint value.', {\n                value: raw,\n                meta,\n                i18n,\n                path\n            }, e);\n        }\n\n        return value;\n    },\n\n    serialize: (value) => value == null ? null : (Plugins['bigintWriter'] ? Plugins['bigintWriter'](value) : value.toString()),\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","BigInt","e","ValidationError","serialize","Plugins","toString"],"mappings":";;;;+BAGA;;;eAAA;;;wBAHgC;uBACO;MAEvC,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;KAAa;IACrBC,cAAc,EAAE;IAChBC,UAAUC,CAAAA,QAAS,OAAOA,UAAU;IACpCC,UAAU,CAACD,OAAOE,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAAEC,QAAQC,UAAW,GAAGC,IAAAA,oBAAa,EAACP,OAAOE,MAAMC,MAAMC;QAC/D,IAAIC,QAAQ,OAAOC;QAEnB,MAAME,MAAMR;QACZ,IAAI;YACAA,QAAQS,OAAOT;QACnB,EAAE,OAAOU,GAAG;YACR,MAAM,IAAIC,uBAAe,CAAC,yBAAyB;gBAC/CX,OAAOQ;gBACPN;gBACAC;gBACAC;YACJ,GAAGM,GAAG;QACV;QAEA,OAAOV;IACX;IAEAY,WAAW,CAACZ,QAAUA,SAAS,IAAI,GAAG,IAAI,GAAIa,cAAO,CAAC,eAAe,GAAGA,cAAO,CAAC,eAAe,CAACb,SAASA,MAAMc,QAAQ,EAAE,AAAC;AAC9H"}