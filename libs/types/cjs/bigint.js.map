{"version":3,"sources":["../bigint.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport { Plugins, beginSanitize } from './types';\n\nexport default {\n    name: 'bigint',\n    alias: ['biginteger'],\n    defaultValue: 0n,\n    validate: value => typeof value === 'bigint',\n    sanitize: (value, meta, i18n, path) => {\n        const [ isDone, sanitized ] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        try {\n            value = BigInt(value);\n        } catch (e) {\n            throw new ValidationError('Invalid bigint value.', {\n                value: raw,\n                meta,\n                i18n,\n                path\n            }, e);\n        }\n\n        return value;\n    },\n\n    serialize: (value) => value == null ? null : (Plugins['bigintWriter'] ? Plugins['bigintWriter'](value) : value.toString()),\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","BigInt","e","ValidationError","serialize","Plugins","toString"],"mappings":"oGAGA,iDAAA,kCAHgC,iCACO,iBAEvC,SAAe,CACXA,KAAM,SACNC,MAAO,CAAC,aAAa,CACrBC,aAAc,CAAE,AAAF,CAAE,CAChBC,SAAUC,OAAS,OAAOA,QAAU,SACpCC,SAAU,CAACD,MAAOE,KAAMC,KAAMC,OAAS,CACnC,KAAM,CAAEC,OAAQC,UAAW,CAAGC,GAAAA,oBAAa,EAACP,MAAOE,KAAMC,KAAMC,MAC/D,GAAIC,OAAQ,OAAOC,SAAU,CAE7B,MAAME,IAAMR,MACZ,GAAI,CACAA,MAAQS,OAAOT,MACnB,CAAE,MAAOU,EAAG,CACR,MAAM,IAAIC,uBAAe,CAAC,wBAAyB,CAC/CX,MAAOQ,IACPN,KACAC,KACAC,IACJ,EAAGM,EAAG,AACV,CAEA,OAAOV,KACX,EAEAY,UAAW,AAACZ,OAAUA,OAAS,IAAI,CAAG,IAAI,CAAIa,cAAO,CAAC,eAAe,CAAGA,cAAO,CAAC,eAAe,CAACb,OAASA,MAAMc,QAAQ,EAAE,AAAC,AAC9H"}