{"version":3,"sources":["../lib/number.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport toFloat from '@galaxar/utils/toFloat';\nimport { identity } from './functions';\nimport { beginSanitize } from './types';\n\nexport default {\n    name: 'number',\n    alias: ['float', 'double'],\n    defaultValue: 0,\n    validate: (value) => typeof value === 'number',\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        value = toFloat(value);\n\n        if (isNaN(value)) {\n            throw new ValidationError('Invalid number value.', {\n                value: raw,\n                meta,\n                i18n,\n                path,\n            });\n        }\n\n        return value;\n    },\n\n    serialize: identity,\n};\n"],"names":["name","alias","defaultValue","validate","value","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","toFloat","isNaN","ValidationError","serialize","identity"],"mappings":";;;;+BAKA;;;eAAA;;;wBALgC;gEACZ;2BACK;uBACK;;;;;;MAE9B,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;QAAS;KAAS;IAC1BC,cAAc;IACdC,UAAU,CAACC,QAAU,OAAOA,UAAU;IACtCC,UAAU,CAACD,OAAOE,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,oBAAa,EAACP,OAAOE,MAAMC,MAAMC;QAC7D,IAAIC,QAAQ,OAAOC;QAEnB,MAAME,MAAMR;QACZA,QAAQS,IAAAA,gBAAO,EAACT;QAEhB,IAAIU,MAAMV,QAAQ;YACd,MAAM,IAAIW,uBAAe,CAAC,yBAAyB;gBAC/CX,OAAOQ;gBACPN;gBACAC;gBACAC;YACJ,GAAG;QACP,CAAC;QAED,OAAOJ;IACX;IAEAY,WAAWC,mBAAQ;AACvB"}