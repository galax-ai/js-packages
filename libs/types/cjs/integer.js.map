{"version":3,"sources":["../integer.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport toInteger from '@galaxar/utils/toInteger';\nimport { identity } from './functions';\nimport { beginSanitize } from './types';\n\nexport default {\n    name: 'integer',\n    alias: ['int'],\n    defaultValue: 0,\n    validate: (value) => typeof value === 'number' && Number.isInteger(value),\n    sanitize: (value, meta, i18n, path) => {\n        const [isDone, sanitized] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        value = toInteger(value);\n\n        if (isNaN(value)) {\n            throw new ValidationError('Invalid integer value.', {\n                value: raw,\n                meta,\n                i18n,\n                path,\n            });\n        }\n\n        return value;\n    },\n\n    serialize: identity,\n};\n"],"names":["name","alias","defaultValue","validate","value","Number","isInteger","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","toInteger","isNaN","ValidationError","serialize","identity"],"mappings":"oGAKA,iDAAA,kCALgC,8DACV,sDACG,oCACK,qGAE9B,SAAe,CACXA,KAAM,UACNC,MAAO,CAAC,MAAM,CACdC,aAAc,EACdC,SAAU,AAACC,OAAU,OAAOA,QAAU,UAAYC,OAAOC,SAAS,CAACF,OACnEG,SAAU,CAACH,MAAOI,KAAMC,KAAMC,OAAS,CACnC,KAAM,CAACC,OAAQC,UAAU,CAAGC,GAAAA,oBAAa,EAACT,MAAOI,KAAMC,KAAMC,MAC7D,GAAIC,OAAQ,OAAOC,SAAU,CAE7B,MAAME,IAAMV,MACZA,MAAQW,GAAAA,kBAAS,EAACX,OAElB,GAAIY,MAAMZ,OAAQ,CACd,MAAM,IAAIa,uBAAe,CAAC,yBAA0B,CAChDb,MAAOU,IACPN,KACAC,KACAC,IACJ,EAAG,AACP,CAAC,AAED,OAAON,KACX,EAEAc,UAAWC,mBAAQ,AACvB"}