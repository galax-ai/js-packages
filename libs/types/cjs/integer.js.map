{"version":3,"sources":["../integer.js"],"sourcesContent":["import { ValidationError } from './errors';\nimport toInteger from \"@galaxar/utils/toInteger\";\nimport { identity } from \"./functions\";\nimport { beginSanitize } from './types';\n\nexport default {\n    name: 'integer',\n    alias: ['int'],\n    defaultValue: 0,\n    validate: value => typeof value === 'number' && Number.isInteger(value),\n    sanitize: (value, meta, i18n, path) => {\n        const [ isDone, sanitized ] = beginSanitize(value, meta, i18n, path);\n        if (isDone) return sanitized;\n\n        const raw = value;\n        value = toInteger(value);\n\n        if (isNaN(value)) {\n            throw new ValidationError('Invalid integer value.', {\n                value: raw,\n                meta,\n                i18n,\n                path\n            });\n        }\n\n        return value;\n    },\n\n    serialize: identity,\n};\n"],"names":["name","alias","defaultValue","validate","value","Number","isInteger","sanitize","meta","i18n","path","isDone","sanitized","beginSanitize","raw","toInteger","isNaN","ValidationError","serialize","identity"],"mappings":";;;;+BAKA;;;eAAA;;;wBALgC;kEACV;2BACG;uBACK;;;;;;MAE9B,WAAe;IACXA,MAAM;IACNC,OAAO;QAAC;KAAM;IACdC,cAAc;IACdC,UAAUC,CAAAA,QAAS,OAAOA,UAAU,YAAYC,OAAOC,SAAS,CAACF;IACjEG,UAAU,CAACH,OAAOI,MAAMC,MAAMC,OAAS;QACnC,MAAM,CAAEC,QAAQC,UAAW,GAAGC,IAAAA,oBAAa,EAACT,OAAOI,MAAMC,MAAMC;QAC/D,IAAIC,QAAQ,OAAOC;QAEnB,MAAME,MAAMV;QACZA,QAAQW,IAAAA,kBAAS,EAACX;QAElB,IAAIY,MAAMZ,QAAQ;YACd,MAAM,IAAIa,uBAAe,CAAC,0BAA0B;gBAChDb,OAAOU;gBACPN;gBACAC;gBACAC;YACJ,GAAG;QACP,CAAC;QAED,OAAON;IACX;IAEAc,WAAWC,mBAAQ;AACvB"}