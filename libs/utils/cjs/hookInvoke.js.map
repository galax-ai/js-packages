{"version":3,"sources":["../hookInvoke.js"],"sourcesContent":["/**\n * Add hooks before an object's method is being called and after.\n * @alias lang.hookInvoke\n * @param {*} obj\n * @param {*} onCalling - Before hook\n * @param {*} onCalled - After hook\n * @returns {Object} The hooked object\n */\nconst hookInvoke = (obj, onCalling, onCalled) =>\n    new Proxy(obj, {\n        get(target, propKey /*, receiver*/) {\n            const origMethod = target[propKey];\n            if (typeof origMethod === 'function') {\n                return function (...args) {\n                    onCalling && Promise.resolve(onCalling(obj, { name: propKey, args }));\n                    let returned = origMethod.apply(target, args);\n                    onCalled &&\n                        Promise.resolve(returned)\n                            .then((returned) => Promise.resolve(onCalled(obj, { name: propKey, returned })))\n                            .catch();\n                    return returned;\n                };\n            }\n\n            return origMethod;\n        },\n    });\n\nexport default hookInvoke;\n"],"names":["hookInvoke","obj","onCalling","onCalled","Proxy","get","target","propKey","origMethod","args","Promise","resolve","name","returned","apply","then","catch"],"mappings":"oGA4BA,iDAAA,YApBA,MAAMA,WAAa,CAACC,IAAKC,UAAWC,WAChC,IAAIC,MAAMH,IAAK,CACXI,IAAIC,MAAM,CAAEC,OAAO,CAAiB,CAChC,MAAMC,WAAaF,MAAM,CAACC,QAAQ,CAClC,GAAI,OAAOC,aAAe,WAAY,CAClC,OAAO,SAAU,GAAGC,IAAI,CAAE,CACtBP,WAAaQ,QAAQC,OAAO,CAACT,UAAUD,IAAK,CAAEW,KAAML,QAASE,IAAK,IAClE,IAAII,SAAWL,WAAWM,KAAK,CAACR,OAAQG,KACxCN,CAAAA,UACIO,QAAQC,OAAO,CAACE,UACXE,IAAI,CAAC,AAACF,UAAaH,QAAQC,OAAO,CAACR,SAASF,IAAK,CAAEW,KAAML,QAASM,QAAS,KAC3EG,KAAK,GACd,OAAOH,QACX,CACJ,CAAC,AAED,OAAOL,UACX,CACJ,SAEJ,SAAeR"}