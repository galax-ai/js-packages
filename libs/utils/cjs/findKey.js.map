{"version":3,"sources":["../findKey.js"],"sourcesContent":["import isPlainObject from './isPlainObject';\n\n/**\n * Iterate a collection until predicate returns true\n * The returned value is undefined if not found.\n * That's different from the _.find() function in lodash.\n * @alias collection.findKey\n * @param {Array|Object} obj\n * @param {iterator} predicate\n * @returns {Promise.<Object|undefined>}\n */\nfunction findKey(obj, predicate) {\n    if (Array.isArray(obj)) {\n        let l = obj.length;\n        for (let i = 0; i < l; i++) {\n            const el = obj[i];\n            if (predicate(el, i, obj)) {\n                return i;\n            }\n        }\n\n        return undefined;\n    } else if (isPlainObject(obj)) {\n        for (let k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                const el = obj[k];\n                if (predicate(el, k, obj)) {\n                    return k;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    throw new Error('The first argument should be a collection.');\n}\n\nexport default findKey;\n"],"names":["findKey","obj","predicate","Array","isArray","l","length","i","el","undefined","isPlainObject","k","Object","prototype","hasOwnProperty","call","Error"],"mappings":"oGAsCA,iDAAA,kEAtC0B,wGAW1B,SAASA,QAAQC,GAAG,CAAEC,SAAS,CAAE,CAC7B,GAAIC,MAAMC,OAAO,CAACH,KAAM,CACpB,IAAII,EAAIJ,IAAIK,MAAM,CAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,MAAMC,GAAKP,GAAG,CAACM,EAAE,CACjB,GAAIL,UAAUM,GAAID,EAAGN,KAAM,CACvB,OAAOM,CACX,CAAC,AACL,CAEA,OAAOE,SACX,MAAO,GAAIC,GAAAA,sBAAa,EAACT,KAAM,CAC3B,IAAK,IAAIU,KAAKV,IAAK,CACf,GAAIW,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACd,IAAKU,GAAI,CAC9C,MAAMH,GAAKP,GAAG,CAACU,EAAE,CACjB,GAAIT,UAAUM,GAAIG,EAAGV,KAAM,CACvB,OAAOU,CACX,CAAC,AACL,CAAC,AACL,CAEA,OAAOF,SACX,CAAC,AAED,MAAM,IAAIO,MAAM,6CAA8C,AAClE,OAEA,SAAehB"}