{"version":3,"sources":["../isInteger.js"],"sourcesContent":["const regexInt = /^(\\+|-)?\\d+$/;\nconst regexPos = /^\\+?[1-9]\\d*$/;\nconst regexIndex = /^0$|^([1-9]\\d*)$/;\nconst regexNeg = /^-[1-9]\\d*$/;\nconst regexNonZero = /^(\\+|-)?[1-9]\\d*$/;\n\nexport const RANGE_POSITIVE = 'positive';\nexport const RANGE_NEGATIVE = 'negative';\nexport const RANGE_INDEX = 'index';\nexport const RANGE_NON_ZERO = 'nonZero';\n\nconst mapRegex = {\n    [RANGE_POSITIVE]: regexPos,\n    [RANGE_INDEX]: regexIndex,\n    [RANGE_NEGATIVE]: regexNeg,\n    [RANGE_NON_ZERO]: regexNonZero,\n};\n\n/**\n * Check a number or string whether it is exactly an integer\n * @param {*} value\n * @returns {boolean}\n */\nconst isInteger = (value, options) => {\n    options = { range: 'all', ...options };\n    const type = typeof value;\n\n    if (type === 'number') {\n        return Number.isInteger(value);\n    } else if (type === 'string') {\n        value = value.trim();\n\n        const regex = mapRegex[options.range] || regexInt;\n        if (regex.test(value)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport default isInteger;\n"],"names":["RANGE_POSITIVE","RANGE_NEGATIVE","RANGE_INDEX","RANGE_NON_ZERO","regexInt","regexPos","regexIndex","regexNeg","regexNonZero","mapRegex","isInteger","value","options","range","type","Number","trim","regex","test"],"mappings":"2MAMaA,cAAc,mBAAdA,gBACAC,cAAc,mBAAdA,gBACAC,WAAW,mBAAXA,aACAC,cAAc,mBAAdA,gBAgCb,OAAyB,mBAAzB,YAzCA,MAAMC,SAAW,eACjB,MAAMC,SAAW,gBACjB,MAAMC,WAAa,mBACnB,MAAMC,SAAW,cACjB,MAAMC,aAAe,oBAEd,MAAMR,eAAiB,WACvB,MAAMC,eAAiB,WACvB,MAAMC,YAAc,QACpB,MAAMC,eAAiB,UAE9B,MAAMM,SAAW,CACb,CAACT,eAAe,CAAEK,SAClB,CAACH,YAAY,CAAEI,WACf,CAACL,eAAe,CAAEM,SAClB,CAACJ,eAAe,CAAEK,YACtB,EAOA,MAAME,UAAY,CAACC,MAAOC,UAAY,CAClCA,QAAU,CAAEC,MAAO,MAAO,GAAGD,OAAO,AAAC,EACrC,MAAME,KAAO,OAAOH,MAEpB,GAAIG,OAAS,SAAU,CACnB,OAAOC,OAAOL,SAAS,CAACC,MAC5B,MAAO,GAAIG,OAAS,SAAU,CAC1BH,MAAQA,MAAMK,IAAI,GAElB,MAAMC,MAAQR,QAAQ,CAACG,QAAQC,KAAK,CAAC,EAAIT,SACzC,GAAIa,MAAMC,IAAI,CAACP,OAAQ,CACnB,OAAO,IAAI,AACf,CAAC,AACL,CAAC,AAED,OAAO,KAAK,AAChB,QAEA,SAAeD"}