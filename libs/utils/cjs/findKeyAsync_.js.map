{"version":3,"sources":["../findKeyAsync_.js"],"sourcesContent":["import isPlainObject from './isPlainObject';\n\n/**\n * Iterate a collection asynchronously until predicate returns true\n * The returned value is undefined if not found.\n * That's different from the _.find() function in lodash.\n * @alias collection.findKeyAsync_\n * @async\n * @param {Array|Object} obj\n * @param {asyncIterator} asyncPredicate_\n * @returns {Promise.<Object|undefined>}\n */\nasync function findKeyAsync_(obj, asyncPredicate_) {\n    if (Array.isArray(obj)) {\n        let l = obj.length;\n        for (let i = 0; i < l; i++) {\n            const el = obj[i];\n            if (await asyncPredicate_(el, i, obj)) {\n                return i;\n            }\n        }\n\n        return undefined;\n    } else if (isPlainObject(obj)) {\n        for (let k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                const el = obj[k];\n                if (await asyncPredicate_(el, k, obj)) {\n                    return k;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    return Promise.reject('The first argument should be a collection.');\n}\n\nexport default findKeyAsync_;\n"],"names":["findKeyAsync_","obj","asyncPredicate_","Array","isArray","l","length","i","el","undefined","isPlainObject","k","Object","prototype","hasOwnProperty","call","Promise","reject"],"mappings":"oGAuCA,iDAAA,kEAvC0B,wGAY1B,eAAeA,cAAcC,GAAG,CAAEC,eAAe,CAAE,CAC/C,GAAIC,MAAMC,OAAO,CAACH,KAAM,CACpB,IAAII,EAAIJ,IAAIK,MAAM,CAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,MAAMC,GAAKP,GAAG,CAACM,EAAE,CACjB,GAAI,MAAML,gBAAgBM,GAAID,EAAGN,KAAM,CACnC,OAAOM,CACX,CAAC,AACL,CAEA,OAAOE,SACX,MAAO,GAAIC,GAAAA,sBAAa,EAACT,KAAM,CAC3B,IAAK,IAAIU,KAAKV,IAAK,CACf,GAAIW,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACd,IAAKU,GAAI,CAC9C,MAAMH,GAAKP,GAAG,CAACU,EAAE,CACjB,GAAI,MAAMT,gBAAgBM,GAAIG,EAAGV,KAAM,CACnC,OAAOU,CACX,CAAC,AACL,CAAC,AACL,CAEA,OAAOF,SACX,CAAC,AAED,OAAOO,QAAQC,MAAM,CAAC,6CAC1B,OAEA,SAAejB"}