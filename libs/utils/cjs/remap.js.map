{"version":3,"sources":["../remap.js"],"sourcesContent":["import _each from 'lodash/each';\n\n/**\n * Remap the keys of object elements in an array, like projection.\n * @alias object.remap\n * @param {*} object\n * @param {Object} mapping - key to newKey or key to array[ newKey, valueMap ] for next level mapping\n * @param {boolean} keepUnmapped - If true, will keep those not in mapping as its original key, otherwise filter out\n * @returns {Object} Remapped object\n */\nfunction remap(object, mapping, keepUnmapped) {\n    if (typeof mapping === 'string') return { [mapping]: object };\n\n    let newObj = {};\n    _each(object, (v, k) => {\n        /* eslint-disable no-prototype-builtins */\n        if (mapping.hasOwnProperty(k)) {\n            /* eslint-enable no-prototype-builtins */\n            let nk = mapping[k];\n            if (Array.isArray(nk)) {\n                newObj[nk[0]] = {\n                    ...newObj[nk[0]],\n                    ...remap(v, nk[1], keepUnmapped),\n                };\n            } else {\n                newObj[nk] = v;\n            }\n        } else {\n            if (keepUnmapped) {\n                newObj[k] = v;\n            }\n        }\n    });\n\n    return newObj;\n}\n\nexport default remap;\n"],"names":["remap","object","mapping","keepUnmapped","newObj","_each","v","k","hasOwnProperty","nk","Array","isArray"],"mappings":"oGAqCA,iDAAA,yDArCkB,oGAUlB,SAASA,MAAMC,MAAM,CAAEC,OAAO,CAAEC,YAAY,CAAE,CAC1C,GAAI,OAAOD,UAAY,SAAU,MAAO,CAAE,CAACA,QAAQ,CAAED,MAAO,CAAE,CAE9D,IAAIG,OAAS,CAAC,EACdC,GAAAA,aAAK,EAACJ,OAAQ,CAACK,EAAGC,IAAM,CAEpB,GAAIL,QAAQM,cAAc,CAACD,GAAI,CAE3B,IAAIE,GAAKP,OAAO,CAACK,EAAE,CACnB,GAAIG,MAAMC,OAAO,CAACF,IAAK,CACnBL,MAAM,CAACK,EAAE,CAAC,EAAE,CAAC,CAAG,CACZ,GAAGL,MAAM,CAACK,EAAE,CAAC,EAAE,CAAC,CAChB,GAAGT,MAAMM,EAAGG,EAAE,CAAC,EAAE,CAAEN,aAAa,AACpC,CACJ,KAAO,CACHC,MAAM,CAACK,GAAG,CAAGH,CACjB,CAAC,AACL,KAAO,CACH,GAAIH,aAAc,CACdC,MAAM,CAACG,EAAE,CAAGD,CAChB,CAAC,AACL,CAAC,AACL,GAEA,OAAOF,MACX,OAEA,SAAeJ"}