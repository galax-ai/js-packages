{"version":3,"sources":["../src/prisma.js"],"sourcesContent":["import path from 'node:path';\nimport { Feature } from '@galaxar/app';\nimport { _, esmCheck, pascalCase, unexistDelegate } from '@galaxar/utils';\nimport { PrismaClient } from '@prisma/client';\n\nconst prismsHelper = {\n    $pushQuery: (where, query) => {\n        let { AND, ..._where } = where;\n\n        _.each(query, (value, key) => {\n            const existing = _where[key];\n            if (typeof existing !== 'undefined') {\n                if (!AND) {\n                    AND = [];\n                } else {\n                    AND = [...AND];\n                }\n\n                delete _where[key];\n                AND.push({ [key]: existing });\n                AND.push({\n                    [key]: value,\n                });\n            } else {\n                _where[key] = value;\n            }\n        });\n\n        if (AND) {\n            _where.AND = AND;\n        }\n\n        return _where;\n    },\n    $pushOrQuery: (where, query) => {\n        if (!where.OR) {\n            where = {\n                OR: [where],\n            };\n        } else {\n            where = {\n                OR: [...where.OR],\n            };\n        }\n\n        where.OR.push(query);\n        return where;\n    },\n};\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { modelPath, ...prismaOptions } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    modelPath: { type: 'string', default: 'models' },\n                    datasources: { type: 'object', optional: true },\n                    log: { type: 'array', elementSchema: { type: 'text' }, optional: true },\n                },\n            },\n            name\n        );\n\n        const _modelPath = path.join(app.sourcePath, modelPath);\n        const modelCache = new Map();\n\n        const prisma = new PrismaClient(prismaOptions);\n\n        await prisma.$connect();\n\n        app.on('stopping', async () => {\n            await prisma.$disconnect();\n        });\n\n        Object.assign(prisma, prismsHelper);\n\n        const modelDelegate = (target, prop) => {\n            return target.model[prop];\n        }\n\n        prisma.$model = (name) => {\n            name = name.toLowerCase();\n            let modelObject = modelCache.get(name);\n            if (!modelObject) {                \n                const Model = esmCheck(require(path.join(_modelPath, pascalCase(name))));\n                modelObject = unexistDelegate(new Model(prisma), modelDelegate, true);\n                modelCache.set(name, modelObject);\n            }\n            return modelObject;\n        };\n\n        app.registerService(name, prisma);\n    },\n};\n"],"names":["prismsHelper","$pushQuery","where","query","AND","_where","_","each","value","key","existing","push","$pushOrQuery","OR","stage","Feature","SERVICE","groupable","load_","app","options","name","modelPath","prismaOptions","featureConfig","schema","type","default","datasources","optional","log","elementSchema","_modelPath","path","join","sourcePath","modelCache","Map","prisma","PrismaClient","$connect","on","$disconnect","Object","assign","modelDelegate","target","prop","model","$model","toLowerCase","modelObject","get","Model","esmCheck","require","pascalCase","unexistDelegate","set","registerService"],"mappings":";;;;+BAkDA;;;eAAA;;;iEAlDiB;qBACO;uBACiC;wBAC5B;;;;;;AAE7B,MAAMA,eAAe;IACjBC,YAAY,CAACC,OAAOC,QAAU;QAC1B,IAAI,EAAEC,IAAG,EAAE,GAAGC,QAAQ,GAAGH;QAEzBI,QAAC,CAACC,IAAI,CAACJ,OAAO,CAACK,OAAOC,MAAQ;YAC1B,MAAMC,WAAWL,MAAM,CAACI,IAAI;YAC5B,IAAI,OAAOC,aAAa,aAAa;gBACjC,IAAI,CAACN,KAAK;oBACNA,MAAM,EAAE;gBACZ,OAAO;oBACHA,MAAM;2BAAIA;qBAAI;gBAClB,CAAC;gBAED,OAAOC,MAAM,CAACI,IAAI;gBAClBL,IAAIO,IAAI,CAAC;oBAAE,CAACF,IAAI,EAAEC;gBAAS;gBAC3BN,IAAIO,IAAI,CAAC;oBACL,CAACF,IAAI,EAAED;gBACX;YACJ,OAAO;gBACHH,MAAM,CAACI,IAAI,GAAGD;YAClB,CAAC;QACL;QAEA,IAAIJ,KAAK;YACLC,OAAOD,GAAG,GAAGA;QACjB,CAAC;QAED,OAAOC;IACX;IACAO,cAAc,CAACV,OAAOC,QAAU;QAC5B,IAAI,CAACD,MAAMW,EAAE,EAAE;YACXX,QAAQ;gBACJW,IAAI;oBAACX;iBAAM;YACf;QACJ,OAAO;YACHA,QAAQ;gBACJW,IAAI;uBAAIX,MAAMW,EAAE;iBAAC;YACrB;QACJ,CAAC;QAEDX,MAAMW,EAAE,CAACF,IAAI,CAACR;QACd,OAAOD;IACX;AACJ;MAEA,WAAe;IACXY,OAAOC,YAAO,CAACC,OAAO;IAEtBC,WAAW,IAAI;IAEfC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAE;QACvC,MAAM,EAAEC,UAAS,EAAE,GAAGC,eAAe,GAAGJ,IAAIK,aAAa,CACrDJ,SACA;YACIK,QAAQ;gBACJH,WAAW;oBAAEI,MAAM;oBAAUC,SAAS;gBAAS;gBAC/CC,aAAa;oBAAEF,MAAM;oBAAUG,UAAU,IAAI;gBAAC;gBAC9CC,KAAK;oBAAEJ,MAAM;oBAASK,eAAe;wBAAEL,MAAM;oBAAO;oBAAGG,UAAU,IAAI;gBAAC;YAC1E;QACJ,GACAR;QAGJ,MAAMW,aAAaC,iBAAI,CAACC,IAAI,CAACf,IAAIgB,UAAU,EAAEb;QAC7C,MAAMc,aAAa,IAAIC;QAEvB,MAAMC,SAAS,IAAIC,oBAAY,CAAChB;QAEhC,MAAMe,OAAOE,QAAQ;QAErBrB,IAAIsB,EAAE,CAAC,YAAY,UAAY;YAC3B,MAAMH,OAAOI,WAAW;QAC5B;QAEAC,OAAOC,MAAM,CAACN,QAAQtC;QAEtB,MAAM6C,gBAAgB,CAACC,QAAQC,OAAS;YACpC,OAAOD,OAAOE,KAAK,CAACD,KAAK;QAC7B;QAEAT,OAAOW,MAAM,GAAG,CAAC5B,OAAS;YACtBA,OAAOA,KAAK6B,WAAW;YACvB,IAAIC,cAAcf,WAAWgB,GAAG,CAAC/B;YACjC,IAAI,CAAC8B,aAAa;gBACd,MAAME,QAAQC,IAAAA,eAAQ,EAACC,QAAQtB,iBAAI,CAACC,IAAI,CAACF,YAAYwB,IAAAA,iBAAU,EAACnC;gBAChE8B,cAAcM,IAAAA,sBAAe,EAAC,IAAIJ,MAAMf,SAASO,eAAe,IAAI;gBACpET,WAAWsB,GAAG,CAACrC,MAAM8B;YACzB,CAAC;YACD,OAAOA;QACX;QAEAhC,IAAIwC,eAAe,CAACtC,MAAMiB;IAC9B;AACJ"}