{"version":3,"sources":["../src/prisma.js"],"sourcesContent":["import path from 'node:path';\nimport { Feature } from '@galaxar/app';\nimport { _, esmCheck, pascalCase, unexistDelegate } from '@galaxar/utils';\nimport { InvalidArgument, ApplicationError } from '@galaxar/types';\nimport { PrismaClient } from '@prisma/client';\n\nconst prismsHelper = {\n    $pushQuery: (where, query) => {\n        let { AND, ..._where } = where;\n\n        _.each(query, (value, key) => {\n            const existing = _where[key];\n            if (typeof existing !== 'undefined') {\n                if (!AND) {\n                    AND = [];\n                } else {\n                    AND = [...AND];\n                }\n\n                delete _where[key];\n                AND.push({ [key]: existing });\n                AND.push({\n                    [key]: value,\n                });\n            } else {\n                _where[key] = value;\n            }\n        });\n\n        if (AND) {\n            _where.AND = AND;\n        }\n\n        return _where;\n    },\n    $pushOrQuery: (where, query) => {\n        if (!where.OR) {\n            where = {\n                OR: [where],\n            };\n        } else {\n            where = {\n                OR: [...where.OR],\n            };\n        }\n\n        where.OR.push(query);\n        return where;\n    },\n};\n\nconst symCache = Symbol('cache'); \n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { modelPath, ...prismaOptions } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    modelPath: { type: 'string', default: 'models' },\n                    datasources: { type: 'object', optional: true },\n                    log: { type: 'array', elementSchema: { type: 'text' }, optional: true },\n                },\n            },\n            name\n        );\n\n        const _modelPath = path.join(app.sourcePath, modelPath);\n        const modelCache = new Map();\n\n        const prisma = new PrismaClient(prismaOptions);\n\n        await prisma.$connect();\n\n        app.on('stopping', async () => {\n            await prisma.$disconnect();\n        });\n\n        Object.assign(prisma, prismsHelper);\n\n        const modelDelegate = (target, prop) => {\n            return target.model[prop];\n        };\n\n        prisma.$model = (name) => {\n            const _name = name.toLowerCase();\n            let modelObject = modelCache.get(_name);\n            if (!modelObject) {\n                const Model = esmCheck(require(path.join(_modelPath, pascalCase(name))));\n                modelObject = unexistDelegate(new Model(prisma, app), modelDelegate, true);\n                modelCache.set(_name, modelObject);\n            }\n            return modelObject;\n        };\n\n        prisma.$setupCache = (modelBox, entries) => {\n            if (!modelBox.model) {\n                throw new ApplicationError(\n                    'prisma.$setupCache should be called in the constructor and after model is assigned.'\n                );\n            }\n\n            modelBox[symCache] = new Map();\n\n            modelBox.cache_ = async (key) => {\n                let cache = modelBox[symCache].get(key);\n                if (cache) {\n                    return cache;\n                }\n\n                const meta = entries[key];\n                if (!meta) {\n                    throw new InvalidArgument(`No cache setup for key: ${key}`);\n                }\n\n                const { where = {}, type = 'list', mapByKey } = meta;\n\n                let data = await modelBox.model.findMany({\n                    where,\n                });\n\n                if (type === 'map') {\n                    if (!mapByKey) {\n                        throw new InvalidArgument(`No \"mapByKey\" set for map type cache: ${key}`);\n                    }\n\n                    data = data.reduce((result, item) => {\n                        result[item[mapByKey]] = item;\n                        return result;\n                    }, {});\n                } // else type === 'list'\n\n                modelBox[symCache].set(key, data);\n                return data;\n            };\n\n            modelBox.resetCache = (key) => {\n                modelBox[symCache].delete(key);\n            };\n        };\n\n        app.registerService(name, prisma);\n    },\n};\n"],"names":["prismsHelper","$pushQuery","where","query","AND","_where","_","each","value","key","existing","push","$pushOrQuery","OR","symCache","Symbol","stage","Feature","SERVICE","groupable","load_","app","options","name","modelPath","prismaOptions","featureConfig","schema","type","default","datasources","optional","log","elementSchema","_modelPath","path","join","sourcePath","modelCache","Map","prisma","PrismaClient","$connect","on","$disconnect","Object","assign","modelDelegate","target","prop","model","$model","_name","toLowerCase","modelObject","get","Model","esmCheck","require","pascalCase","unexistDelegate","set","$setupCache","modelBox","entries","ApplicationError","cache_","cache","meta","InvalidArgument","mapByKey","data","findMany","reduce","result","item","resetCache","delete","registerService"],"mappings":"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"}