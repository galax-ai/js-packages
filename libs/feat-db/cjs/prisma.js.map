{"version":3,"sources":["../src/prisma.js"],"sourcesContent":["import path from 'node:path';\nimport { Feature } from '@galaxar/app';\nimport {\n    _,\n    esmCheck,\n    pascalCase,\n    camelCase,\n    unexistDelegate,\n} from '@galaxar/utils';\nimport { InvalidArgument, ApplicationError } from '@galaxar/types';\nimport { PrismaClient } from '@prisma/client';\n\nconst prismsHelper = {\n    $pushQuery: (where, query) => {\n        let { AND, ..._where } = where;\n\n        _.each(query, (value, key) => {\n            const existing = _where[key];\n            if (typeof existing !== 'undefined') {\n                if (!AND) {\n                    AND = [];\n                } else {\n                    AND = [...AND];\n                }\n\n                delete _where[key];\n                AND.push({ [key]: existing });\n                AND.push({\n                    [key]: value,\n                });\n            } else {\n                _where[key] = value;\n            }\n        });\n\n        if (AND) {\n            _where.AND = AND;\n        }\n\n        return _where;\n    },\n    $pushOrQuery: (where, query) => {\n        if (!where.OR) {\n            where = {\n                OR: [where],\n            };\n        } else {\n            where = {\n                OR: [...where.OR],\n            };\n        }\n\n        where.OR.push(query);\n        return where;\n    },\n};\n\nconst symCache = Symbol('cache');\n\nexport class DefaultModel {\n    constructor(prisma, app, pascalModelName) {\n        this.db = prisma;\n        this.model = prisma[camelCase(pascalModelName)];\n        this.app = app;\n    }\n}\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { modelPath, ttlCacheService, ...prismaOptions } =\n            app.featureConfig(\n                options,\n                {\n                    schema: {\n                        modelPath: { type: 'string', default: 'models' },\n                        ttlCacheService: { type: 'string', optional: true },\n                        datasources: { type: 'object', optional: true },\n                        log: {\n                            type: 'array',\n                            elementSchema: { type: 'text' },\n                            optional: true,\n                        },\n                    },\n                },\n                name\n            );\n\n        const _modelPath = path.join(app.sourcePath, modelPath);\n        const modelCache = new Map();\n\n        const prisma = new PrismaClient(prismaOptions);\n\n        await prisma.$connect();\n\n        app.on('stopping', async () => {\n            await prisma.$disconnect();\n        });\n\n        Object.assign(prisma, prismsHelper);\n\n        const modelDelegate = (target, prop) => {\n            return target.model[prop];\n        };\n\n        prisma.$model = (name) => {\n            const _name = name.toLowerCase();\n            let modelObject = modelCache.get(_name);\n            if (!modelObject) {\n                const pascalName = pascalCase(name);\n\n                let Model;\n\n                try {\n                    Model = esmCheck(\n                        require(path.join(_modelPath, pascalName))\n                    );\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        Model = DefaultModel;\n                    } else {\n                        throw err;\n                    }\n                }\n                const modelInstance = new Model(prisma, app, pascalName);\n\n                modelInstance.retryCreate_ = async (\n                    createOptions,\n                    onDuplicate,\n                    maxRetry\n                ) => {\n                    maxRetry || (maxRetry = 99);\n                    let retry = 0;\n                    let error;\n\n                    while (retry++ < maxRetry) {\n                        try {\n                            return await modelInstance.model.create(\n                                createOptions\n                            );\n                        } catch (err) {\n                            //P2002: Unique constraint failed\n                            if (err.code !== 'P2002') {\n                                throw err;\n                            }\n\n                            createOptions = await onDuplicate(createOptions);\n                            error = err;\n                        }\n                    }\n\n                    throw error;\n                };\n\n                if (ttlCacheService) {\n                    modelInstance.ttlCacheUnique_ = async (\n                        key,\n                        findUnique,\n                        ttl\n                    ) => {\n                        const cache = app.getService(ttlCacheService);\n                        const cacheKey = `prisma:${name}:${key}`;\n                        return await cache.get_(\n                            cacheKey,\n                            () => modelInstance.model.findUnique(findUnique),\n                            ttl\n                        );\n                    };\n\n                    modelInstance.ttlCacheMany_ = async (\n                        key,\n                        findMany,\n                        ttl\n                    ) => {\n                        const cache = app.getService(ttlCacheService);\n                        const cacheKey = `prisma:${name}:${key}`;\n                        return await cache.get_(\n                            cacheKey,\n                            () => modelInstance.model.findMany(findMany),\n                            ttl\n                        );\n                    };\n                }\n\n                modelObject = unexistDelegate(\n                    modelInstance,\n                    modelDelegate,\n                    true\n                );\n                modelCache.set(_name, modelObject);\n            }\n            return modelObject;\n        };\n\n        prisma.$setupCache = (modelBox, entries) => {\n            if (!modelBox.model) {\n                throw new ApplicationError(\n                    'prisma.$setupCache should be called in the constructor and after model is assigned.'\n                );\n            }\n\n            modelBox[symCache] = new Map();\n\n            modelBox.cache_ = async (key) => {\n                let cache = modelBox[symCache].get(key);\n                if (cache) {\n                    return cache;\n                }\n\n                const meta = entries[key];\n                if (!meta) {\n                    throw new InvalidArgument(`No cache setup for key: ${key}`);\n                }\n\n                const { where = {}, type = 'list', mapByKey } = meta;\n\n                let data = await modelBox.model.findMany({\n                    where,\n                });\n\n                if (type === 'map') {\n                    if (!mapByKey) {\n                        throw new InvalidArgument(\n                            `No \"mapByKey\" set for map type cache: ${key}`\n                        );\n                    }\n\n                    data = data.reduce((result, item) => {\n                        result[item[mapByKey]] = item;\n                        return result;\n                    }, {});\n                } // else type === 'list'\n\n                modelBox[symCache].set(key, data);\n                return data;\n            };\n\n            modelBox.resetCache = (key) => {\n                modelBox[symCache].delete(key);\n            };\n        };\n\n        app.registerService(name, prisma);\n    },\n};\n"],"names":["DefaultModel","prismsHelper","$pushQuery","where","query","AND","_where","_","each","value","key","existing","push","$pushOrQuery","OR","symCache","Symbol","constructor","prisma","app","pascalModelName","db","model","camelCase","stage","Feature","SERVICE","groupable","load_","options","name","modelPath","ttlCacheService","prismaOptions","featureConfig","schema","type","default","optional","datasources","log","elementSchema","_modelPath","path","join","sourcePath","modelCache","Map","PrismaClient","$connect","on","$disconnect","Object","assign","modelDelegate","target","prop","$model","_name","toLowerCase","modelObject","get","pascalName","pascalCase","Model","esmCheck","require","err","code","modelInstance","retryCreate_","createOptions","onDuplicate","maxRetry","retry","error","create","ttlCacheUnique_","findUnique","ttl","cache","getService","cacheKey","get_","ttlCacheMany_","findMany","unexistDelegate","set","$setupCache","modelBox","entries","ApplicationError","cache_","meta","InvalidArgument","mapByKey","data","reduce","result","item","resetCache","delete","registerService"],"mappings":"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"}