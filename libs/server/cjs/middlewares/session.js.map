{"version":3,"sources":["../../lib/middlewares/session.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Session middleware\n * @module Middleware_Session\n */\n\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst DEFAULT_OPTS = {\n    key: 'gx-server.sid',\n    prefix: 'gx-server:sess:'\n};\n\n/**\n * Initialize session middleware\n * @param {object} options - Session options \n * @property {string} [options.key='mowa:sid'] - Cookie name defaulting to mowa.sid \n * @property {string} [options.prefix='mowa:sess:'] - Session prefix for store, defaulting to mowa:sess:\n * @property {number} [options.maxAge] - SessionStore's expiration time (ms), defaulting to 86400000 (1 day)\n * @property {bool} [options.autoCommit=true] - Automatically commit headers (default true)\n * @property {bool} [options.overwrite=true] - Can overwrite or not (default true) \n * @property {bool} [options.httpOnly=true] - HttpOnly or not (default true)\n * @property {bool} [options.signed=true] - Signed or not\n * @property {bool} [options.rolling=false] - Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) \n * @property {bool} [options.renew=false] - Renew session when session is nearly expired, so we can always keep user logged in. (default is false)\n * @property {function} [options.genSid] - The way of generating external session id is controlled by the options.genid, which defaults to Date.now() + '-' + uid.sync(24)\n * @property {function} [options.valid] - valid(ctx, session), valid session value before use it\n * @property {function} [options.beforeSave] - beforeSave(ctx, session), hook before save session\n * @property {object} [options.store] - Session store instance. It can be any Object that has the methods set, get, destroy like MemoryStore.\n * @param {Routable} app \n */\nmodule.exports = (options, app) => {\n    const session = app.tryRequire('koa-session');\n\n    let store = options.store || { type: 'memory' };\n\n    if (!store.type) {\n        throw new InvalidConfiguration(\n            'Missing session store type.',\n            app,\n            'middlewares.session.store'\n        );        \n    }\n\n    let storeObject;\n\n    let opt = store.options || {};\n\n    if (store.dataSource) {\n        let dsService = app.getService(store.dataSource);\n        Object.assign(opt, { url: dsService.connectionString });\n    }\n\n    switch (store.type) {\n        case 'redis':\n            storeObject = app.tryRequire('koa-redis')(opt);\n            break;\n        case 'mysql':\n            storeObject = app.tryRequire('koa-mysql-session')(opt);\n            break;\n        case 'mongodb':\n            const MongoStore = app.tryRequire('koa-generic-session-mongo');\n            storeObject = new MongoStore(opt);\n            break;\n        case 'pgsql':\n            storeObject = app.tryRequire('koa-pg-session')(opt);\n            break;\n        case 'sqlite3':\n            storeObject = app.tryRequire('koa-sqlite3-session')(opt);\n            break;\n        case 'memory':\n            const MemoryStore = app.tryRequire('koa-session-memory');\n            storeObject = new MemoryStore();\n            break;\n        default:\n            throw new InvalidConfiguration(\n                'Unsupported session store type: ' + store.type,\n                app,\n                'middlewares.session.store.type'\n            );\n    }\n\n    let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {store: storeObject});\n\n    return session(sessionOptions, app.server.koa);\n};"],"names":["InvalidConfiguration","require","DEFAULT_OPTS","key","prefix","module","exports","options","app","session","tryRequire","store","type","storeObject","opt","dataSource","dsService","getService","Object","assign","url","connectionString","MongoStore","MemoryStore","sessionOptions","server","koa"],"mappings":"AAAA,aAOA,KAAM,CAAEA,oBAAoB,CAAE,CAAGC,QAAQ,eAEzC,MAAMC,aAAe,CACjBC,IAAK,gBACLC,OAAQ,iBACZ,CAoBAC,CAAAA,OAAOC,OAAO,CAAG,CAACC,QAASC,MAAQ,CAC/B,MAAMC,QAAUD,IAAIE,UAAU,CAAC,eAE/B,IAAIC,MAAQJ,QAAQI,KAAK,EAAI,CAAEC,KAAM,QAAS,EAE9C,GAAI,CAACD,MAAMC,IAAI,CAAE,CACb,MAAM,IAAIZ,qBACN,8BACAQ,IACA,4BACF,AACN,CAAC,AAED,IAAIK,YAEJ,IAAIC,IAAMH,MAAMJ,OAAO,EAAI,CAAC,EAE5B,GAAII,MAAMI,UAAU,CAAE,CAClB,IAAIC,UAAYR,IAAIS,UAAU,CAACN,MAAMI,UAAU,EAC/CG,OAAOC,MAAM,CAACL,IAAK,CAAEM,IAAKJ,UAAUK,gBAAgB,AAAC,EACzD,CAAC,AAED,OAAQV,MAAMC,IAAI,EACd,IAAK,QACDC,YAAcL,IAAIE,UAAU,CAAC,aAAaI,KAC1C,KAAM,AACV,KAAK,QACDD,YAAcL,IAAIE,UAAU,CAAC,qBAAqBI,KAClD,KAAM,AACV,KAAK,UACD,MAAMQ,WAAad,IAAIE,UAAU,CAAC,6BAClCG,YAAc,IAAIS,WAAWR,KAC7B,KAAM,AACV,KAAK,QACDD,YAAcL,IAAIE,UAAU,CAAC,kBAAkBI,KAC/C,KAAM,AACV,KAAK,UACDD,YAAcL,IAAIE,UAAU,CAAC,uBAAuBI,KACpD,KAAM,AACV,KAAK,SACD,MAAMS,YAAcf,IAAIE,UAAU,CAAC,sBACnCG,YAAc,IAAIU,YAClB,KAAM,AACV,SACI,MAAM,IAAIvB,qBACN,mCAAqCW,MAAMC,IAAI,CAC/CJ,IACA,iCACF,AACV,CAEA,IAAIgB,eAAiBN,OAAOC,MAAM,CAAC,CAAC,EAAGjB,aAAcK,QAAS,CAACI,MAAOE,WAAW,GAEjF,OAAOJ,QAAQe,eAAgBhB,IAAIiB,MAAM,CAACC,GAAG,CACjD"}