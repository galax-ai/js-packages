{"version":3,"sources":["../../lib/middlewares/accessLog.js"],"sourcesContent":["/**\n * Add access log for every http request\n * @module Middleware_AccessLog\n */\n\nimport { InvalidConfiguration } from \"@galaxar/types\";\nimport http from 'node:http';\n\nmodule.exports = (opt, app) => {        \n    app.requireFeatures([ 'loggers' ], app, 'accessLog');    \n\n    if (!opt.logger) {\n        throw new InvalidConfiguration('Missing logger id.', app, 'middlewares.accessLog.logger');\n    }\n\n    let logger = app.getService('logger.' + opt.logger);\n    if (!logger) {\n        throw new InvalidConfiguration('Logger not found. Id: ' + opt.logger, app, 'middlewares.accessLog.logger');\n    }\n\n    return async (ctx, next) => {\n        let startAt = app.now();       \n\n        await next();        \n\n        let info = {\n            ip: ctx.ip, // should use ip middleware to extract the real ip behind lb\n            method: ctx.method,\n            url: ctx.url,\n            originalUrl: ctx.originalUrl,           \n            httpVersion: ctx.req.httpVersion,        \n            protocol: ctx.protocol.toUpperCase(),\n            status: ctx.status,\n            size: ctx.length || '-',\n            referer: ctx.header['referer'] || '-',\n            userAgent: ctx.header['user-agent'] || '-',\n            isoTimestamp: startAt.toISO(),        \n            duration: app.now().diff(startAt).milliseconds\n        };\n\n        let level = 'info';\n\n        if (ctx.status >= 500) {\n            level = 'error';\n        } else if (ctx.status >= 400) {\n            level = 'warn';\n        }\n        \n        logger.log(level, http.STATUS_CODES[ctx.status], info);\n    };\n};"],"names":["module","exports","opt","app","requireFeatures","logger","InvalidConfiguration","getService","ctx","next","startAt","now","info","ip","method","url","originalUrl","httpVersion","req","protocol","toUpperCase","status","size","length","referer","header","userAgent","isoTimestamp","toISO","duration","diff","milliseconds","level","log","http","STATUS_CODES"],"mappings":"2FAKqC,mEACpB,kGAEjBA,OAAOC,OAAO,CAAG,CAACC,IAAKC,MAAQ,CAC3BA,IAAIC,eAAe,CAAC,CAAE,UAAW,CAAED,IAAK,aAExC,GAAI,CAACD,IAAIG,MAAM,CAAE,CACb,MAAM,IAAIC,2BAAoB,CAAC,qBAAsBH,IAAK,+BAAgC,AAC9F,CAAC,AAED,IAAIE,OAASF,IAAII,UAAU,CAAC,UAAYL,IAAIG,MAAM,EAClD,GAAI,CAACA,OAAQ,CACT,MAAM,IAAIC,2BAAoB,CAAC,yBAA2BJ,IAAIG,MAAM,CAAEF,IAAK,+BAAgC,AAC/G,CAAC,AAED,OAAO,MAAOK,IAAKC,OAAS,CACxB,IAAIC,QAAUP,IAAIQ,GAAG,EAErB,OAAMF,OAEN,IAAIG,KAAO,CACPC,GAAIL,IAAIK,EAAE,CACVC,OAAQN,IAAIM,MAAM,CAClBC,IAAKP,IAAIO,GAAG,CACZC,YAAaR,IAAIQ,WAAW,CAC5BC,YAAaT,IAAIU,GAAG,CAACD,WAAW,CAChCE,SAAUX,IAAIW,QAAQ,CAACC,WAAW,GAClCC,OAAQb,IAAIa,MAAM,CAClBC,KAAMd,IAAIe,MAAM,EAAI,IACpBC,QAAShB,IAAIiB,MAAM,CAAC,UAAU,EAAI,IAClCC,UAAWlB,IAAIiB,MAAM,CAAC,aAAa,EAAI,IACvCE,aAAcjB,QAAQkB,KAAK,GAC3BC,SAAU1B,IAAIQ,GAAG,GAAGmB,IAAI,CAACpB,SAASqB,YAAY,AAClD,EAEA,IAAIC,MAAQ,OAEZ,GAAIxB,IAAIa,MAAM,EAAI,IAAK,CACnBW,MAAQ,OACZ,MAAO,GAAIxB,IAAIa,MAAM,EAAI,IAAK,CAC1BW,MAAQ,MACZ,CAAC,AAED3B,OAAO4B,GAAG,CAACD,MAAOE,iBAAI,CAACC,YAAY,CAAC3B,IAAIa,MAAM,CAAC,CAAET,KACrD,CACJ"}