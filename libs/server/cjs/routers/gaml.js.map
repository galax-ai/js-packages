{"version":3,"sources":["../../lib/routers/gaml.js"],"sourcesContent":["import path from 'node:path';\nimport { globSync } from 'glob';\nimport { _, naming, text, hasMethod, esmCheck, batchAsync_ } from '@galaxar/utils';\n\n/**\n * Galaxar API Modeling Language (GAML) router.\n * @module Router_Gaml\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a gaml router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      gaml: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           post\n *  /:resource/:id                 get            findById\n *  /:resource/:id                 put            updateById\n *  /:resource/:id                 del            deleteById\n */\nconst gamlRouter = async (app, baseRoute, options) => {\n    const Router = await app.tryRequire_('@koa/router');\n\n    let resourcePath = path.resolve(app.sourcePath, options.resourcesPath || 'resources');\n\n    let router = baseRoute === '/' ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, '/') });\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.errorOptions, app), 'jsonError');\n\n    if (options.middlewares) {\n        await app.useMiddlewares_(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**/*.js');\n    let files = globSync(resourcesPath);\n\n    await batchAsync_(files, async filepath => {\n        let controller = esmCheck(require(filepath));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        const relativePath = path.relative(resourcePath, filepath);\n        const dirPath = path.dirname(relativePath);\n        const entityName = path.basename(relativePath, '.js');\n        const entithNameWithPath = path.join(dirPath, entityName);\n\n        let baseEndpoint;\n        if (options.remaps && entithNameWithPath in options.remaps) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options.remaps[entithNameWithPath], '/'), '/');\n        } else {\n            const urlPath = entithNameWithPath\n                .split('/')\n                .map((p) => naming.kebabCase(p))\n                .join('/');\n            baseEndpoint = text.ensureStartsWith(urlPath, '/');\n        }\n\n        let idName = naming.camelCase(entityName) + 'Id';\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n        if (hasMethod(controller, 'find')) {\n            const _action = controller.find.bind(controller);\n            const _middlewares = controller.find.__metaMiddlewares;\n            await app.addRoute_(router, 'get', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'post')) {\n            const _action = controller.post.bind(controller);\n            const _middlewares = controller.post.__metaMiddlewares;\n            await app.addRoute_(router, 'post', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'findById')) {\n            const _action = (ctx) => controller.findById(ctx, ctx.params[idName]);\n            const _middlewares = controller.findById.__metaMiddlewares;\n            await app.addRoute_(router, 'get', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'updateById')) {\n            const _action = (ctx) => controller.updateById(ctx, ctx.params[idName]);\n            const _middlewares = controller.updateById.__metaMiddlewares;\n            await app.addRoute_(router, 'put', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'deleteById')) {\n            const _action = (ctx) => controller.deleteById(ctx, ctx.params[idName]);\n            const _middlewares = controller.deleteById.__metaMiddlewares;\n            await app.addRoute_(router, 'del', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n    });\n\n    app.addRouter(router);\n};\n\nexport default gamlRouter;\n"],"names":["appendId","baseEndpoint","idName","gamlRouter","app","baseRoute","options","Router","tryRequire_","resourcePath","path","resolve","sourcePath","resourcesPath","router","prefix","text","dropIfEndsWith","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares_","join","files","globSync","batchAsync_","filepath","controller","esmCheck","require","relativePath","relative","dirPath","dirname","entityName","basename","entithNameWithPath","remaps","ensureStartsWith","urlPath","split","map","p","naming","kebabCase","camelCase","endpointWithId","hasMethod","_action","find","bind","_middlewares","__metaMiddlewares","addRoute_","post","ctx","findById","params","updateById","deleteById","addRouter"],"mappings":"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"}