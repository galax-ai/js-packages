{"version":3,"sources":["../../lib/routers/gaml.js"],"sourcesContent":["import path from 'node:path';\nimport { globSync } from 'glob';\nimport { _, naming, text, hasMethod, esmCheck } from '@galaxar/utils';\n\n/**\n * Gaml router.\n * @module Router_Gaml\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a gaml router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      gaml: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           post\n *  /:resource/:id                 get            findById\n *  /:resource/:id                 put            updateById\n *  /:resource/:id                 del            deleteById\n */\nconst gamlRouter = (app, baseRoute, options) => {\n    const Router = app.tryRequire('@koa/router');\n\n    let resourcePath = path.resolve(app.sourcePath, options.resourcesPath || 'resources');\n\n    let router = baseRoute === '/' ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, '/') });\n\n    app.useMiddleware(router, app.getMiddlewareFactory('jsonError')(options.errorOptions, app), 'jsonError');\n\n    if (options.middlewares) {\n        app.useMiddlewares(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**/*.js');\n    let files = globSync(resourcesPath);\n\n    _.each(files, (filepath) => {\n        let controller = esmCheck(require(filepath));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        const relativePath = path.relative(resourcePath, filepath);\n        const dirPath = path.dirname(relativePath);\n        const entityName = path.basename(relativePath, '.js');\n        const entithNameWithPath = path.join(dirPath, entityName);\n\n        let baseEndpoint;\n        if (options.remaps && entithNameWithPath in options.remaps) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options.remaps[entithNameWithPath], '/'), '/');\n        } else {\n            const urlPath = entithNameWithPath\n                .split('/')\n                .map((p) => naming.kebabCase(p))\n                .join('/');\n            baseEndpoint = text.ensureStartsWith(urlPath, '/');\n        }\n\n        let idName = naming.camelCase(entityName) + 'Id';\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n        if (hasMethod(controller, 'find')) {\n            const _action = controller.find.bind(controller);\n            const _middlewares = controller.find.__metaMiddlewares;\n            app.addRoute(router, 'get', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'post')) {\n            const _action = controller.post.bind(controller);\n            const _middlewares = controller.post.__metaMiddlewares;\n            app.addRoute(router, 'post', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'findById')) {\n            const _action = (ctx) => controller.findById(ctx, ctx.params[idName]);\n            const _middlewares = controller.findById.__metaMiddlewares;\n            app.addRoute(router, 'get', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'updateById')) {\n            const _action = (ctx) => controller.updateById(ctx, ctx.params[idName]);\n            const _middlewares = controller.updateById.__metaMiddlewares;\n            app.addRoute(router, 'put', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'deleteById')) {\n            const _action = (ctx) => controller.deleteById(ctx, ctx.params[idName]);\n            const _middlewares = controller.deleteById.__metaMiddlewares;\n            app.addRoute(router, 'del', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n    });\n    app.addRouter(router);\n};\n\nexport default gamlRouter;\n"],"names":["appendId","baseEndpoint","idName","gamlRouter","app","baseRoute","options","Router","tryRequire","resourcePath","path","resolve","sourcePath","resourcesPath","router","prefix","text","dropIfEndsWith","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares","join","files","globSync","_","each","filepath","controller","esmCheck","require","relativePath","relative","dirPath","dirname","entityName","basename","entithNameWithPath","remaps","ensureStartsWith","urlPath","split","map","p","naming","kebabCase","camelCase","endpointWithId","hasMethod","_action","find","bind","_middlewares","__metaMiddlewares","addRoute","post","ctx","findById","params","updateById","deleteById","addRouter"],"mappings":"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"}