{"version":3,"sources":["../../lib/routers/gaml.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst { glob } = require(\"@genx/sys\");\nconst { _, naming, text } = require(\"@genx/july\");\nconst Literal = require(\"../enum/Literal\");\nconst Router = require(\"@koa/router\");\nconst { hasMethod } = require(\"../helpers/Helpers\");\n\n/**\n * Gaml router.\n * @module Router_Gaml\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a gaml router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {objects} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      gaml: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           post\n *  /:resource/:id                 get            findById\n *  /:resource/:id                 put            updateById\n *  /:resource/:id                 del            deleteById\n */\nmodule.exports = (app, baseRoute, options) => {\n    let resourcePath = path.resolve(app.backendPath, options.resourcesPath || Literal.RESOURCES_PATH);\n\n    let router = baseRoute === \"/\" ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, \"/\") });\n\n    app.useMiddleware(router, app.getMiddlewareFactory(\"jsonError\")(options.errorOptions, app), \"jsonError\");\n\n    if (options.middlewares) {\n        app.useMiddlewares(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, \"**/*.js\");\n    let files = glob.sync(resourcesPath);\n\n    _.each(files, (filepath) => {\n        let controller = require(filepath);\n\n        if (typeof controller === \"function\") {\n            controller = new controller(app);\n\n            const relativePath = path.relative(resourcePath, filepath);\n            const dirPath = path.dirname(relativePath);\n            const entityName = path.basename(relativePath, '.js');\n            const entithNameWithPath = path.join(dirPath, entityName);\n\n            let baseEndpoint;\n            if (options.remaps && entithNameWithPath in options.remaps) {\n                baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options.remaps[entithNameWithPath], \"/\"), \"/\");\n            } else {\n                const urlPath = entithNameWithPath.split('/').map(p => naming.kebabCase(p)).join('/');\n                baseEndpoint = text.ensureStartsWith(urlPath, \"/\");\n            }\n\n            let idName = naming.camelCase(entityName) + \"Id\";\n            let endpointWithId = appendId(baseEndpoint, idName);\n\n            if (hasMethod(controller, \"find\")) {\n                const _action = controller.find.bind(controller);\n                const _middlewares = controller.find.__metaMiddlewares;\n                app.addRoute(router, \"get\", baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n            }\n\n            if (hasMethod(controller, \"post\")) {\n                const _action = controller.post.bind(controller);\n                const _middlewares = controller.post.__metaMiddlewares;\n                app.addRoute(router, \"post\", baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n            }\n\n            if (hasMethod(controller, \"findById\")) {\n                const _action = (ctx) => controller.findById(ctx, ctx.params[idName]);\n                const _middlewares = controller.findById.__metaMiddlewares;\n                app.addRoute(router, \"get\", endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n            }\n\n            if (hasMethod(controller, \"updateById\")) {\n                const _action = (ctx) => controller.updateById(ctx, ctx.params[idName]);\n                const _middlewares = controller.updateById.__metaMiddlewares;\n                app.addRoute(router, \"put\", endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n            }\n\n            if (hasMethod(controller, \"deleteById\")) {\n                const _action = (ctx) => controller.deleteById(ctx, ctx.params[idName]);\n                const _middlewares = controller.deleteById.__metaMiddlewares;\n                app.addRoute(router, \"del\", endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n            }\n        }\n    });\n    app.addRouter(router);\n};\n"],"names":["path","require","glob","_","naming","text","Literal","Router","hasMethod","appendId","baseEndpoint","idName","module","exports","app","baseRoute","options","resourcePath","resolve","backendPath","resourcesPath","RESOURCES_PATH","router","prefix","dropIfEndsWith","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares","join","files","sync","each","filepath","controller","relativePath","relative","dirPath","dirname","entityName","basename","entithNameWithPath","remaps","ensureStartsWith","urlPath","split","map","p","kebabCase","camelCase","endpointWithId","_action","find","bind","_middlewares","__metaMiddlewares","addRoute","post","ctx","findById","params","updateById","deleteById","addRouter"],"mappings":"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"}