{"version":3,"sources":["../../lib/routers/rule.js"],"sourcesContent":["import { _, text, eachAsync_ } from '@galaxar/utils';\nimport { InvalidConfiguration } from '@galaxar/types';\nimport { supportedMethods } from '../helpers';\n\n/**\n * Rule based router.\n * @module Router_Rule\n */\n\n/**\n * Create a rule-based router.\n * @param {WebModule} app\n * @param {string} baseRoute\n * @param {object} options\n * @example\n * '<base path>': {\n *     rule: {\n *         middlewares:\n *         rules: {\n *             // type 1, default is \"get\", methods mapped to one action\n *             '<sub route>': '<controller with relative path>.<action>',\n *\n *             // type 2, different methods mapped to different method\n *             '<sub route>': {\n *                '<method>': '<controller with relative path>.<action>'\n *             },\n *\n *             // type 3, with middleware\n *             '<sub route>': {\n *                 '<method>': {\n *                    '<middleware name>': { //middleware options }\n *                 }\n *             },\n *\n *             // type 4, all methods mapped to one action\n *             '<method>:/<sub route>': '<controller with relative path>.<action>'\n *\n *             // type 5, all methods mapped to one action\n *             '<method>:/<sub route>': {\n *                 '<middleware name>': { //middleware options }\n *             }\n *         }\n *     }\n * }\n */\nasync function load_(app, baseRoute, options) {\n    const Router = await app.tryRequire_('@koa/router');\n\n    let router = baseRoute === '/' ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, '/') });\n\n    if (options.middlewares) {\n        await app.useMiddlewares_(router, options.middlewares);\n    }\n\n    await eachAsync_(options.rules || {}, async (methods, subRoute) => {\n        let pos = subRoute.indexOf(':/');\n\n        if (pos !== -1) {\n            if (pos === 0) {\n                throw new InvalidConfiguration(\n                    'Invalid route rule syntax: ' + subRoute,\n                    app,\n                    `routing[${baseRoute}].rule.rules`\n                );\n            }\n\n            // like get:/, or post:/\n\n            let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();\n            subRoute = subRoute.substr(pos + 2);\n\n            methods = { [embeddedMethod]: methods };\n        }\n\n        subRoute = text.ensureStartsWith(subRoute, '/');\n\n        if (typeof methods === 'string' || Array.isArray(methods)) {\n            methods = { get: methods };\n        }\n\n        await eachAsync_(methods, async (middlewares, method) => {\n            if (!supportedMethods.has(method) && method !== 'all') {\n                throw new InvalidConfiguration(\n                    'Unsupported http method: ' + method,\n                    app,\n                    `routing[${baseRoute}].rule.rules[${subRoute}]`\n                );\n            }\n\n            await app.addRoute_(router, method, subRoute, middlewares);\n        });\n    });\n\n    app.addRouter(router);\n}\n\nexport default load_;\n"],"names":["load_","app","baseRoute","options","Router","tryRequire_","router","prefix","text","dropIfEndsWith","middlewares","useMiddlewares_","eachAsync_","rules","methods","subRoute","pos","indexOf","InvalidConfiguration","embeddedMethod","substr","toLocaleLowerCase","ensureStartsWith","Array","isArray","get","method","supportedMethods","has","addRoute_","addRouter"],"mappings":";;;;+BAgGA;;;eAAA;;;uBAhGoC;uBACC;yBACJ;AAEjC;;;CAGC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCC,GACD,eAAeA,MAAMC,GAAG,EAAEC,SAAS,EAAEC,OAAO,EAAE;IAC1C,MAAMC,SAAS,MAAMH,IAAII,WAAW,CAAC;IAErC,IAAIC,SAASJ,cAAc,MAAM,IAAIE,WAAW,IAAIA,OAAO;QAAEG,QAAQC,WAAI,CAACC,cAAc,CAACP,WAAW;IAAK,EAAE;IAE3G,IAAIC,QAAQO,WAAW,EAAE;QACrB,MAAMT,IAAIU,eAAe,CAACL,QAAQH,QAAQO,WAAW;IACzD,CAAC;IAED,MAAME,IAAAA,iBAAU,EAACT,QAAQU,KAAK,IAAI,CAAC,GAAG,OAAOC,SAASC,WAAa;QAC/D,IAAIC,MAAMD,SAASE,OAAO,CAAC;QAE3B,IAAID,QAAQ,CAAC,GAAG;YACZ,IAAIA,QAAQ,GAAG;gBACX,MAAM,IAAIE,2BAAoB,CAC1B,gCAAgCH,UAChCd,KACA,CAAC,QAAQ,EAAEC,UAAU,YAAY,CAAC,EACpC;YACN,CAAC;YAED,wBAAwB;YAExB,IAAIiB,iBAAiBJ,SAASK,MAAM,CAAC,GAAGJ,KAAKK,iBAAiB;YAC9DN,WAAWA,SAASK,MAAM,CAACJ,MAAM;YAEjCF,UAAU;gBAAE,CAACK,eAAe,EAAEL;YAAQ;QAC1C,CAAC;QAEDC,WAAWP,WAAI,CAACc,gBAAgB,CAACP,UAAU;QAE3C,IAAI,OAAOD,YAAY,YAAYS,MAAMC,OAAO,CAACV,UAAU;YACvDA,UAAU;gBAAEW,KAAKX;YAAQ;QAC7B,CAAC;QAED,MAAMF,IAAAA,iBAAU,EAACE,SAAS,OAAOJ,aAAagB,SAAW;YACrD,IAAI,CAACC,yBAAgB,CAACC,GAAG,CAACF,WAAWA,WAAW,OAAO;gBACnD,MAAM,IAAIR,2BAAoB,CAC1B,8BAA8BQ,QAC9BzB,KACA,CAAC,QAAQ,EAAEC,UAAU,aAAa,EAAEa,SAAS,CAAC,CAAC,EACjD;YACN,CAAC;YAED,MAAMd,IAAI4B,SAAS,CAACvB,QAAQoB,QAAQX,UAAUL;QAClD;IACJ;IAEAT,IAAI6B,SAAS,CAACxB;AAClB;MAEA,WAAeN"}