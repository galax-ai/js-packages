"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _nodepath=_interop_require_default(require("node:path"));const _utils=require("@galaxar/utils");const _glob=require("glob");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}const restRouter=(app,baseRoute,options)=>{const Router=app.tryRequire("@koa/router");let resourcePath=_nodepath.default.resolve(app.sourcePath,options.resourcesPath??"resources");let router=baseRoute==="/"?new Router:new Router({prefix:_utils.text.dropIfEndsWith(baseRoute,"/")});app.useMiddleware(router,app.getMiddlewareFactory("jsonError")(options.errorOptions,app),"jsonError");if(options.middlewares){app.useMiddlewares(router,options.middlewares)}let resourcesPath=_nodepath.default.join(resourcePath,"**","*.js");let files=(0,_glob.globSync)(resourcesPath,{nodir:true});_utils._.each(files,file=>{let relPath=_nodepath.default.relative(resourcePath,file);let batchUrl=_utils.text.ensureStartsWith(relPath.substring(0,relPath.length-3).split(_nodepath.default.sep).map(p=>_utils._.kebabCase(p)).join("/"),"/");let singleUrl=batchUrl+"/:id";let controller=(0,_utils.esmCheck)(require(file));if(typeof controller==="function"){controller=new controller(app)}if((0,_utils.hasMethod)(controller,"query")){app.addRoute(router,"get",batchUrl,ctx=>controller.query(ctx))}if((0,_utils.hasMethod)(controller,"create")){app.addRoute(router,"post",batchUrl,ctx=>controller.create(ctx))}if((0,_utils.hasMethod)(controller,"detail")){app.addRoute(router,"get",singleUrl,ctx=>controller.detail(ctx))}if((0,_utils.hasMethod)(controller,"update")){app.addRoute(router,"put",singleUrl,ctx=>controller.update(ctx))}if((0,_utils.hasMethod)(controller,"remove")){app.addRoute(router,"del",singleUrl,ctx=>controller.remove(ctx))}});app.addRouter(router)};const _default=restRouter;
//# sourceMappingURL=rest.js.map