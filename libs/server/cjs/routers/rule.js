"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _utils=require("@galaxar/utils");const _types=require("@galaxar/types");const _helpers=require("../helpers");function load_(app,baseRoute,options){const Router=app.tryRequire("@koa/router");let router=baseRoute==="/"?new Router:new Router({prefix:_utils.text.dropIfEndsWith(baseRoute,"/")});if(options.middlewares){app.useMiddlewares(router,options.middlewares)}_utils._.forOwn(options.rules||{},(methods,subRoute)=>{let pos=subRoute.indexOf(":/");if(pos!==-1){if(pos===0){throw new _types.InvalidConfiguration("Invalid route rule syntax: "+subRoute,app,`routing[${baseRoute}].rule.rules`)}let embeddedMethod=subRoute.substr(0,pos).toLocaleLowerCase();subRoute=subRoute.substr(pos+2);methods={[embeddedMethod]:methods}}subRoute=_utils.text.ensureStartsWith(subRoute,"/");if(typeof methods==="string"||Array.isArray(methods)){methods={get:methods}}_utils._.forOwn(methods,(middlewares,method)=>{if(!_helpers.supportedMethods.has(method)&&method!=="all"){throw new _types.InvalidConfiguration("Unsupported http method: "+method,app,`routing[${baseRoute}].rule.rules[${subRoute}]`)}app.addRoute(router,method,subRoute,middlewares)})});app.addRouter(router)}const _default=load_;
//# sourceMappingURL=rule.js.map