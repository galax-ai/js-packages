{"version":3,"sources":["../../lib/routers/graphql.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { InvalidConfiguration } = require('@genx/error');\nconst Koa = require('koa');\nconst mount = require('koa-mount');\n\n/**\n * GraphQL router.\n * @module Router_GraphQL\n */\n\n/**\n * Create a GraphQL router.\n * @param {*} app \n * @param {string} baseRoute \n * @param {objects} options \n * @property {string} options.schema\n * @property {object|array} [options.middlewares]\n * @property {boolean} [options.graphiql]\n * @example\n *  '<base path>': {\n *      graphql: {          \n *          middlewares: {},\n *          schema: 'graphql/schema',\n *          rootValue: '',\n *          graphiql: true\n *      }\n *  }\n */\nmodule.exports = async (app, baseRoute, options) => {\n    const graphqlHTTP = app.tryRequire('koa-graphql');        \n\n    const { middlewares, schemaProvider, ...graphqlOpts } = options;\n\n    if (!schemaProvider) {\n        throw new InvalidConfiguration(\n            'Missing schemaProvider config.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n\n    const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));\n    const schemaObj = await schemaFactory(app);\n\n    if (!schemaObj.schema) {\n        throw new InvalidConfiguration(\n            'The object returned from schemaProvider doesnot contain the schema body.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n \n    graphqlOpts.schema = schemaObj.schema;\n    if (schemaObj.rootValue) {\n        graphqlOpts.rootValue = schemaObj.rootValue;\n    }\n    \n    let router = new Koa();\n\n    if (middlewares) {\n        app.useMiddlewares(router, middlewares);\n    }\n\n    router.use(mount('/', graphqlHTTP(graphqlOpts)));\n    app.router.mount(baseRoute, router);\n};"],"names":["path","require","InvalidConfiguration","Koa","mount","module","exports","app","baseRoute","options","graphqlHTTP","tryRequire","middlewares","schemaProvider","graphqlOpts","schemaFactory","resolve","backendPath","schemaObj","schema","rootValue","router","useMiddlewares","use"],"mappings":"AAAA,aAEA,MAAMA,KAAOC,QAAQ,QACrB,KAAM,CAAEC,oBAAoB,CAAE,CAAGD,QAAQ,eACzC,MAAME,IAAMF,QAAQ,OACpB,MAAMG,MAAQH,QAAQ,YAyBtBI,CAAAA,OAAOC,OAAO,CAAG,MAAOC,IAAKC,UAAWC,UAAY,CAChD,MAAMC,YAAcH,IAAII,UAAU,CAAC,eAEnC,KAAM,CAAEC,WAAW,CAAEC,cAAc,CAAE,GAAGC,YAAa,CAAGL,QAExD,GAAI,CAACI,eAAgB,CACjB,MAAM,IAAIX,qBACN,iCACAK,IACA,CAAC,QAAQ,EAAEC,UAAU,uBAAuB,CAAC,CAC/C,AACN,CAAC,AAED,MAAMO,cAAgBd,QAAQD,KAAKgB,OAAO,CAACT,IAAIU,WAAW,CAAEJ,iBAC5D,MAAMK,UAAY,MAAMH,cAAcR,KAEtC,GAAI,CAACW,UAAUC,MAAM,CAAE,CACnB,MAAM,IAAIjB,qBACN,2EACAK,IACA,CAAC,QAAQ,EAAEC,UAAU,uBAAuB,CAAC,CAC/C,AACN,CAAC,AAEDM,YAAYK,MAAM,CAAGD,UAAUC,MAAM,CACrC,GAAID,UAAUE,SAAS,CAAE,CACrBN,YAAYM,SAAS,CAAGF,UAAUE,SAAS,AAC/C,CAAC,AAED,IAAIC,OAAS,IAAIlB,IAEjB,GAAIS,YAAa,CACbL,IAAIe,cAAc,CAACD,OAAQT,YAC/B,CAAC,AAEDS,OAAOE,GAAG,CAACnB,MAAM,IAAKM,YAAYI,eAClCP,IAAIc,MAAM,CAACjB,KAAK,CAACI,UAAWa,OAChC"}