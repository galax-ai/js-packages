{"version":3,"sources":["../../lib/routers/rest.js"],"sourcesContent":["import path from 'node:path';\nimport { _, text, hasMethod, esmCheck } from '@galaxar/utils';\nimport { globSync } from 'glob';\n\n/**\n * RESTful router.\n * @module Router_Rest\n */\n\n/**\n * Create a RESTful router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {objects} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      rest: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            query\n *  /:resource                     post           create\n *  /:resource/:id                 get            detail\n *  /:resource/:id                 put            update\n *  /:resource/:id                 delete            remove\n */\nconst restRouter = (app, baseRoute, options) => {\n    const Router = app.tryRequire('@koa/router');\n\n    let resourcePath = path.resolve(app.sourcePath, options.resourcesPath ?? 'resources');\n\n    let router = baseRoute === '/' ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, '/') });\n\n    app.useMiddleware(router, app.getMiddlewareFactory('jsonError')(options.errorOptions, app), 'jsonError');\n\n    if (options.middlewares) {\n        app.useMiddlewares(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**', '*.js');\n    let files = globSync(resourcesPath, { nodir: true });\n\n    _.each(files, (file) => {\n        let relPath = path.relative(resourcePath, file);\n        let batchUrl = text.ensureStartsWith(\n            relPath\n                .substring(0, relPath.length - 3)\n                .split(path.sep)\n                .map((p) => _.kebabCase(p))\n                .join('/'),\n            '/'\n        );\n        let singleUrl = batchUrl + '/:id';\n\n        let controller = esmCheck(require(file));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        if (hasMethod(controller, 'query')) {\n            app.addRoute(router, 'get', batchUrl, (ctx) => controller.query(ctx));\n        }\n\n        if (hasMethod(controller, 'create')) {\n            app.addRoute(router, 'post', batchUrl, (ctx) => controller.create(ctx));\n        }\n\n        if (hasMethod(controller, 'detail')) {\n            app.addRoute(router, 'get', singleUrl, (ctx) => controller.detail(ctx));\n        }\n\n        if (hasMethod(controller, 'update')) {\n            app.addRoute(router, 'put', singleUrl, (ctx) => controller.update(ctx));\n        }\n\n        if (hasMethod(controller, 'remove')) {\n            app.addRoute(router, 'del', singleUrl, (ctx) => controller.remove(ctx));\n        }\n    });\n\n    app.addRouter(router);\n};\n\nexport default restRouter;\n"],"names":["restRouter","app","baseRoute","options","Router","tryRequire","resourcePath","path","resolve","sourcePath","resourcesPath","router","prefix","text","dropIfEndsWith","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares","join","files","globSync","nodir","_","each","file","relPath","relative","batchUrl","ensureStartsWith","substring","length","split","sep","map","p","kebabCase","singleUrl","controller","esmCheck","require","hasMethod","addRoute","ctx","query","create","detail","update","remove","addRouter"],"mappings":";;;;+BAyFA;;;eAAA;;;iEAzFiB;uBAC4B;sBACpB;;;;;;AAEzB;;;CAGC,GAED;;;;;;;;;;;;;;;;;;;;;CAqBC,GACD,MAAMA,aAAa,CAACC,KAAKC,WAAWC,UAAY;IAC5C,MAAMC,SAASH,IAAII,UAAU,CAAC;IAE9B,IAAIC,eAAeC,iBAAI,CAACC,OAAO,CAACP,IAAIQ,UAAU,EAAEN,QAAQO,aAAa,IAAI;IAEzE,IAAIC,SAAST,cAAc,MAAM,IAAIE,WAAW,IAAIA,OAAO;QAAEQ,QAAQC,WAAI,CAACC,cAAc,CAACZ,WAAW;IAAK,EAAE;IAE3GD,IAAIc,aAAa,CAACJ,QAAQV,IAAIe,oBAAoB,CAAC,aAAab,QAAQc,YAAY,EAAEhB,MAAM;IAE5F,IAAIE,QAAQe,WAAW,EAAE;QACrBjB,IAAIkB,cAAc,CAACR,QAAQR,QAAQe,WAAW;IAClD,CAAC;IAED,IAAIR,gBAAgBH,iBAAI,CAACa,IAAI,CAACd,cAAc,MAAM;IAClD,IAAIe,QAAQC,IAAAA,cAAQ,EAACZ,eAAe;QAAEa,OAAO,IAAI;IAAC;IAElDC,QAAC,CAACC,IAAI,CAACJ,OAAO,CAACK,OAAS;QACpB,IAAIC,UAAUpB,iBAAI,CAACqB,QAAQ,CAACtB,cAAcoB;QAC1C,IAAIG,WAAWhB,WAAI,CAACiB,gBAAgB,CAChCH,QACKI,SAAS,CAAC,GAAGJ,QAAQK,MAAM,GAAG,GAC9BC,KAAK,CAAC1B,iBAAI,CAAC2B,GAAG,EACdC,GAAG,CAAC,CAACC,IAAMZ,QAAC,CAACa,SAAS,CAACD,IACvBhB,IAAI,CAAC,MACV;QAEJ,IAAIkB,YAAYT,WAAW;QAE3B,IAAIU,aAAaC,IAAAA,eAAQ,EAACC,QAAQf;QAElC,IAAI,OAAOa,eAAe,YAAY;YAClCA,aAAa,IAAIA,WAAWtC;QAChC,CAAC;QAED,IAAIyC,IAAAA,gBAAS,EAACH,YAAY,UAAU;YAChCtC,IAAI0C,QAAQ,CAAChC,QAAQ,OAAOkB,UAAU,CAACe,MAAQL,WAAWM,KAAK,CAACD;QACpE,CAAC;QAED,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjCtC,IAAI0C,QAAQ,CAAChC,QAAQ,QAAQkB,UAAU,CAACe,MAAQL,WAAWO,MAAM,CAACF;QACtE,CAAC;QAED,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjCtC,IAAI0C,QAAQ,CAAChC,QAAQ,OAAO2B,WAAW,CAACM,MAAQL,WAAWQ,MAAM,CAACH;QACtE,CAAC;QAED,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjCtC,IAAI0C,QAAQ,CAAChC,QAAQ,OAAO2B,WAAW,CAACM,MAAQL,WAAWS,MAAM,CAACJ;QACtE,CAAC;QAED,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjCtC,IAAI0C,QAAQ,CAAChC,QAAQ,OAAO2B,WAAW,CAACM,MAAQL,WAAWU,MAAM,CAACL;QACtE,CAAC;IACL;IAEA3C,IAAIiD,SAAS,CAACvC;AAClB;MAEA,WAAeX"}