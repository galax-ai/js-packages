{"version":3,"sources":["../../lib/appFeatures/socketServer.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Socket based Rpc Server\n * @module Feature_SocketServer\n * \n * middleware: (packet, next) => {}\n */\n\nconst path = require('path');\nconst { _, url: urlUtil, text } = require('@genx/july');\nconst {\n    Feature,\n    Helpers: { ensureFeatureName },\n} = require(\"@genx/app\");\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst DEFAULT_CONTROLLER_PATH = 'events';\n\nfunction loadEventHandler(appModule, namespace, controllerBasePath, handlerName, isMiddleware = false) {\n    let pos = handlerName.lastIndexOf('.');\n    if (pos < 0) {\n        if (isMiddleware) {\n            throw new InvalidConfiguration(\n                `Invalid middleware reference: ${handlerName}`,\n                appModule,\n                namespace ? `socketServer.routes[\"${namespace}\"].middlewares` : 'socketServer.middlewares'\n            );\n        } else {\n            throw new InvalidConfiguration(\n                `Invalid event handler reference: ${handlerName}`,\n                appModule,\n                `socketServer.routes[\"${namespace}\"].events`\n            );\n        }\n    }\n\n    let controller = handlerName.substring(0, pos);\n    let action = handlerName.substring(pos + 1);\n\n    let controllerPath = path.resolve(controllerBasePath, controller + '.js');\n    let ctrl = require(controllerPath);\n    \n    let middlewareHandler = ctrl[action];\n    if (typeof middlewareHandler !== 'function') {\n        if (isMiddleware) {\n            throw new InvalidConfiguration(\n                `Middleware function not found: ${handlerName}`,\n                appModule,\n                namespace ? `socketServer.routes[\"${namespace}\"].middlewares` : 'socketServer.middlewares'\n            );\n        } else {\n            throw new InvalidConfiguration(\n                `Event handler function not found: ${handlerName}`,\n                appModule,\n                `socketServer.routes[\"${namespace}\"].events`\n            );\n        }\n    }\n\n    return middlewareHandler;\n}\n\nfunction startSocketServer(appModule, serviceName, config) {\n    const ioServer = appModule.tryRequire('socket.io');\n\n    let { port, logger, path: wsPath, ...options } = config;\n\n    if (logger && typeof logger === 'string') {\n        logger = appModule.getService('logger.' + logger);\n    }\n\n    function log(...args) {\n        logger && logger.log(...args);\n    }\n\n    function logError(error) {\n        logger && logger.log('error', error.message || error);\n    }\n\n    let io, standalone = false;\n\n    let endpointPath = wsPath ? urlUtil.join(appModule.route, wsPath) : appModule.route;\n    endpointPath = text.ensureStartsWith(endpointPath, '/');\n\n    options.path = endpointPath;\n\n    if (port) {\n        io = ioServer(options);\n        standalone = true;\n        appModule.log('verbose', `A standalone socket server is listening at [port=${port}, path=${endpointPath}].`);        \n    } else {\n        io = ioServer(appModule.server.httpServer, options);\n        port = appModule.server.port;\n        appModule.log('verbose', `A socket server is listening at [path=${endpointPath}].`);        \n    }\n\n    io.on('connection', socket => {\n        log('info', 'client connect', {\n            endpoint: endpointPath,\n            port,\n            id: socket.id,\n            ...socket.handshake\n        });\n\n        socket.on('disconnect', () => {\n            log('info', 'client disconnect', { \n                endpoint: endpointPath,\n                port,\n                id: socket.id\n            });\n        });\n    });\n\n    let controllersPath = path.resolve(appModule.backendPath, config.controllersPath || DEFAULT_CONTROLLER_PATH);\n\n    if (config.middlewares) {\n        io.use(loadEventHandler(appModule, null, controllersPath, middlewareName, true));\n    }\n\n    if (_.isEmpty(config.routes)) {\n        throw new InvalidConfiguration(\n            'Missing routes config.',\n            appModule,\n            'socketServer.routes'\n        );\n    }        \n\n    _.forOwn(config.routes, (info, name) => {\n        name = text.ensureStartsWith(name, '/');\n\n        let namespaceChannel = io.of(name);\n\n        if (info.middlewares) {\n            let m = Array.isArray(info.middlewares) ? info.middlewares : [ info.middlewares ];\n            m.forEach(middlewareName => {\n                namespaceChannel.use(loadEventHandler(appModule, name, controllersPath, middlewareName, true));\n            });\n        }\n\n        let eventHandlers;\n\n        if (!info.controller) {               \n            throw new InvalidConfiguration(\n                'Missing controller.',\n                appModule,\n                `socketServer.routes[${name}]`\n            );\n        }\n            \n        let rpcControllerPath = path.resolve(controllersPath, info.controller + '.js');\n        let isObj = false;\n        const controllerObj = require(rpcControllerPath);\n        if (typeof controllerObj === 'function') {\n            eventHandlers = new controllerObj(appModule);\n            isObj = true;\n        } else {\n            eventHandlers = controllerObj;\n        }\n\n        appModule.log('verbose', `[${serviceName}] controller \"${info.controller}\" is attached for namespace \"${name}\".`);    \n\n        const _eventHandlers = {};\n        \n        info.events && _.each(info.events, (methodName, eventName) => {\n            if (typeof eventHandlers[methodName] === 'function') {\n                _eventHandlers[eventName] = eventHandlers[methodName];\n            }\n        });\n\n        function invoke(ctx, data, fn, cb) {\n            console.log('invoke ..........');\n\n            if (isObj) {\n                fn = fn.bind(eventHandlers);\n            }\n        \n            fn(ctx, data).then(result => result != null && cb && cb(result)).catch(logError);\n        }\n        \n        namespaceChannel.on('connect', function (socket) {\n            let ctx = { appModule, socket };  \n\n            //Register event handlers\n            _.forOwn(_eventHandlers, (handler, event) => {\n                socket.on(event, (data, cb) => invoke(ctx, data, handler, cb));\n            });                \n\n            if (eventHandlers.onConnect) {                \n                invoke(ctx, null, eventHandlers.onConnect);\n            }      \n            \n            log('verbose', 'namespace connect', { \n                endpoint: endpointPath,\n                port,\n                id: socket.id, \n                namespace: name \n            });       \n        });\n    });\n\n    if (standalone) {\n        io.listen(config.port);\n    }\n\n    return io;\n}\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at plugin stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    groupable: true,\n\n    /**\n     * The socket server options.\n     * @typedef {Object} ServerOptions\n     * @property {string} [path=/socket.io] - name of the path to capture\n     * @property {boolean} [serveClient=true] - whether to serve the client files\n     * @property {Adapter} adapter - the adapter to use. Defaults to an instance of the Adapter that ships with socket.io which is memory based. See socket.io-adapter\n     * @property {string} origins - the allowed origins\n     * @property {Parser} parser - the parser to use. Defaults to an instance of the Parser that ships with socket.io. See socket.io-parser\n     * @see {@link https://socket.io/docs/server-api/} for more options\n     */\n\n    /**\n     * Load the rpc Server\n     * @param {AppModule} app - The app module object\n     * @param {ServerOptions} options - Rpc server config\n     */\n    load_: (app, options, name) => {   \n        ensureFeatureName(name);\n\n        let io = startSocketServer(app, name, options);\n\n        //default socket server\n        app.registerService(name, io);\n    }\n};"],"names":["path","require","_","url","urlUtil","text","Feature","Helpers","ensureFeatureName","InvalidConfiguration","DEFAULT_CONTROLLER_PATH","loadEventHandler","appModule","namespace","controllerBasePath","handlerName","isMiddleware","pos","lastIndexOf","controller","substring","action","controllerPath","resolve","ctrl","middlewareHandler","startSocketServer","serviceName","config","ioServer","tryRequire","port","logger","wsPath","options","getService","log","args","logError","error","message","io","standalone","endpointPath","join","route","ensureStartsWith","server","httpServer","on","socket","endpoint","id","handshake","controllersPath","backendPath","middlewares","use","middlewareName","isEmpty","routes","forOwn","info","name","namespaceChannel","of","m","Array","isArray","forEach","eventHandlers","rpcControllerPath","isObj","controllerObj","_eventHandlers","events","each","methodName","eventName","invoke","ctx","data","fn","cb","console","bind","then","result","catch","handler","event","onConnect","listen","module","exports","type","PLUGIN","groupable","load_","app","registerService"],"mappings":"AAAA,aASA,MAAMA,KAAOC,QAAQ,QACrB,KAAM,CAAEC,CAAC,CAAEC,IAAKC,OAAO,CAAEC,IAAI,CAAE,CAAGJ,QAAQ,cAC1C,KAAM,CACFK,OAAO,CACPC,QAAS,CAAEC,iBAAiB,CAAE,CACjC,CAAGP,QAAQ,aACZ,KAAM,CAAEQ,oBAAoB,CAAE,CAAGR,QAAQ,eAEzC,MAAMS,wBAA0B,SAEhC,SAASC,iBAAiBC,SAAS,CAAEC,SAAS,CAAEC,kBAAkB,CAAEC,WAAW,CAAEC,aAAe,KAAK,CAAE,CACnG,IAAIC,IAAMF,YAAYG,WAAW,CAAC,KAClC,GAAID,IAAM,EAAG,CACT,GAAID,aAAc,CACd,MAAM,IAAIP,qBACN,CAAC,8BAA8B,EAAEM,YAAY,CAAC,CAC9CH,UACAC,UAAY,CAAC,qBAAqB,EAAEA,UAAU,cAAc,CAAC,CAAG,0BAA0B,CAC5F,AACN,KAAO,CACH,MAAM,IAAIJ,qBACN,CAAC,iCAAiC,EAAEM,YAAY,CAAC,CACjDH,UACA,CAAC,qBAAqB,EAAEC,UAAU,SAAS,CAAC,CAC9C,AACN,CAAC,AACL,CAAC,AAED,IAAIM,WAAaJ,YAAYK,SAAS,CAAC,EAAGH,KAC1C,IAAII,OAASN,YAAYK,SAAS,CAACH,IAAM,GAEzC,IAAIK,eAAiBtB,KAAKuB,OAAO,CAACT,mBAAoBK,WAAa,OACnE,IAAIK,KAAOvB,QAAQqB,gBAEnB,IAAIG,kBAAoBD,IAAI,CAACH,OAAO,CACpC,GAAI,OAAOI,oBAAsB,WAAY,CACzC,GAAIT,aAAc,CACd,MAAM,IAAIP,qBACN,CAAC,+BAA+B,EAAEM,YAAY,CAAC,CAC/CH,UACAC,UAAY,CAAC,qBAAqB,EAAEA,UAAU,cAAc,CAAC,CAAG,0BAA0B,CAC5F,AACN,KAAO,CACH,MAAM,IAAIJ,qBACN,CAAC,kCAAkC,EAAEM,YAAY,CAAC,CAClDH,UACA,CAAC,qBAAqB,EAAEC,UAAU,SAAS,CAAC,CAC9C,AACN,CAAC,AACL,CAAC,AAED,OAAOY,iBACX,CAEA,SAASC,kBAAkBd,SAAS,CAAEe,WAAW,CAAEC,MAAM,CAAE,CACvD,MAAMC,SAAWjB,UAAUkB,UAAU,CAAC,aAEtC,GAAI,CAAEC,IAAI,CAAEC,MAAM,CAAEhC,KAAMiC,MAAM,CAAE,GAAGC,QAAS,CAAGN,OAEjD,GAAII,QAAU,OAAOA,SAAW,SAAU,CACtCA,OAASpB,UAAUuB,UAAU,CAAC,UAAYH,OAC9C,CAAC,AAED,SAASI,IAAI,GAAGC,IAAI,CAAE,CAClBL,QAAUA,OAAOI,GAAG,IAAIC,KAC5B,CAEA,SAASC,SAASC,KAAK,CAAE,CACrBP,QAAUA,OAAOI,GAAG,CAAC,QAASG,MAAMC,OAAO,EAAID,MACnD,CAEA,IAAIE,GAAIC,WAAa,KAAK,CAE1B,IAAIC,aAAeV,OAAS7B,QAAQwC,IAAI,CAAChC,UAAUiC,KAAK,CAAEZ,QAAUrB,UAAUiC,KAAK,CACnFF,aAAetC,KAAKyC,gBAAgB,CAACH,aAAc,IAEnDT,CAAAA,QAAQlC,IAAI,CAAG2C,aAEf,GAAIZ,KAAM,CACNU,GAAKZ,SAASK,SACdQ,WAAa,IAAI,CACjB9B,UAAUwB,GAAG,CAAC,UAAW,CAAC,iDAAiD,EAAEL,KAAK,OAAO,EAAEY,aAAa,EAAE,CAAC,CAC/G,KAAO,CACHF,GAAKZ,SAASjB,UAAUmC,MAAM,CAACC,UAAU,CAAEd,SAC3CH,KAAOnB,UAAUmC,MAAM,CAAChB,IAAI,CAC5BnB,UAAUwB,GAAG,CAAC,UAAW,CAAC,sCAAsC,EAAEO,aAAa,EAAE,CAAC,CACtF,CAAC,AAEDF,GAAGQ,EAAE,CAAC,aAAcC,QAAU,CAC1Bd,IAAI,OAAQ,iBAAkB,CAC1Be,SAAUR,aACVZ,KACAqB,GAAIF,OAAOE,EAAE,CACb,GAAGF,OAAOG,SAAS,AACvB,GAEAH,OAAOD,EAAE,CAAC,aAAc,IAAM,CAC1Bb,IAAI,OAAQ,oBAAqB,CAC7Be,SAAUR,aACVZ,KACAqB,GAAIF,OAAOE,EAAE,AACjB,EACJ,EACJ,GAEA,IAAIE,gBAAkBtD,KAAKuB,OAAO,CAACX,UAAU2C,WAAW,CAAE3B,OAAO0B,eAAe,EAAI5C,yBAEpF,GAAIkB,OAAO4B,WAAW,CAAE,CACpBf,GAAGgB,GAAG,CAAC9C,iBAAiBC,UAAW,IAAI,CAAE0C,gBAAiBI,eAAgB,IAAI,EAClF,CAAC,AAED,GAAIxD,EAAEyD,OAAO,CAAC/B,OAAOgC,MAAM,EAAG,CAC1B,MAAM,IAAInD,qBACN,yBACAG,UACA,sBACF,AACN,CAAC,AAEDV,EAAE2D,MAAM,CAACjC,OAAOgC,MAAM,CAAE,CAACE,KAAMC,OAAS,CACpCA,KAAO1D,KAAKyC,gBAAgB,CAACiB,KAAM,KAEnC,IAAIC,iBAAmBvB,GAAGwB,EAAE,CAACF,MAE7B,GAAID,KAAKN,WAAW,CAAE,CAClB,IAAIU,EAAIC,MAAMC,OAAO,CAACN,KAAKN,WAAW,EAAIM,KAAKN,WAAW,CAAG,CAAEM,KAAKN,WAAW,CAAE,CACjFU,EAAEG,OAAO,CAACX,iBAAkB,CACxBM,iBAAiBP,GAAG,CAAC9C,iBAAiBC,UAAWmD,KAAMT,gBAAiBI,gBAAgB,IAAI,EAChG,EACJ,CAAC,AAED,IAAIY,cAEJ,GAAI,CAACR,KAAK3C,UAAU,CAAE,CAClB,MAAM,IAAIV,qBACN,sBACAG,UACA,CAAC,oBAAoB,EAAEmD,KAAK,CAAC,CAAC,CAChC,AACN,CAAC,AAED,IAAIQ,kBAAoBvE,KAAKuB,OAAO,CAAC+B,gBAAiBQ,KAAK3C,UAAU,CAAG,OACxE,IAAIqD,MAAQ,KAAK,CACjB,MAAMC,cAAgBxE,QAAQsE,mBAC9B,GAAI,OAAOE,gBAAkB,WAAY,CACrCH,cAAgB,IAAIG,cAAc7D,WAClC4D,MAAQ,IAAI,AAChB,KAAO,CACHF,cAAgBG,aACpB,CAAC,AAED7D,UAAUwB,GAAG,CAAC,UAAW,CAAC,CAAC,EAAET,YAAY,cAAc,EAAEmC,KAAK3C,UAAU,CAAC,6BAA6B,EAAE4C,KAAK,EAAE,CAAC,EAEhH,MAAMW,eAAiB,CAAC,CAExBZ,CAAAA,KAAKa,MAAM,EAAIzE,EAAE0E,IAAI,CAACd,KAAKa,MAAM,CAAE,CAACE,WAAYC,YAAc,CAC1D,GAAI,OAAOR,aAAa,CAACO,WAAW,GAAK,WAAY,CACjDH,cAAc,CAACI,UAAU,CAAGR,aAAa,CAACO,WAAW,AACzD,CAAC,AACL,GAEA,SAASE,OAAOC,GAAG,CAAEC,IAAI,CAAEC,EAAE,CAAEC,EAAE,CAAE,CAC/BC,QAAQhD,GAAG,CAAC,qBAEZ,GAAIoC,MAAO,CACPU,GAAKA,GAAGG,IAAI,CAACf,cACjB,CAAC,AAEDY,GAAGF,IAAKC,MAAMK,IAAI,CAACC,QAAUA,QAAU,IAAI,EAAIJ,IAAMA,GAAGI,SAASC,KAAK,CAAClD,SAC3E,CAEA0B,iBAAiBf,EAAE,CAAC,UAAW,SAAUC,MAAM,CAAE,CAC7C,IAAI8B,IAAM,CAAEpE,UAAWsC,MAAO,EAG9BhD,EAAE2D,MAAM,CAACa,eAAgB,CAACe,QAASC,QAAU,CACzCxC,OAAOD,EAAE,CAACyC,MAAO,CAACT,KAAME,KAAOJ,OAAOC,IAAKC,KAAMQ,QAASN,IAC9D,GAEA,GAAIb,cAAcqB,SAAS,CAAE,CACzBZ,OAAOC,IAAK,IAAI,CAAEV,cAAcqB,SAAS,CAC7C,CAAC,AAEDvD,IAAI,UAAW,oBAAqB,CAChCe,SAAUR,aACVZ,KACAqB,GAAIF,OAAOE,EAAE,CACbvC,UAAWkD,IACf,EACJ,EACJ,GAEA,GAAIrB,WAAY,CACZD,GAAGmD,MAAM,CAAChE,OAAOG,IAAI,CACzB,CAAC,AAED,OAAOU,EACX,CAEAoD,OAAOC,OAAO,CAAG,CAMbC,KAAMzF,QAAQ0F,MAAM,CAEpBC,UAAW,IAAI,CAkBfC,MAAO,CAACC,IAAKjE,QAAS6B,OAAS,CAC3BvD,kBAAkBuD,MAElB,IAAItB,GAAKf,kBAAkByE,IAAKpC,KAAM7B,SAGtCiE,IAAIC,eAAe,CAACrC,KAAMtB,GAC9B,CACJ"}