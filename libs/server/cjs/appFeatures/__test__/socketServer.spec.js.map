{"version":3,"sources":["../../../lib/appFeatures/__test__/socketServer.spec.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { fs } = require('@genx/sys');\nconst WebServer = require('../../../src/WebServer');\n\nconst WORKING_DIR = path.resolve(__dirname, '../../../test/temp');\n\nconst WelcomeMessage = \"What's up?\";\n\ndescribe('unit:features:socketServer', function () {\n    let webServer;\n\n    before(async function () {\n        fs.emptyDirSync(WORKING_DIR);\n        let controllerPath = path.join(WORKING_DIR, 'server/events');\n        fs.ensureDirSync(controllerPath);\n        fs.copyFileSync(path.resolve(__dirname, '../../../test/fixtures/files/heartbeat.js'), path.join(controllerPath, 'heartbeat.js'));\n        fs.copyFileSync(path.resolve(__dirname, '../../../test/fixtures/files/welcome.js'), path.join(controllerPath, 'welcome.js'));\n\n        webServer = new WebServer('test server', { \n            workingPath: WORKING_DIR\n        });\n\n        webServer.once('configLoaded', () => {\n            webServer.config = {                \n                \"koa\": {                    \n                },\n                \"socketServer\": {\n                    \"path\": \"/ws-api\",                    \n                    \"routes\": {    \n                        \"/heartbeat\": {\n                            \"controller\": \"heartbeat\",\n                            \"onConnect\": \"welcome.send\"\n                        }\n                    }        \n                }\n            };\n        });\n\n        return webServer.start_();\n    });\n\n    after(async function () {        \n        await webServer.stop_();    \n        fs.removeSync(WORKING_DIR);\n    });\n\n    it('welcome message', function (done) {              \n        const { Manager } = require('socket.io-client');\n        const mgr = new Manager('http://'+ webServer.host, { path: '/ws-api' });\n        let heartbeatWs = mgr.socket('/heartbeat')\n\n        heartbeatWs.on('welcome', data => {\n            data.should.be.equal(WelcomeMessage);\n\n            heartbeatWs.emit('echo', 'hello', (echo) => {                    \n                echo.should.be.equal('hello');\n                heartbeatWs.close();\n                done();\n            });                    \n        });\n\n        heartbeatWs.on('connect_error', (error) => {\n            console.error(error);\n        });\n    });\n});"],"names":["path","require","fs","WebServer","WORKING_DIR","resolve","__dirname","WelcomeMessage","describe","webServer","before","emptyDirSync","controllerPath","join","ensureDirSync","copyFileSync","workingPath","once","config","start_","after","stop_","removeSync","it","done","Manager","mgr","host","heartbeatWs","socket","on","data","should","be","equal","emit","echo","close","error","console"],"mappings":"AAAA,aAEA,MAAMA,KAAOC,QAAQ,QACrB,KAAM,CAAEC,EAAE,CAAE,CAAGD,QAAQ,aACvB,MAAME,UAAYF,QAAQ,0BAE1B,MAAMG,YAAcJ,KAAKK,OAAO,CAACC,UAAW,sBAE5C,MAAMC,eAAiB,aAEvBC,SAAS,6BAA8B,UAAY,CAC/C,IAAIC,UAEJC,OAAO,gBAAkB,CACrBR,GAAGS,YAAY,CAACP,aAChB,IAAIQ,eAAiBZ,KAAKa,IAAI,CAACT,YAAa,iBAC5CF,GAAGY,aAAa,CAACF,gBACjBV,GAAGa,YAAY,CAACf,KAAKK,OAAO,CAACC,UAAW,6CAA8CN,KAAKa,IAAI,CAACD,eAAgB,iBAChHV,GAAGa,YAAY,CAACf,KAAKK,OAAO,CAACC,UAAW,2CAA4CN,KAAKa,IAAI,CAACD,eAAgB,eAE9GH,UAAY,IAAIN,UAAU,cAAe,CACrCa,YAAaZ,WACjB,GAEAK,UAAUQ,IAAI,CAAC,eAAgB,IAAM,CACjCR,UAAUS,MAAM,CAAG,CACf,MAAO,CACP,EACA,eAAgB,CACZ,OAAQ,UACR,SAAU,CACN,aAAc,CACV,aAAc,YACd,YAAa,cACjB,CACJ,CACJ,CACJ,CACJ,GAEA,OAAOT,UAAUU,MAAM,EAC3B,GAEAC,MAAM,gBAAkB,CACpB,MAAMX,UAAUY,KAAK,GACrBnB,GAAGoB,UAAU,CAAClB,YAClB,GAEAmB,GAAG,kBAAmB,SAAUC,IAAI,CAAE,CAClC,KAAM,CAAEC,OAAO,CAAE,CAAGxB,QAAQ,oBAC5B,MAAMyB,IAAM,IAAID,QAAQ,UAAWhB,UAAUkB,IAAI,CAAE,CAAE3B,KAAM,SAAU,GACrE,IAAI4B,YAAcF,IAAIG,MAAM,CAAC,cAE7BD,YAAYE,EAAE,CAAC,UAAWC,MAAQ,CAC9BA,KAAKC,MAAM,CAACC,EAAE,CAACC,KAAK,CAAC3B,gBAErBqB,YAAYO,IAAI,CAAC,OAAQ,QAAS,AAACC,MAAS,CACxCA,KAAKJ,MAAM,CAACC,EAAE,CAACC,KAAK,CAAC,SACrBN,YAAYS,KAAK,GACjBb,MACJ,EACJ,GAEAI,YAAYE,EAAE,CAAC,gBAAiB,AAACQ,OAAU,CACvCC,QAAQD,KAAK,CAACA,MAClB,EACJ,EACJ"}