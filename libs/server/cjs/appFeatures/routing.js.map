{"version":3,"sources":["../../lib/appFeatures/routing.js"],"sourcesContent":["/**\n * Enable web request routing.\n * @module Feature_Routing\n */\n\nimport { Feature } from '@galaxar/app';\nimport { _, batchAsync_, isPlainObject } from '@galaxar/utils';\n\nexport default {\n    /**\n     * This feature is loaded at ready (final) stage.\n     * @member {string}\n     */\n    stage: Feature.PLUGIN,\n\n    /**\n     * Load the feature.\n     * @param {Routable} app - The app module object\n     * @param {object} routes - Routes and configuration\n     * @returns {Promise.<*>}\n     */\n    load_: (app, routes) => {\n        app.on('after:' + Feature.PLUGIN, () =>\n            batchAsync_(routes, async (routersConfig, route) => {\n                if (isPlainObject(routersConfig)) {\n                    return batchAsync_(routersConfig, async (options, type) => {\n                        let loader_ = require('../routers/' + type).default;\n\n                        app.log('verbose', `A \"${type}\" router is created at \"${route}\" in app [${app.name}].`);\n\n                        console.log(type, loader_);\n\n                        return loader_(app, route, options);\n                    });\n                } else {\n                    // 'route': 'method:/path'\n                    let mainRoute = '/',\n                        baseRoute = route;\n                    let pos = route.indexOf(':/');\n\n                    if (pos !== -1) {\n                        mainRoute = route.substring(0, pos + 2);\n                        baseRoute = route.substring(pos + 1);\n                    } else if (Array.isArray(routersConfig)) {\n                        //all handled by middleware chains\n                        mainRoute = 'all:/';\n                    }\n\n                    let rules = {\n                        [mainRoute]: routersConfig,\n                    };\n\n                    const loader_ = require('../routers/rule').default;\n                    app.log('verbose', `A \"rule\" router is created at \"${baseRoute}\" in app [${app.name}].`);\n\n                    return loader_(app, baseRoute, { rules: rules });\n                }\n            })\n        );\n    },\n};\n"],"names":["stage","Feature","PLUGIN","load_","app","routes","on","batchAsync_","routersConfig","route","isPlainObject","options","type","loader_","require","default","log","name","console","mainRoute","baseRoute","pos","indexOf","substring","Array","isArray","rules"],"mappings":"oGAQA,iDAAA,+BAHwB,qCACsB,wBAE9C,SAAe,CAKXA,MAAOC,YAAO,CAACC,MAAM,CAQrBC,MAAO,CAACC,IAAKC,SAAW,CACpBD,IAAIE,EAAE,CAAC,SAAWL,YAAO,CAACC,MAAM,CAAE,IAC9BK,GAAAA,kBAAW,EAACF,OAAQ,MAAOG,cAAeC,QAAU,CAChD,GAAIC,GAAAA,oBAAa,EAACF,eAAgB,CAC9B,MAAOD,GAAAA,kBAAW,EAACC,cAAe,MAAOG,QAASC,OAAS,CACvD,IAAIC,QAAUC,QAAQ,cAAgBF,MAAMG,OAAO,CAEnDX,IAAIY,GAAG,CAAC,UAAW,CAAC,GAAG,EAAEJ,KAAK,wBAAwB,EAAEH,MAAM,UAAU,EAAEL,IAAIa,IAAI,CAAC,EAAE,CAAC,EAEtFC,QAAQF,GAAG,CAACJ,KAAMC,SAElB,OAAOA,QAAQT,IAAKK,MAAOE,QAC/B,EACJ,KAAO,CAEH,IAAIQ,UAAY,IACZC,UAAYX,MAChB,IAAIY,IAAMZ,MAAMa,OAAO,CAAC,MAExB,GAAID,MAAQ,CAAC,EAAG,CACZF,UAAYV,MAAMc,SAAS,CAAC,EAAGF,IAAM,GACrCD,UAAYX,MAAMc,SAAS,CAACF,IAAM,EACtC,MAAO,GAAIG,MAAMC,OAAO,CAACjB,eAAgB,CAErCW,UAAY,OAChB,CAAC,AAED,IAAIO,MAAQ,CACR,CAACP,UAAU,CAAEX,aACjB,EAEA,MAAMK,QAAUC,QAAQ,mBAAmBC,OAAO,CAClDX,IAAIY,GAAG,CAAC,UAAW,CAAC,+BAA+B,EAAEI,UAAU,UAAU,EAAEhB,IAAIa,IAAI,CAAC,EAAE,CAAC,EAEvF,OAAOJ,QAAQT,IAAKgB,UAAW,CAAEM,MAAOA,KAAM,EAClD,CAAC,AACL,GAER,CACJ"}