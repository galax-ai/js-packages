{"version":3,"sources":["../../lib/appFeatures/middlewareFactory.js"],"sourcesContent":["/**\n * Enable middleware factory\n * @module Feature_MiddlewareFactory\n * \n * @example\n *   \"middlewareFactory\": {\n *       //new middleware name\n *       \"listOfMiddleware\": {\n *           \"middleware1\": { // options\n *               ...\n *           },\n *           \"middleware2\": { // options\n *               ...\n *           }\n *       },\n *        \"altListOfMiddleware\": [\n *           {\n *               \"name\": \"middleware1\",\n *               \"options\": { ... } \n *           },\n *           [ \"middleware2\", { ... } ],\n *           \"middleware3\"\n *       ]\n *   },\n */\n\nimport { _ } from \"@galaxar/utils\";\nimport { Feature } from \"@galaxar/app\";\nimport { InvalidConfiguration } from \"@galaxar/types\";\n\nexport default {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} factories - Object factories\n     * @returns {Promise.<*>}\n     */\n    load_: (app, factories) => {\n        _.forOwn(factories, (factoryInfo, name) => {\n            app.registerMiddlewareFactory(name, (opt, targetApp) => { \n                if (!_.isEmpty(opt)) {\n                    throw new InvalidConfiguration(\n                        'Middleware factory should be used with empty options.',\n                        app,\n                        `middlewareFactory.${name}`);\n                } \n\n                let chains;\n\n                if (_.isPlainObject(factoryInfo)) {\n                    chains = [];\n    \n                    _.forOwn(factoryInfo, (options, middleware) => {\n                        chains.push(app.getMiddlewareFactory(middleware)(options, targetApp));\n                    });                    \n                } else if (Array.isArray(factoryInfo)) {\n                    chains = factoryInfo.map((middlewareInfo, i) => {\n                        if (_.isPlainObject(middlewareInfo)) {\n                            if (!middlewareInfo.name) {\n                                throw new InvalidConfiguration(\n                                    'Missing referenced middleware name.',\n                                    app,\n                                    `middlewareFactory.${name}[${i}].name`);\n                            }\n\n                            return app.getMiddlewareFactory(middlewareInfo.name)(middlewareInfo.options, targetApp);\n                        }\n\n                        if (Array.isArray(middlewareInfo)) {\n                            if (middlewareInfo.length < 1 || middlewareInfo.length > 2 || typeof middlewareInfo[0] !== 'string') {\n                                throw new InvalidConfiguration(\n                                    'Invalid middleware factory item config.',\n                                    app,\n                                    `middlewareFactory.${name}[${i}]`);\n                            }\n\n                            return app.getMiddlewareFactory(middlewareInfo[0])(middlewareInfo.length > 1 ? middlewareInfo[1] : undefined, targetApp);\n                        }\n\n                        if (typeof middlewareInfo === 'string') {\n                            return app.getMiddlewareFactory(middlewareInfo)(undefined, targetApp);\n                        }\n\n                        throw new InvalidConfiguration(\n                            'Invalid middleware factory item config.',\n                            app,\n                            `middlewareFactory.${name}[${i}]`);\n                    });\n                } else {\n                    throw new InvalidConfiguration(\n                        'Invalid middleware factory config.',\n                        app,\n                        `middlewareFactory.${name}`);\n                }\n\n                return chains.length === 1 ? chains[0] : chains;\n            });\n        });\n    }\n};"],"names":["stage","Feature","INIT","load_","app","factories","_","forOwn","factoryInfo","name","registerMiddlewareFactory","opt","targetApp","isEmpty","InvalidConfiguration","chains","isPlainObject","options","middleware","push","getMiddlewareFactory","Array","isArray","map","middlewareInfo","i","length","undefined"],"mappings":"oGA8BA,iDAAA,iCAJkB,qCACM,qCACa,wBAErC,SAAe,CAKXA,MAAOC,YAAO,CAACC,IAAI,CAQnBC,MAAO,CAACC,IAAKC,YAAc,CACvBC,QAAC,CAACC,MAAM,CAACF,UAAW,CAACG,YAAaC,OAAS,CACvCL,IAAIM,yBAAyB,CAACD,KAAM,CAACE,IAAKC,YAAc,CACpD,GAAI,CAACN,QAAC,CAACO,OAAO,CAACF,KAAM,CACjB,MAAM,IAAIG,2BAAoB,CAC1B,wDACAV,IACA,CAAC,kBAAkB,EAAEK,KAAK,CAAC,CAAE,AACrC,CAAC,AAED,IAAIM,OAEJ,GAAIT,QAAC,CAACU,aAAa,CAACR,aAAc,CAC9BO,OAAS,EAAE,CAEXT,QAAC,CAACC,MAAM,CAACC,YAAa,CAACS,QAASC,aAAe,CAC3CH,OAAOI,IAAI,CAACf,IAAIgB,oBAAoB,CAACF,YAAYD,QAASL,WAC9D,EACJ,MAAO,GAAIS,MAAMC,OAAO,CAACd,aAAc,CACnCO,OAASP,YAAYe,GAAG,CAAC,CAACC,eAAgBC,IAAM,CAC5C,GAAInB,QAAC,CAACU,aAAa,CAACQ,gBAAiB,CACjC,GAAI,CAACA,eAAef,IAAI,CAAE,CACtB,MAAM,IAAIK,2BAAoB,CAC1B,sCACAV,IACA,CAAC,kBAAkB,EAAEK,KAAK,CAAC,EAAEgB,EAAE,MAAM,CAAC,CAAE,AAChD,CAAC,AAED,OAAOrB,IAAIgB,oBAAoB,CAACI,eAAef,IAAI,EAAEe,eAAeP,OAAO,CAAEL,UACjF,CAAC,AAED,GAAIS,MAAMC,OAAO,CAACE,gBAAiB,CAC/B,GAAIA,eAAeE,MAAM,CAAG,GAAKF,eAAeE,MAAM,CAAG,GAAK,OAAOF,cAAc,CAAC,EAAE,GAAK,SAAU,CACjG,MAAM,IAAIV,2BAAoB,CAC1B,0CACAV,IACA,CAAC,kBAAkB,EAAEK,KAAK,CAAC,EAAEgB,EAAE,CAAC,CAAC,CAAE,AAC3C,CAAC,AAED,OAAOrB,IAAIgB,oBAAoB,CAACI,cAAc,CAAC,EAAE,EAAEA,eAAeE,MAAM,CAAG,EAAIF,cAAc,CAAC,EAAE,CAAGG,SAAS,CAAEf,UAClH,CAAC,AAED,GAAI,OAAOY,iBAAmB,SAAU,CACpC,OAAOpB,IAAIgB,oBAAoB,CAACI,gBAAgBG,UAAWf,UAC/D,CAAC,AAED,MAAM,IAAIE,2BAAoB,CAC1B,0CACAV,IACA,CAAC,kBAAkB,EAAEK,KAAK,CAAC,EAAEgB,EAAE,CAAC,CAAC,CAAE,AAC3C,EACJ,KAAO,CACH,MAAM,IAAIX,2BAAoB,CAC1B,qCACAV,IACA,CAAC,kBAAkB,EAAEK,KAAK,CAAC,CAAE,AACrC,CAAC,AAED,OAAOM,OAAOW,MAAM,GAAK,EAAIX,MAAM,CAAC,EAAE,CAAGA,MAAM,AACnD,EACJ,EACJ,CACJ"}