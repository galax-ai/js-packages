{"version":3,"sources":["../../lib/helpers/httpMethod.js"],"sourcesContent":["const { _ } = require(\"@galaxar/utils\");\n\n/**\n * Decorator for http method\n * @param {*} method \n * @param {*} middlewares \n * @returns \n */\nfunction httpMethod(method, middlewares) {\n    if (arguments.length === 3) {\n        return httpMethod(\"get\")(...Array.prototype.slice.call(arguments));\n    }\n\n    return function (target, name, descriptor) {\n        let targetFunction,\n            isHof = false;\n\n        if (arguments.length === 1 && typeof target === \"function\") {\n            targetFunction = target;\n            isHof = true;\n        } else if (arguments.length === 1 && target.kind === \"method\") {\n            targetFunction = target.descriptor.value;\n            target.descriptor.enumerable = true;\n        } else if (descriptor && descriptor.value) {\n            targetFunction = descriptor.value;\n            descriptor.enumerable = true;\n        } else {\n            throw new Error(\"Unsupported scenario.\");\n        }\n\n        if (targetFunction) {\n            if (typeof method === \"string\") {\n                let pos = method.indexOf(\":/\");\n\n                if (pos !== -1) {\n                    if (pos === 0) {\n                        throw new Error(\"Invalid httpMethod decorator param: \" + method);\n                    }\n\n                    // like get:/, or post:/\n\n                    //override actionName as route\n                    targetFunction.__metaRoute = method.substr(pos + 1);\n                    method = method.substr(0, pos).toLocaleLowerCase();\n                }\n            } else {\n                method = \"get\";\n            }\n\n            targetFunction.__metaHttpMethod = method;\n\n            if (middlewares) {\n                if (_.isPlainObject(middlewares)) {\n                    targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({ name, options }));\n                } else {\n                    targetFunction.__metaMiddlewares = _.castArray(middlewares);\n                }\n            }\n        }\n\n        return isHof ? targetFunction : descriptor;\n    };\n}\n\nexport default httpMethod;\n"],"names":["_","require","httpMethod","method","middlewares","arguments","length","Array","prototype","slice","call","target","name","descriptor","targetFunction","isHof","kind","value","enumerable","Error","pos","indexOf","__metaRoute","substr","toLocaleLowerCase","__metaHttpMethod","isPlainObject","__metaMiddlewares","map","options","castArray"],"mappings":"oGAgEA,iDAAA,YAhEA,KAAM,CAAEA,CAAC,CAAE,CAAGC,QAAQ,kBAQtB,SAASC,WAAWC,MAAM,CAAEC,WAAW,CAAE,CACrC,GAAIC,UAAUC,MAAM,GAAK,EAAG,CACxB,OAAOJ,WAAW,UAAUK,MAAMC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACL,WAC3D,CAAC,AAED,OAAO,SAAUM,MAAM,CAAEC,IAAI,CAAEC,UAAU,CAAE,CACvC,IAAIC,eACAC,MAAQ,KAAK,CAEjB,GAAIV,UAAUC,MAAM,GAAK,GAAK,OAAOK,SAAW,WAAY,CACxDG,eAAiBH,OACjBI,MAAQ,IAAI,AAChB,MAAO,GAAIV,UAAUC,MAAM,GAAK,GAAKK,OAAOK,IAAI,GAAK,SAAU,CAC3DF,eAAiBH,OAAOE,UAAU,CAACI,KAAK,AACxCN,CAAAA,OAAOE,UAAU,CAACK,UAAU,CAAG,IAAI,AACvC,MAAO,GAAIL,YAAcA,WAAWI,KAAK,CAAE,CACvCH,eAAiBD,WAAWI,KAAK,AACjCJ,CAAAA,WAAWK,UAAU,CAAG,IAAI,AAChC,KAAO,CACH,MAAM,IAAIC,MAAM,wBAAyB,AAC7C,CAAC,AAED,GAAIL,eAAgB,CAChB,GAAI,OAAOX,SAAW,SAAU,CAC5B,IAAIiB,IAAMjB,OAAOkB,OAAO,CAAC,MAEzB,GAAID,MAAQ,CAAC,EAAG,CACZ,GAAIA,MAAQ,EAAG,CACX,MAAM,IAAID,MAAM,uCAAyChB,OAAQ,AACrE,CAAC,AAKDW,eAAeQ,WAAW,CAAGnB,OAAOoB,MAAM,CAACH,IAAM,GACjDjB,OAASA,OAAOoB,MAAM,CAAC,EAAGH,KAAKI,iBAAiB,EACpD,CAAC,AACL,KAAO,CACHrB,OAAS,KACb,CAAC,AAEDW,eAAeW,gBAAgB,CAAGtB,OAElC,GAAIC,YAAa,CACb,GAAIJ,EAAE0B,aAAa,CAACtB,aAAc,CAC9BU,eAAea,iBAAiB,CAAG3B,EAAE4B,GAAG,CAACxB,YAAa,CAACyB,QAASjB,OAAU,CAAA,CAAEA,KAAMiB,OAAQ,CAAA,EAC9F,KAAO,CACHf,eAAea,iBAAiB,CAAG3B,EAAE8B,SAAS,CAAC1B,YACnD,CAAC,AACL,CAAC,AACL,CAAC,AAED,OAAOW,MAAQD,eAAiBD,UAAU,AAC9C,CACJ,OAEA,SAAeX"}