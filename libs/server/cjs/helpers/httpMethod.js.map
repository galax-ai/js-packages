{"version":3,"sources":["../../lib/helpers/httpMethod.js"],"sourcesContent":["const { _, isPlainObject } = require('@galaxar/utils');\n\n/**\n * Decorator for http method\n * @param {*} method\n * @param {*} middlewares\n * @returns\n */\nfunction httpMethod(method, middlewares) {\n    if (arguments.length === 3) {\n        return httpMethod('get')(...Array.prototype.slice.call(arguments));\n    }\n\n    return function (target, name, descriptor) {\n        let targetFunction,\n            isHof = false;\n\n        if (arguments.length === 1 && typeof target === 'function') {\n            targetFunction = target;\n            isHof = true;\n        } else if (arguments.length === 1 && target.kind === 'method') {\n            targetFunction = target.descriptor.value;\n            target.descriptor.enumerable = true;\n        } else if (descriptor && descriptor.value) {\n            targetFunction = descriptor.value;\n            descriptor.enumerable = true;\n        } else {\n            throw new Error('Unsupported scenario.');\n        }\n\n        if (targetFunction) {\n            if (typeof method === 'string') {\n                let pos = method.indexOf(':/');\n\n                if (pos !== -1) {\n                    if (pos === 0) {\n                        throw new Error('Invalid httpMethod decorator param: ' + method);\n                    }\n\n                    // like get:/, or post:/\n\n                    //override actionName as route\n                    targetFunction.__metaRoute = method.substr(pos + 1);\n                    method = method.substr(0, pos).toLocaleLowerCase();\n                }\n            } else {\n                method = 'get';\n            }\n\n            targetFunction.__metaHttpMethod = method;\n\n            if (middlewares) {\n                if (isPlainObject(middlewares)) {\n                    targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({ name, options }));\n                } else {\n                    targetFunction.__metaMiddlewares = _.castArray(middlewares);\n                }\n            }\n        }\n\n        return isHof ? targetFunction : descriptor;\n    };\n}\n\nexport default httpMethod;\n"],"names":["_","isPlainObject","require","httpMethod","method","middlewares","arguments","length","Array","prototype","slice","call","target","name","descriptor","targetFunction","isHof","kind","value","enumerable","Error","pos","indexOf","__metaRoute","substr","toLocaleLowerCase","__metaHttpMethod","__metaMiddlewares","map","options","castArray"],"mappings":";;;;+BAgEA;;;eAAA;;;AAhEA,MAAM,EAAEA,EAAC,EAAEC,cAAa,EAAE,GAAGC,QAAQ;AAErC;;;;;CAKC,GACD,SAASC,WAAWC,MAAM,EAAEC,WAAW,EAAE;IACrC,IAAIC,UAAUC,MAAM,KAAK,GAAG;QACxB,OAAOJ,WAAW,UAAUK,MAAMC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACL;IAC3D,CAAC;IAED,OAAO,SAAUM,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAE;QACvC,IAAIC,gBACAC,QAAQ,KAAK;QAEjB,IAAIV,UAAUC,MAAM,KAAK,KAAK,OAAOK,WAAW,YAAY;YACxDG,iBAAiBH;YACjBI,QAAQ,IAAI;QAChB,OAAO,IAAIV,UAAUC,MAAM,KAAK,KAAKK,OAAOK,IAAI,KAAK,UAAU;YAC3DF,iBAAiBH,OAAOE,UAAU,CAACI,KAAK;YACxCN,OAAOE,UAAU,CAACK,UAAU,GAAG,IAAI;QACvC,OAAO,IAAIL,cAAcA,WAAWI,KAAK,EAAE;YACvCH,iBAAiBD,WAAWI,KAAK;YACjCJ,WAAWK,UAAU,GAAG,IAAI;QAChC,OAAO;YACH,MAAM,IAAIC,MAAM,yBAAyB;QAC7C,CAAC;QAED,IAAIL,gBAAgB;YAChB,IAAI,OAAOX,WAAW,UAAU;gBAC5B,IAAIiB,MAAMjB,OAAOkB,OAAO,CAAC;gBAEzB,IAAID,QAAQ,CAAC,GAAG;oBACZ,IAAIA,QAAQ,GAAG;wBACX,MAAM,IAAID,MAAM,yCAAyChB,QAAQ;oBACrE,CAAC;oBAED,wBAAwB;oBAExB,8BAA8B;oBAC9BW,eAAeQ,WAAW,GAAGnB,OAAOoB,MAAM,CAACH,MAAM;oBACjDjB,SAASA,OAAOoB,MAAM,CAAC,GAAGH,KAAKI,iBAAiB;gBACpD,CAAC;YACL,OAAO;gBACHrB,SAAS;YACb,CAAC;YAEDW,eAAeW,gBAAgB,GAAGtB;YAElC,IAAIC,aAAa;gBACb,IAAIJ,cAAcI,cAAc;oBAC5BU,eAAeY,iBAAiB,GAAG3B,EAAE4B,GAAG,CAACvB,aAAa,CAACwB,SAAShB,OAAU,CAAA;4BAAEA;4BAAMgB;wBAAQ,CAAA;gBAC9F,OAAO;oBACHd,eAAeY,iBAAiB,GAAG3B,EAAE8B,SAAS,CAACzB;gBACnD,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAOW,QAAQD,iBAAiBD,UAAU;IAC9C;AACJ;MAEA,WAAeX"}