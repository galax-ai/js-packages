{"version":3,"sources":["../../lib/helpers/Controller.js"],"sourcesContent":["import { ApplicationError } from '@galaxar/types';\n\nclass BasicController {\n    constructor(app) {\n        this.app = app;\n        this.apiWrapper = this.app.getService(this.app.settings?.apiWrapperService || 'apiWrapper');\n\n        if (!this.apiWrapper) {\n            throw new ApplicationError('\"apiWrapper\" service is required when using the built-in Controller.');\n        }\n    }\n\n    /**\n     * Try to send back data from time-to-live cache\n     * @param {*} ctx\n     * @param {*} key\n     * @returns {boolean}\n     */\n    trySendCache(ctx, key) {\n        if (ctx.query['no-cache']) {\n            return false;\n        }\n\n        const ttlCache = this.app.getService('ttlMemCache');\n        if (!ttlCache) {\n            throw new ApplicationError(\n                '\"ttlMemCache\" service is required. Please check npm module \"@galaxar/feat-utils/ttlMemCache\".'\n            );\n        }\n\n        const _cache = ttlCache.get(key);\n        if (_cache) {\n            this.send(ctx, ..._cache);\n            return true;\n        }\n        return false;\n    }\n\n    deleteCache(key) {\n        const ttlCache = this.app.getService('ttlMemCache');\n        ttlCache.del(key);\n    }\n\n    send(ctx, result, payload, ttlCacheInfo) {\n        ctx.body = this.apiWrapper.wrapResult(ctx, result, payload);\n        if (ttlCacheInfo) {\n            const ttlCache = this.app.getService('ttlMemCache');\n            const value = [result];\n            if (payload) {\n                value.push(payload);\n            }\n\n            if (!ttlCacheInfo.key)  {\n                throw new ApplicationError('\"key\" of TTL cache is required.');\n            }\n\n            ttlCache.set(ttlCacheInfo.key, value, ttlCacheInfo.ttl);\n        }\n    }\n}\n\nexport default BasicController;\n"],"names":["BasicController","trySendCache","ctx","key","query","ttlCache","app","getService","ApplicationError","_cache","get","send","deleteCache","del","result","payload","ttlCacheInfo","body","apiWrapper","wrapResult","value","push","set","ttl","constructor","settings","apiWrapperService"],"mappings":";;;;+BA6DA;;;eAAA;;;uBA7DiC;AAEjC,MAAMA;IAUF;;;;;KAKC,GACDC,aAAaC,GAAG,EAAEC,GAAG,EAAE;QACnB,IAAID,IAAIE,KAAK,CAAC,WAAW,EAAE;YACvB,OAAO,KAAK;QAChB,CAAC;QAED,MAAMC,WAAW,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;QACrC,IAAI,CAACF,UAAU;YACX,MAAM,IAAIG,uBAAgB,CACtB,iGACF;QACN,CAAC;QAED,MAAMC,SAASJ,SAASK,GAAG,CAACP;QAC5B,IAAIM,QAAQ;YACR,IAAI,CAACE,IAAI,CAACT,QAAQO;YAClB,OAAO,IAAI;QACf,CAAC;QACD,OAAO,KAAK;IAChB;IAEAG,YAAYT,GAAG,EAAE;QACb,MAAME,WAAW,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;QACrCF,SAASQ,GAAG,CAACV;IACjB;IAEAQ,KAAKT,GAAG,EAAEY,MAAM,EAAEC,OAAO,EAAEC,YAAY,EAAE;QACrCd,IAAIe,IAAI,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAACjB,KAAKY,QAAQC;QACnD,IAAIC,cAAc;YACd,MAAMX,WAAW,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC;YACrC,MAAMa,QAAQ;gBAACN;aAAO;YACtB,IAAIC,SAAS;gBACTK,MAAMC,IAAI,CAACN;YACf,CAAC;YAED,IAAI,CAACC,aAAab,GAAG,EAAG;gBACpB,MAAM,IAAIK,uBAAgB,CAAC,mCAAmC;YAClE,CAAC;YAEDH,SAASiB,GAAG,CAACN,aAAab,GAAG,EAAEiB,OAAOJ,aAAaO,GAAG;QAC1D,CAAC;IACL;IAvDAC,YAAYlB,GAAG,CAAE;QACb,IAAI,CAACA,GAAG,GAAGA;QACX,IAAI,CAACY,UAAU,GAAG,IAAI,CAACZ,GAAG,CAACC,UAAU,CAAC,IAAI,CAACD,GAAG,CAACmB,QAAQ,EAAEC,qBAAqB;QAE9E,IAAI,CAAC,IAAI,CAACR,UAAU,EAAE;YAClB,MAAM,IAAIV,uBAAgB,CAAC,wEAAwE;QACvG,CAAC;IACL;AAiDJ;MAEA,WAAeR"}