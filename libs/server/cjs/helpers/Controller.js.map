{"version":3,"sources":["../../lib/helpers/Controller.js"],"sourcesContent":["import { ApplicationError } from '@galaxar/types';\n\nclass Controller {\n    constructor(app) {\n        this.app = app;\n        this.apiWrapper = this.app.getService(this.app.settings?.apiWrapperService || 'apiWrapper');\n\n        if (!this.apiWrapper) {\n            throw new ApplicationError('\"apiWrapper\" service is required when using the Controller helper.');\n        }\n    }\n\n    db(name) {\n        return this.app.db(name || this.app.settings.db);\n    }\n\n    /**\n     * Try to send back data from time-to-live cache\n     * @param {*} ctx\n     * @param {*} key\n     * @returns {boolean}\n     */\n    trySendWithCache(ctx, key) {\n        if (ctx.query['no-cache']) {\n            return false;\n        }\n\n        const ttlCache = this.app.getService('ttlMemCache');\n        if (!ttlCache) {\n            throw new ApplicationError(\n                '\"ttlMemCache\" service is required. Please check npm module \"@genx/app-feat-commons\".'\n            );\n        }\n\n        const _cache = ttlCache.get(key);\n        if (_cache) {\n            this.send(ctx, ..._cache);\n            return true;\n        }\n        return false;\n    }\n\n    deleteTtlCache(key) {\n        const ttlCache = this.app.getService('ttlMemCache');\n        ttlCache.del(key);\n    }\n\n    send(ctx, result, payload, ttlCacheInfo) {\n        ctx.body = this.apiWrapper.wrapResult(ctx, result, payload);\n        if (ttlCacheInfo) {\n            const ttlCache = this.app.getService('ttlMemCache');\n            const value = [result];\n            if (payload) {\n                value.push(payload);\n            }\n            ttlCache.set(ttlCacheInfo.key, [result, payload], ttlCacheInfo.ttl);\n        }\n    }\n\n    /**\n     * Immutable cache, suitable for long-term unchanged dictionary data\n     * @param {*} key\n     * @param {*} factory\n     * @returns {object}\n     */\n    cache(key, factory) {\n        if (!this._cache) {\n            this._cache = {};\n        }\n\n        let value = this._cache[key];\n        if (value == null) {\n            value = this._cache[key] = factory();\n        }\n\n        return value;\n    }\n}\n\nexport default Controller;\n"],"names":["Controller","db","name","app","settings","trySendWithCache","ctx","key","query","ttlCache","getService","ApplicationError","_cache","get","send","deleteTtlCache","del","result","payload","ttlCacheInfo","body","apiWrapper","wrapResult","value","push","set","ttl","cache","factory","constructor","apiWrapperService"],"mappings":";;;;+BA+EA;;;eAAA;;;uBA/EiC;AAEjC,MAAMA;IAUFC,GAAGC,IAAI,EAAE;QACL,OAAO,IAAI,CAACC,GAAG,CAACF,EAAE,CAACC,QAAQ,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACH,EAAE;IACnD;IAEA;;;;;KAKC,GACDI,iBAAiBC,GAAG,EAAEC,GAAG,EAAE;QACvB,IAAID,IAAIE,KAAK,CAAC,WAAW,EAAE;YACvB,OAAO,KAAK;QAChB,CAAC;QAED,MAAMC,WAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC;QACrC,IAAI,CAACD,UAAU;YACX,MAAM,IAAIE,uBAAgB,CACtB,wFACF;QACN,CAAC;QAED,MAAMC,SAASH,SAASI,GAAG,CAACN;QAC5B,IAAIK,QAAQ;YACR,IAAI,CAACE,IAAI,CAACR,QAAQM;YAClB,OAAO,IAAI;QACf,CAAC;QACD,OAAO,KAAK;IAChB;IAEAG,eAAeR,GAAG,EAAE;QAChB,MAAME,WAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC;QACrCD,SAASO,GAAG,CAACT;IACjB;IAEAO,KAAKR,GAAG,EAAEW,MAAM,EAAEC,OAAO,EAAEC,YAAY,EAAE;QACrCb,IAAIc,IAAI,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAChB,KAAKW,QAAQC;QACnD,IAAIC,cAAc;YACd,MAAMV,WAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC;YACrC,MAAMa,QAAQ;gBAACN;aAAO;YACtB,IAAIC,SAAS;gBACTK,MAAMC,IAAI,CAACN;YACf,CAAC;YACDT,SAASgB,GAAG,CAACN,aAAaZ,GAAG,EAAE;gBAACU;gBAAQC;aAAQ,EAAEC,aAAaO,GAAG;QACtE,CAAC;IACL;IAEA;;;;;KAKC,GACDC,MAAMpB,GAAG,EAAEqB,OAAO,EAAE;QAChB,IAAI,CAAC,IAAI,CAAChB,MAAM,EAAE;YACd,IAAI,CAACA,MAAM,GAAG,CAAC;QACnB,CAAC;QAED,IAAIW,QAAQ,IAAI,CAACX,MAAM,CAACL,IAAI;QAC5B,IAAIgB,SAAS,IAAI,EAAE;YACfA,QAAQ,IAAI,CAACX,MAAM,CAACL,IAAI,GAAGqB;QAC/B,CAAC;QAED,OAAOL;IACX;IAzEAM,YAAY1B,GAAG,CAAE;QACb,IAAI,CAACA,GAAG,GAAGA;QACX,IAAI,CAACkB,UAAU,GAAG,IAAI,CAAClB,GAAG,CAACO,UAAU,CAAC,IAAI,CAACP,GAAG,CAACC,QAAQ,EAAE0B,qBAAqB;QAE9E,IAAI,CAAC,IAAI,CAACT,UAAU,EAAE;YAClB,MAAM,IAAIV,uBAAgB,CAAC,sEAAsE;QACrG,CAAC;IACL;AAmEJ;MAEA,WAAeX"}