{"version":3,"sources":["../../lib/helpers/Controller.js"],"sourcesContent":["import { ApplicationError } from '@galaxar/types';\n\nclass Controller {\n    constructor(app) {\n        this.app = app;\n        this.apiWrapper = this.app.getService(this.app.settings?.apiWrapperService || 'apiWrapper');\n\n        if (!this.apiWrapper) {\n            throw new ApplicationError('\"apiWrapper\" service is required when using the Controller helper.');\n        }\n    }\n\n    db(name) {\n        return this.app.db(name || this.app.settings.db);\n    }\n\n    /**\n     * Try to send back data from time-to-live cache\n     * @param {*} ctx\n     * @param {*} key\n     * @returns {boolean}\n     */\n    trySendWithCache(ctx, key) {\n        if (ctx.query['no-cache']) {\n            return false;\n        }\n\n        const ttlCache = this.app.getService('ttlMemCache');\n        if (!ttlCache) {\n            throw new ApplicationError(\n                '\"ttlMemCache\" service is required. Please check npm module \"@genx/app-feat-commons\".'\n            );\n        }\n\n        const _cache = ttlCache.get(key);\n        if (_cache) {\n            this.send(ctx, ..._cache);\n            return true;\n        }\n        return false;\n    }\n\n    deleteTtlCache(key) {\n        const ttlCache = this.app.getService('ttlMemCache');\n        ttlCache.del(key);\n    }\n\n    send(ctx, result, payload, ttlCacheInfo) {\n        ctx.body = this.apiWrapper.wrapResult(ctx, result, payload);\n        if (ttlCacheInfo) {\n            const ttlCache = this.app.getService('ttlMemCache');\n            const value = [result];\n            if (payload) {\n                value.push(payload);\n            }\n            ttlCache.set(ttlCacheInfo.key, [result, payload], ttlCacheInfo.ttl);\n        }\n    }\n\n    /**\n     * Immutable cache, suitable for long-term unchanged dictionary data\n     * @param {*} key\n     * @param {*} factory\n     * @returns {object}\n     */\n    cache(key, factory) {\n        if (!this._cache) {\n            this._cache = {};\n        }\n\n        let value = this._cache[key];\n        if (value == null) {\n            value = this._cache[key] = factory();\n        }\n\n        return value;\n    }\n}\n\nexport default Controller;\n"],"names":["Controller","db","name","app","settings","trySendWithCache","ctx","key","query","ttlCache","getService","ApplicationError","_cache","get","send","deleteTtlCache","del","result","payload","ttlCacheInfo","body","apiWrapper","wrapResult","value","push","set","ttl","cache","factory","constructor","apiWrapperService"],"mappings":"oGA+EA,iDAAA,iCA/EiC,iBAEjC,OAAMA,WAUFC,GAAGC,IAAI,CAAE,CACL,OAAO,IAAI,CAACC,GAAG,CAACF,EAAE,CAACC,MAAQ,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACH,EAAE,CACnD,CAQAI,iBAAiBC,GAAG,CAAEC,GAAG,CAAE,CACvB,GAAID,IAAIE,KAAK,CAAC,WAAW,CAAE,CACvB,OAAO,KAAK,AAChB,CAAC,AAED,MAAMC,SAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC,eACrC,GAAI,CAACD,SAAU,CACX,MAAM,IAAIE,uBAAgB,CACtB,uFACF,AACN,CAAC,AAED,MAAMC,OAASH,SAASI,GAAG,CAACN,KAC5B,GAAIK,OAAQ,CACR,IAAI,CAACE,IAAI,CAACR,OAAQM,QAClB,OAAO,IAAI,AACf,CAAC,AACD,OAAO,KAAK,AAChB,CAEAG,eAAeR,GAAG,CAAE,CAChB,MAAME,SAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC,eACrCD,SAASO,GAAG,CAACT,IACjB,CAEAO,KAAKR,GAAG,CAAEW,MAAM,CAAEC,OAAO,CAAEC,YAAY,CAAE,CACrCb,IAAIc,IAAI,CAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAChB,IAAKW,OAAQC,SACnD,GAAIC,aAAc,CACd,MAAMV,SAAW,IAAI,CAACN,GAAG,CAACO,UAAU,CAAC,eACrC,MAAMa,MAAQ,CAACN,OAAO,CACtB,GAAIC,QAAS,CACTK,MAAMC,IAAI,CAACN,QACf,CAAC,AACDT,SAASgB,GAAG,CAACN,aAAaZ,GAAG,CAAE,CAACU,OAAQC,QAAQ,CAAEC,aAAaO,GAAG,CACtE,CAAC,AACL,CAQAC,MAAMpB,GAAG,CAAEqB,OAAO,CAAE,CAChB,GAAI,CAAC,IAAI,CAAChB,MAAM,CAAE,CACd,IAAI,CAACA,MAAM,CAAG,CAAC,CACnB,CAAC,AAED,IAAIW,MAAQ,IAAI,CAACX,MAAM,CAACL,IAAI,CAC5B,GAAIgB,OAAS,IAAI,CAAE,CACfA,MAAQ,IAAI,CAACX,MAAM,CAACL,IAAI,CAAGqB,SAC/B,CAAC,AAED,OAAOL,KACX,CAzEAM,YAAY1B,GAAG,CAAE,CACb,IAAI,CAACA,GAAG,CAAGA,GACX,CAAA,IAAI,CAACkB,UAAU,CAAG,IAAI,CAAClB,GAAG,CAACO,UAAU,CAAC,IAAI,CAACP,GAAG,CAACC,QAAQ,EAAE0B,mBAAqB,cAE9E,GAAI,CAAC,IAAI,CAACT,UAAU,CAAE,CAClB,MAAM,IAAIV,uBAAgB,CAAC,qEAAsE,AACrG,CAAC,AACL,CAmEJ,OAEA,SAAeX"}