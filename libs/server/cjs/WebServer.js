"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _nodepath=_interop_require_default(require("node:path"));const _utils=require("@galaxar/utils");const _app=require("@galaxar/app");const _Routable=_interop_require_default(require("./Routable"));const _defaultOpts=_interop_require_default(require("./defaultOpts"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}class WebServer extends(0,_Routable.default)((0,_app.Runnable)(_app.ServiceContainer)){async stop_(){let stopByThis=false;if(this.started){stopByThis=true;if(this.appModules){await (0,_utils.batchAsync_)(this.appModules,app=>app.stop_());delete this.appModules;delete this.appModulesByAlias}}if(stopByThis&&this.httpServer){await new Promise((resolve,reject)=>{this.httpServer.close(err=>{if(err)return reject(err);resolve()})});delete this.httpServer;this.log("info",`The http service is stopped.`)}return super.stop_()}visitChildModules(vistor){super.visitChildModules(vistor);if(this.appModules){_utils._.each(this.appModules,vistor)}}mountApp(app){if(!this.appModules){this.appModules={};this.appModulesByAlias={}}if(app.route in this.appModules){throw new Error(`The route "${app.route}" is already mounted by another app.`)}this.router.mount(app.route,app.router);this.appModules[app.route]=app;if(app.name in this.appModulesByAlias){let existingApp=this.appModulesByAlias[app.name];this.appModulesByAlias[`${existingApp.name}[@${existingApp.route}]`]=existingApp;delete this.appModulesByAlias[app.name];this.appModulesByAlias[`${app.name}[@${app.route}]`]=app}else{this.appModulesByAlias[app.name]=app}this.log("verbose",`All routes from app [${app.name}] are mounted under "${app.route}".`)}getAppByRoute(p){return this.appModules[p]}getAppByAlias(a){return this.appModulesByAlias[a]}require(relativePath){let modPath=_nodepath.default.join(this.sourcePath,relativePath);return require(modPath)}requireFromApp(appName,relativePath){const app=this.getAppByAlias(appName);return app.require(relativePath)}getService(name){let pos=name.indexOf(":");if(pos===-1){return super.getService(name)}let modAlias=name.substring(0,pos);name=name.substring(pos+1);let app=this.getAppByAlias(modAlias);return app&&app.getService(name,true)}_getFeatureFallbackPath(){let pathArray=super._getFeatureFallbackPath();pathArray.splice(1,0,_nodepath.default.resolve(__dirname,"serverFeatures"));return pathArray}constructor(name,options){if(typeof options==="undefined"&&(0,_utils.isPlainObject)(name)){options=name;name=undefined}super(name||"server",{..._defaultOpts.default,...options});this.server=this;this.isServer=true;this.appModulesPath=this.toAbsolutePath(this.options.appModulesPath);this.route="/";this.on("configLoaded",()=>{this.loadMiddlewaresFrom(_nodepath.default.resolve(__dirname,"middlewares"))})}}const _default=WebServer;
//# sourceMappingURL=WebServer.js.map