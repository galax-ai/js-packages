{"version":3,"sources":["../lib/Routable.js"],"sourcesContent":["import path from 'node:path';\nimport { fs, isDir } from '@galaxar/sys';\nimport { globSync } from 'glob';\nimport { _, url as urlUtil, text, esmCheck, isPlainObject } from '@galaxar/utils';\nimport { ApplicationError, InvalidConfiguration, InvalidArgument } from '@galaxar/types';\nimport { defaultRoutableOpts } from './defaultOpts';\n\nconst Routable = (T) =>\n    class extends T {\n        /**\n         * @param {string} name - The name of the routable instance.\n         * @param {object} [options] - Routable options\n         * @property {string} [options.backendPath='server'] - Relative path of back-end server source files\n         * @property {string} [options.clientPath='client'] - Relative path of front-end client source files\n         * @property {string} [options.publicPath='public'] - Relative path of front-end static files\n         */\n        constructor(name, options) {\n            super(name, { ...defaultRoutableOpts, ...options });\n\n            /**\n             * Frontend static files path.\n             * @member {string}\n             **/\n            this.publicPath = this.toAbsolutePath(this.options.publicPath);\n\n            this.controllersPath = this.toAbsolutePath(this.options.controllersPath);\n\n            this.middlewaresPath = this.toAbsolutePath(this.options.middlewaresPath);\n\n            this.routable = true;\n\n            /**\n             * Each app has its own router.\n             * @member {Koa}\n             **/\n            this.router = this._createEngine();\n\n            //inject the appModule instance in the first middleware\n            this.router.use(\n                this.router.middleware((ctx, next) => {\n                    ctx.appModule = this;\n                    return next();\n                })\n            );\n\n            this.on('configLoaded', () => {\n                //load middlewares if exists in server or app path\n                if (fs.pathExistsSync(this.middlewaresPath) && isDir(this.middlewaresPath)) {\n                    this.loadMiddlewaresFrom(this.middlewaresPath);\n                }\n            });\n        }\n\n        async start_() {\n            /**\n             * Middleware factory registry.\n             * @member {object}\n             */\n            this.middlewareFactoryRegistry = {};\n\n            return super.start_();\n        }\n\n        async stop_() {\n            delete this.middlewareFactoryRegistry;\n\n            return super.stop_();\n        }\n\n        /**\n         * Load and regsiter middleware files from a specified path.\n         * @param dir\n         */\n        loadMiddlewaresFrom(dir) {\n            let files = globSync(path.join(dir, '**/*.{js,ts,mjs,cjs}'), { nodir: true });\n            files.forEach((file) => this.registerMiddlewareFactory(text.baseName(file), esmCheck(require(file))));\n        }\n\n        /**\n         * Register the factory method of a named middleware.\n         * @param {string} name - The name of the middleware\n         * @param {function} factoryMethod - The factory method of a middleware\n         */\n        registerMiddlewareFactory(name, factoryMethod) {\n            if (typeof factoryMethod !== 'function') {\n                if (factoryMethod.__esModule && typeof factoryMethod.default === 'function') {\n                    factoryMethod = factoryMethod.default;\n                } else {\n                    throw new InvalidArgument('Invalid middleware factory: ' + name);\n                }\n            }\n\n            if (name in this.middlewareFactoryRegistry) {\n                throw new ApplicationError('Middleware \"' + name + '\" already registered!');\n            }\n\n            this.middlewareFactoryRegistry[name] = factoryMethod;\n            this.log('verbose', `Registered named middleware [${name}].`);\n        }\n\n        /**\n         * Get the factory method of a middleware from module hierarchy.\n         * @param name\n         * @returns {function}\n         */\n        getMiddlewareFactory(name) {\n            const factory = this.middlewareFactoryRegistry[name];\n            if (factory != null) {\n                return factory;\n            }\n\n            if (this.server && !this.isServer) {\n                return this.server.getMiddlewareFactory(name);\n            }\n\n            let npmMiddleware = this.tryRequire(name);\n            if (npmMiddleware) {\n                return npmMiddleware;\n            }\n\n            throw new ApplicationError(`Don't know where to load middleware \"${name}\".`);\n        }\n\n        /**\n         * Use middlewares\n         * @param {Router} router\n         * @param {*} middlewares - Can be an array of middleware entries or a key-value list of registerred middlewares\n         * @returns {Routable}\n         */\n        useMiddlewares(router, middlewares) {\n            let middlewareFactory, middleware;\n            let middlewareFunctions = [];\n\n            if (isPlainObject(middlewares)) {\n                _.forOwn(middlewares, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    middleware = middlewareFactory(options, this);\n                    middlewareFunctions.push({ name, middleware });\n                });\n            } else {\n                middlewares = _.castArray(middlewares);\n\n                _.each(middlewares, (middlewareEntry) => {\n                    let type = typeof middlewareEntry;\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry);\n                        middleware = middlewareFactory(undefined, this);\n                        middlewareFunctions.push({ name: middlewareEntry, middleware });\n                    } else if (type === 'function') {\n                        middlewareFunctions.push({\n                            name: middlewareEntry.name || 'unamed middleware',\n                            middleware: middlewareEntry,\n                        });\n                    } else if (Array.isArray(middlewareEntry)) {\n                        // [ [ 'namedMiddleware', config ] ]\n                        if (middlewareEntry.length === 0) {\n                            throw new InvalidConfiguration(\n                                'Empty array found as middleware entry!',\n                                this,\n                                'middlewares'\n                            );\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);\n                        middleware = middlewareFactory(middlewareEntry.length > 1 ? middlewareEntry[1] : null, this);\n                        middlewareFunctions.push({ name: middlewareEntry[0], middleware });\n                    } else {\n                        if (!isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);\n                        middleware = middlewareFactory(middlewareEntry.options, this);\n                        middlewareFunctions.push({ name: middlewareEntry.name, middleware });\n                    }\n                });\n            }\n\n            middlewareFunctions.forEach(({ name, middleware }) => {\n                if (Array.isArray(middleware)) {\n                    middleware.forEach((m) => this.useMiddleware(router, m, name));\n                } else {\n                    this.useMiddleware(router, middleware, name);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Add a route to a router, skipped while the server running in deaf mode.\n         * @param router\n         * @param method\n         * @param route\n         * @param actions\n         */\n        addRoute(router, method, route, actions) {\n            let handlers = [],\n                middlewareFactory;\n\n            if (isPlainObject(actions)) {\n                _.each(actions, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));\n                });\n            } else {\n                actions = _.castArray(actions);\n                let lastIndex = actions.length - 1;\n\n                _.each(actions, (action, i) => {\n                    let type = typeof action;\n\n                    if (i === lastIndex) {\n                        // last middleware may be an action\n                        if (type === 'string' && action.lastIndexOf('.') > 0) {\n                            action = {\n                                name: 'action',\n                                options: action,\n                            };\n\n                            type = 'object';\n                        }\n                    }\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(action);\n\n                        let middleware = middlewareFactory(null, this);\n\n                        //in case it's register by the middlewareFactory feature\n                        if (Array.isArray(middleware)) {\n                            middleware.forEach((middlewareItem, i) =>\n                                handlers.push(\n                                    this._wrapMiddlewareTracer(\n                                        middlewareItem,\n                                        `${action}-${i}` + (middleware.name ? '-' + middleware.name : '')\n                                    )\n                                )\n                            );\n                        } else {\n                            handlers.push(this._wrapMiddlewareTracer(middleware, action));\n                        }\n                    } else if (type === 'function') {\n                        handlers.push(this._wrapMiddlewareTracer(action));\n                    } else if (Array.isArray(action)) {\n                        if (action.length === 0 || action.length > 2) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action[0]);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(\n                                middlewareFactory(action.length > 1 ? action[1] : undefined, this)\n                            )\n                        );\n                    } else {\n                        if (typeof action !== 'object' || !('name' in action)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action.name);\n                        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));\n                    }\n                });\n            }\n\n            router[method](route, ...handlers);\n\n            let endpoint = router.opts.prefix\n                ? urlUtil.join(this.route, router.opts.prefix, route)\n                : urlUtil.join(this.route, route);\n\n            this.log('verbose', `Route \"${method}:${endpoint}\" is added from module [${this.name}].`);\n\n            return this;\n        }\n\n        requireFeatures(features, middleware) {\n            let hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n            if (hasNotEnabled) {\n                throw new InvalidConfiguration(\n                    `Middleware \"${middleware}\" requires \"${hasNotEnabled}\" feature to be enabled.`,\n                    this,\n                    `middlewares.${middleware}`\n                );\n            }\n        }\n\n        /**\n         * Attach a router to this app module, skipped while the server running in deaf mode\n         * @param {Router} nestedRouter\n         */\n        addRouter(nestedRouter) {\n            this.router.use(nestedRouter.routes());\n            this.router.use(nestedRouter.allowedMethods());\n            return this;\n        }\n\n        /**\n         * Translate a relative path and query parameters if any to a url path\n         * @param {string} relativePath - Relative path\n         * @param {...*} [pathOrQuery] - Queries\n         * @returns {string}\n         */\n        toWebPath(relativePath, ...pathOrQuery) {\n            let url, query;\n\n            if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {\n                if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {\n                    query = pathOrQuery.pop();\n                }\n                pathOrQuery.unshift(relativePath);\n                url = urlUtil.join(this.route, ...pathOrQuery);\n            } else {\n                url = urlUtil.join(this.route, relativePath);\n            }\n\n            url = text.ensureStartsWith(url, '/');\n\n            if (query) {\n                url = urlUtil.appendQuery(url, query);\n                url = url.replace('/?', '?');\n            }\n\n            return url;\n        }\n\n        useMiddleware(router, middleware, name) {\n            if (typeof middleware !== 'function') {\n                throw new InvalidArgument('Invalid middleware.', { name, middleware });\n            }\n\n            router.use(this._wrapMiddlewareTracer(middleware, name));\n            this.log('verbose', `Attached middleware [${name}].`);\n        }\n\n        _wrapMiddlewareTracer(middleware, name) {\n            if (this.options.traceMiddlewares) {\n                return async (ctx, next) => {\n                    this.log('debug', `Step in middleware \"${name || middleware.name}\" ...`);\n                    let ret = await middleware(ctx, next);\n                    this.log('debug', `Step out from middleware \"${name || middleware.name}\".`);\n                    return ret;\n                };\n            }\n\n            return middleware;\n        }\n\n        _createEngine() {\n            try {\n                let Engine = esmCheck(require(`./engines/${this.options.engine}`));\n                return new Engine(this);\n            } catch (err) {\n                if (err.code === 'MODULE_NOT_FOUND') {\n                    throw new InvalidArgument(`Failed to load engine \"${this.options.engine}\". ${err.message}`);\n                }\n\n                throw err;\n            }\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(__dirname, 'appFeatures'));\n\n            return pathArray;\n        }\n    };\n\nexport default Routable;\n"],"names":["Routable","T","start_","middlewareFactoryRegistry","stop_","loadMiddlewaresFrom","dir","files","globSync","path","join","nodir","forEach","file","registerMiddlewareFactory","text","baseName","esmCheck","require","name","factoryMethod","__esModule","default","InvalidArgument","ApplicationError","log","getMiddlewareFactory","factory","server","isServer","npmMiddleware","tryRequire","useMiddlewares","router","middlewares","middlewareFactory","middleware","middlewareFunctions","isPlainObject","_","forOwn","options","push","castArray","each","middlewareEntry","type","undefined","Array","isArray","length","InvalidConfiguration","m","useMiddleware","addRoute","method","route","actions","handlers","_wrapMiddlewareTracer","lastIndex","action","i","lastIndexOf","middlewareItem","endpoint","opts","prefix","urlUtil","requireFeatures","features","hasNotEnabled","find","feature","enabled","addRouter","nestedRouter","use","routes","allowedMethods","toWebPath","relativePath","pathOrQuery","url","query","isObject","pop","unshift","ensureStartsWith","appendQuery","replace","traceMiddlewares","ctx","next","ret","_createEngine","Engine","engine","err","code","message","_getFeatureFallbackPath","pathArray","splice","resolve","__dirname","constructor","defaultRoutableOpts","publicPath","toAbsolutePath","controllersPath","middlewaresPath","routable","appModule","on","fs","pathExistsSync","isDir"],"mappings":"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"}