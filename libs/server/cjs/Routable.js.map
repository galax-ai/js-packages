{"version":3,"sources":["../lib/Routable.js"],"sourcesContent":["import path from 'node:path';\nimport { fs, isDir } from '@galaxar/sys';\nimport { globSync } from 'glob';\nimport { _, url as urlUtil, text, esmCheck, isPlainObject } from '@galaxar/utils';\nimport { ApplicationError, InvalidConfiguration, InvalidArgument } from '@galaxar/types';\nimport { defaultRoutableOpts } from './defaultOpts';\n\nconst Routable = (T) =>\n    class extends T {\n        /**\n         * @param {string} name - The name of the routable instance.\n         * @param {object} [options] - Routable options\n         * @property {string} [options.backendPath='server'] - Relative path of back-end server source files\n         * @property {string} [options.clientPath='client'] - Relative path of front-end client source files\n         * @property {string} [options.publicPath='public'] - Relative path of front-end static files\n         */\n        constructor(name, options) {\n            super(name, { ...defaultRoutableOpts, ...options });\n\n            /**\n             * Frontend static files path.\n             * @member {string}\n             **/\n            this.publicPath = this.toAbsolutePath(this.options.publicPath);\n\n            this.controllersPath = this.toAbsolutePath(this.options.controllersPath);\n\n            this.middlewaresPath = this.toAbsolutePath(this.options.middlewaresPath);\n\n            this.routable = true;\n\n            /**\n             * Each app has its own router.\n             * @member {Koa}\n             **/\n            this.router = this._createEngine();\n\n            //inject the appModule instance in the first middleware\n            this.router.use(\n                this.router.middleware((ctx, next) => {\n                    ctx.appModule = this;\n                    return next();\n                })\n            );\n\n            this.on('configLoaded', () => {\n                //load middlewares if exists in server or app path\n                if (fs.pathExistsSync(this.middlewaresPath) && isDir(this.middlewaresPath)) {\n                    this.loadMiddlewaresFrom(this.middlewaresPath);\n                }\n            });\n        }\n\n        async start_() {\n            /**\n             * Middleware factory registry.\n             * @member {object}\n             */\n            this.middlewareFactoryRegistry = {};\n\n            return super.start_();\n        }\n\n        async stop_() {\n            delete this.middlewareFactoryRegistry;\n\n            return super.stop_();\n        }\n\n        /**\n         * Load and regsiter middleware files from a specified path.\n         * @param dir\n         */\n        loadMiddlewaresFrom(dir) {\n            let files = globSync(path.join(dir, '**/*.{js,ts,mjs,cjs}'), { nodir: true });\n            files.forEach((file) => this.registerMiddlewareFactory(text.baseName(file), esmCheck(require(file))));\n        }\n\n        /**\n         * Register the factory method of a named middleware.\n         * @param {string} name - The name of the middleware\n         * @param {function} factoryMethod - The factory method of a middleware\n         */\n        registerMiddlewareFactory(name, factoryMethod) {\n            if (typeof factoryMethod !== 'function') {\n                if (factoryMethod.__esModule && typeof factoryMethod.default === 'function') {\n                    factoryMethod = factoryMethod.default;\n                } else {\n                    throw new InvalidArgument('Invalid middleware factory: ' + name);\n                }\n            }\n\n            if (name in this.middlewareFactoryRegistry) {\n                throw new ApplicationError('Middleware \"' + name + '\" already registered!');\n            }\n\n            this.middlewareFactoryRegistry[name] = factoryMethod;\n            this.log('verbose', `Registered named middleware [${name}].`);\n        }\n\n        /**\n         * Get the factory method of a middleware from module hierarchy.\n         * @param name\n         * @returns {function}\n         */\n        getMiddlewareFactory(name) {\n            const factory = this.middlewareFactoryRegistry[name];\n            if (factory != null) {\n                return factory;\n            }\n\n            if (this.server && !this.isServer) {\n                return this.server.getMiddlewareFactory(name);\n            }\n\n            let npmMiddleware = this.tryRequire(name);\n            if (npmMiddleware) {\n                return npmMiddleware;\n            }\n\n            throw new ApplicationError(`Don't know where to load middleware \"${name}\".`);\n        }\n\n        /**\n         * Use middlewares\n         * @param {Router} router\n         * @param {*} middlewares - Can be an array of middleware entries or a key-value list of registerred middlewares\n         * @returns {Routable}\n         */\n        useMiddlewares(router, middlewares) {\n            let middlewareFactory, middleware;\n            let middlewareFunctions = [];\n\n            if (isPlainObject(middlewares)) {\n                _.forOwn(middlewares, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    middleware = middlewareFactory(options, this);\n                    middlewareFunctions.push({ name, middleware });\n                });\n            } else {\n                middlewares = _.castArray(middlewares);\n\n                _.each(middlewares, (middlewareEntry) => {\n                    let type = typeof middlewareEntry;\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry);\n                        middleware = middlewareFactory(undefined, this);\n                        middlewareFunctions.push({ name: middlewareEntry, middleware });\n                    } else if (type === 'function') {\n                        middlewareFunctions.push({\n                            name: middlewareEntry.name || 'unamed middleware',\n                            middleware: middlewareEntry,\n                        });\n                    } else if (Array.isArray(middlewareEntry)) {\n                        // [ [ 'namedMiddleware', config ] ]\n                        if (middlewareEntry.length === 0) {\n                            throw new InvalidConfiguration(\n                                'Empty array found as middleware entry!',\n                                this,\n                                'middlewares'\n                            );\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);\n                        middleware = middlewareFactory(middlewareEntry.length > 1 ? middlewareEntry[1] : null, this);\n                        middlewareFunctions.push({ name: middlewareEntry[0], middleware });\n                    } else {\n                        if (!isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);\n                        middleware = middlewareFactory(middlewareEntry.options, this);\n                        middlewareFunctions.push({ name: middlewareEntry.name, middleware });\n                    }\n                });\n            }\n\n            middlewareFunctions.forEach(({ name, middleware }) => {\n                if (Array.isArray(middleware)) {\n                    middleware.forEach((m) => this.useMiddleware(router, m, name));\n                } else {\n                    this.useMiddleware(router, middleware, name);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Add a route to a router, skipped while the server running in deaf mode.\n         * @param router\n         * @param method\n         * @param route\n         * @param actions\n         */\n        addRoute(router, method, route, actions) {\n            let handlers = [],\n                middlewareFactory;\n\n            if (isPlainObject(actions)) {\n                _.each(actions, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));\n                });\n            } else {\n                actions = _.castArray(actions);\n                let lastIndex = actions.length - 1;\n\n                _.each(actions, (action, i) => {\n                    let type = typeof action;\n\n                    if (i === lastIndex) {\n                        // last middleware may be an action\n                        if (type === 'string' && action.lastIndexOf('.') > 0) {\n                            action = {\n                                name: 'action',\n                                options: action,\n                            };\n\n                            type = 'object';\n                        }\n                    }\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(action);\n\n                        let middleware = middlewareFactory(null, this);\n\n                        //in case it's register by the middlewareFactory feature\n                        if (Array.isArray(middleware)) {\n                            middleware.forEach((middlewareItem, i) =>\n                                handlers.push(\n                                    this._wrapMiddlewareTracer(\n                                        middlewareItem,\n                                        `${action}-${i}` + (middleware.name ? '-' + middleware.name : '')\n                                    )\n                                )\n                            );\n                        } else {\n                            handlers.push(this._wrapMiddlewareTracer(middleware, action));\n                        }\n                    } else if (type === 'function') {\n                        handlers.push(this._wrapMiddlewareTracer(action));\n                    } else if (Array.isArray(action)) {\n                        if (action.length === 0 || action.length > 2) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action[0]);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(\n                                middlewareFactory(action.length > 1 ? action[1] : undefined, this)\n                            )\n                        );\n                    } else {\n                        if (typeof action !== 'object' || !('name' in action)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action.name);\n                        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));\n                    }\n                });\n            }\n\n            router[method](route, ...handlers);\n\n            let endpoint = router.opts.prefix\n                ? urlUtil.join(this.route, router.opts.prefix, route)\n                : urlUtil.join(this.route, route);\n\n            this.log('verbose', `Route \"${method}:${endpoint}\" is added from module [${this.name}].`);\n\n            return this;\n        }\n\n        requireFeatures(features, middleware) {\n            let hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n            if (hasNotEnabled) {\n                throw new InvalidConfiguration(\n                    `Middleware \"${middleware}\" requires \"${hasNotEnabled}\" feature to be enabled.`,\n                    this,\n                    `middlewares.${middleware}`\n                );\n            }\n        }\n\n        /**\n         * Attach a router to this app module, skipped while the server running in deaf mode\n         * @param {Router} nestedRouter\n         */\n        addRouter(nestedRouter) {\n            this.router.use(nestedRouter.routes());\n            this.router.use(nestedRouter.allowedMethods());\n            return this;\n        }\n\n        /**\n         * Translate a relative path and query parameters if any to a url path\n         * @param {string} relativePath - Relative path\n         * @param {...*} [pathOrQuery] - Queries\n         * @returns {string}\n         */\n        toWebPath(relativePath, ...pathOrQuery) {\n            let url, query;\n\n            if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {\n                if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {\n                    query = pathOrQuery.pop();\n                }\n                pathOrQuery.unshift(relativePath);\n                url = urlUtil.join(this.route, ...pathOrQuery);\n            } else {\n                url = urlUtil.join(this.route, relativePath);\n            }\n\n            url = text.ensureStartsWith(url, '/');\n\n            if (query) {\n                url = urlUtil.appendQuery(url, query);\n                url = url.replace('/?', '?');\n            }\n\n            return url;\n        }\n\n        useMiddleware(router, middleware, name) {\n            if (typeof middleware !== 'function') {\n                throw new InvalidArgument('Invalid middleware.', { name, middleware });\n            }\n\n            router.use(this._wrapMiddlewareTracer(middleware, name));\n            this.log('verbose', `Attached middleware [${name}].`);\n        }\n\n        _wrapMiddlewareTracer(middleware, name) {\n            if (this.options.traceMiddlewares) {\n                return async (ctx, next) => {\n                    this.log('debug', `Step in middleware \"${name || middleware.name}\" ...`);\n                    let ret = await middleware(ctx, next);\n                    this.log('debug', `Step out from middleware \"${name || middleware.name}\".`);\n                    return ret;\n                };\n            }\n\n            return middleware;\n        }\n\n        _createEngine() {\n            try {\n                let Engine = esmCheck(require(`./engines/${this.options.engine}`));\n                return new Engine(this);\n            } catch (err) {\n                if (err.code === 'MODULE_NOT_FOUND') {\n                    throw new InvalidArgument(`Failed to load engine \"${this.options.engine}\". ${err.message}`);\n                }\n\n                throw err;\n            }\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(__dirname, 'appFeatures'));\n\n            return pathArray;\n        }\n    };\n\nexport default Routable;\n"],"names":["Routable","T","start_","middlewareFactoryRegistry","stop_","loadMiddlewaresFrom","dir","files","globSync","path","join","nodir","forEach","file","registerMiddlewareFactory","text","baseName","esmCheck","require","name","factoryMethod","__esModule","default","InvalidArgument","ApplicationError","log","getMiddlewareFactory","factory","server","isServer","npmMiddleware","tryRequire","useMiddlewares","router","middlewares","middlewareFactory","middleware","middlewareFunctions","isPlainObject","_","forOwn","options","push","castArray","each","middlewareEntry","type","undefined","Array","isArray","length","InvalidConfiguration","m","useMiddleware","addRoute","method","route","actions","handlers","_wrapMiddlewareTracer","lastIndex","action","i","lastIndexOf","middlewareItem","endpoint","opts","prefix","urlUtil","requireFeatures","features","hasNotEnabled","find","feature","enabled","addRouter","nestedRouter","use","routes","allowedMethods","toWebPath","relativePath","pathOrQuery","url","query","isObject","pop","unshift","ensureStartsWith","appendQuery","replace","traceMiddlewares","ctx","next","ret","_createEngine","Engine","engine","err","code","message","_getFeatureFallbackPath","pathArray","splice","resolve","__dirname","constructor","defaultRoutableOpts","publicPath","toAbsolutePath","controllersPath","middlewaresPath","routable","appModule","on","fs","pathExistsSync","isDir"],"mappings":"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"}