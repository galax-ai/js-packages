{"version":3,"sources":["../lib/WebServer.js"],"sourcesContent":["import path from \"node:path\";\nimport { _, eachAsync_ } from \"@galaxar/utils\";\nimport { Runnable, ServiceContainer } from \"@galaxar/app\";\n\nimport Routable from \"./Routable\";\nimport defaultOpts from \"./defaultOpts\";\n\n/**\n * Web server class.\n * @class\n * @extends Routable(App)\n */\nclass WebServer extends Routable(Runnable(ServiceContainer)) {\n    /**\n     * @param {string} [name='server'] - The name of the server.\n     * @param {object} [options] - The app module's extra options defined in its parent's configuration.\n     * @property {object} [options.logger] - Logger options\n     * @property {bool} [options.verbose=false] - Flag to output trivial information for diagnostics\n     * @property {string} [options.env] - Environment, default to process.env.NODE_ENV\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath] - App's config path, default to \"conf\" under workingPath\n     * @property {string} [options.configName] - App's config basename, default to \"app\"\n     * @property {string} [options.sourcePath='.'] - Relative path of back-end server source files\n     * @property {string} [options.appModulesPath=app_modules] - Relative path of child modules\n     */\n    constructor(name, options) {\n        if (typeof options === \"undefined\" && _.isPlainObject(name)) {\n            options = name;\n            name = undefined;\n        }\n\n        super(name || \"server\", {\n            ...defaultOpts,\n            ...options,\n        });\n\n        /**\n         * Hosting server.\n         * @member {WebServer}\n         **/\n        this.server = this;\n\n        /**\n         * Whether it is a server.\n         * @member {boolean}\n         **/\n        this.isServer = true;\n\n        /**\n         * App modules path.\n         * @member {string}\n         */\n        this.appModulesPath = this.toAbsolutePath(this.options.appModulesPath);\n\n        this.middlewaresPath = this.toAbsolutePath(this.options.middlewaresPath);\n\n        /**\n         * Base route.\n         * @member {string}\n         */\n        this.route = \"/\";\n\n        this.on(\"configLoaded\", () => {\n            // load builtin middlewares\n            this.loadMiddlewaresFrom(path.resolve(__dirname, 'middlewares'));\n        });\n    }\n\n    async stop_() {\n        let stopByThis = false;\n\n        if (this.started) {\n            stopByThis = true;\n\n            if (this.appModules) {\n                await eachAsync_(this.appModules, (app) => app.stop_());\n                delete this.appModules;\n                delete this.appModulesByAlias;\n            }\n        }\n\n        if (stopByThis && this.httpServer) {\n            await new Promise((resolve, reject) => {\n                this.httpServer.close((err) => {\n                    if (err) return reject(err);\n                    resolve();\n                });\n            });\n\n            delete this.httpServer;\n            this.log(\"info\", `The http service is stopped.`);\n        }\n\n        return super.stop_();\n    }\n\n    /**\n     * Mount an app at specified route.\n     * @param {WebModule} app\n     */\n    mountApp(app) {\n        if (!this.appModules) {\n            this.appModules = {};\n            this.appModulesByAlias = {};\n        }\n\n        if (app.route in this.appModules) {\n            throw new Error(`The route \"${app.route}\" is already mounted by another app.`);\n        }\n\n        this.router.mount(app.route, app.router);\n\n        this.appModules[app.route] = app;\n\n        if (app.name in this.appModulesByAlias) {\n            let existingApp = this.appModulesByAlias[app.name];\n            //move bucket\n            this.appModulesByAlias[`${existingApp.name}[@${existingApp.route}]`] = existingApp;\n            delete this.appModulesByAlias[app.name];\n\n            this.appModulesByAlias[`${app.name}[@${app.route}]`] = app;\n        } else {\n            this.appModulesByAlias[app.name] = app;\n        }\n\n        this.log(\"verbose\", `All routes from app [${app.name}] are mounted under \"${app.route}\".`);\n    }\n\n    /**\n     * Get the app module object by base route\n     * @param {string} p - App module base route started with \"/\"\n     */\n    getAppByRoute(p) {\n        return this.appModules[p];\n    }\n\n    /**\n     * Get the app module object by app alias, usually the app name if no duplicate entry\n     * @param {string} a - App module alias\n     */\n    getAppByAlias(a) {\n        return this.appModulesByAlias[a];\n    }\n\n    /**\n     * Require a js module from backend path\n     * @param {*} relativePath\n     */\n    require(relativePath) {\n        let modPath = path.join(this.sourcePath, relativePath);\n        return require(modPath);\n    }\n\n    /**\n     * Require a module from the source path of an app module\n     * @param {*} relativePath\n     */\n    requireFromApp(appName, relativePath) {\n        const app = this.getAppByAlias(appName);\n        return app.require(relativePath);\n    }\n\n    /**\n     * Get a registered service\n     * @param {string} name\n     *\n     * @example\n     *  // Get service from a lib module\n     *  const service = app.getService('<lib name>/<service name>');\n     *  // e.g const service = app.getService('data/mysql.mydb');\n     *\n     *  // Get service from a web app module\n     *  const service = app.getService('<app name>:<service name>');\n     *  // e.g const service = app.getService('admin:mysql.mydb');\n     */\n    getService(name) {\n        let pos = name.indexOf(\":\");\n        if (pos === -1) {\n            return super.getService(name);\n        }\n\n        let modAlias = name.substring(0, pos);\n        name = name.substring(pos + 1);\n\n        let app = this.getAppByAlias(modAlias);\n        return app && app.getService(name, true);\n    }\n\n    _getFeatureFallbackPath() {\n        let pathArray = super._getFeatureFallbackPath();\n        pathArray.splice(\n            1,\n            0,\n            path.resolve(__dirname, 'serverFeatures')\n        );\n\n        return pathArray;\n    }\n}\n\nexport default WebServer;\n"],"names":["WebServer","Routable","Runnable","ServiceContainer","stop_","stopByThis","started","appModules","eachAsync_","app","appModulesByAlias","httpServer","Promise","resolve","reject","close","err","log","mountApp","route","Error","router","mount","name","existingApp","getAppByRoute","p","getAppByAlias","a","require","relativePath","modPath","path","join","sourcePath","requireFromApp","appName","getService","pos","indexOf","modAlias","substring","_getFeatureFallbackPath","pathArray","splice","__dirname","constructor","options","_","isPlainObject","undefined","defaultOpts","server","isServer","appModulesPath","toAbsolutePath","middlewaresPath","on","loadMiddlewaresFrom"],"mappings":"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"}