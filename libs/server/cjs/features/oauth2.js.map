{"version":3,"sources":["../../lib/features/oauth2.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable oauth2 feature\n * @module Feature_OAuth2\n */\n\nconst path = require('path');\nconst { Feature } = require('..').Enums;\nconst { dependsOn } = require('@genx/app/lib/utils/Helpers');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature\n     * @param {Routable} app - The app module object\n     * @param {object} config - Passport config\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, config) {\n        dependsOn('passport', app, 'oauth2');\n\n        /*\n        let passport = app.getService('passport');\n        if (!passport.hasStrategy('basic')) {\n            throw new Error('oauth2 requires \"basic\" passport strategy.');\n        }\n\n        if (!passport.hasStrategy('oauth2-client-password')) {\n            throw new Error('oauth2 requires \"oauth2-client-password\" passport strategy.');\n        }*/\n\n        /**\n         * Module dependencies.\n         */        \n        const oauth2orize = app.tryRequire('oauth2orize-koa');        \n\n        // create OAuth 2.0 server\n        const server = oauth2orize.createServer();        \n\n        let strategy, strategyScript;\n\n        try {\n            strategyScript = path.join(app.backendPath, 'oauth2', 'strategy.js');\n            let strategyInitiator = require(strategyScript);\n            strategy = strategyInitiator(app, server);\n\n            if (!strategy) {\n                throw new Error(`Invalid oauth2 strategy.`);\n            }\n        } catch (error) {\n            if (error.code === 'MODULE_NOT_FOUND') {\n                throw new Error(`oauth2 strategy file \"${strategyScript}\" not found.`)\n            }\n\n            throw error;\n        }\n\n        // Register serialialization and deserialization functions.\n        //\n        // When a client redirects a user to user authorization endpoint, an\n        // authorization transaction is initiated.  To complete the transaction, the\n        // user must authenticate and approve the authorization request.  Because this\n        // may involve multiple HTTP request/response exchanges, the transaction is\n        // stored in the session.\n        //\n        // An application must supply serialization functions, which determine how the\n        // client object is serialized into the session.  Typically this will be a\n        // simple matter of serializing the client's ID, and deserializing by finding\n        // the client by ID from the database.\n\n        server.serializeClient(strategy.serializeClient);\n\n        server.deserializeClient(strategy.deserializeClient);\n\n        // Register supported grant types.\n        //\n        // OAuth 2.0 specifies a framework that allows users to grant client\n        // applications limited access to their protected resources.  It does this\n        // through a process of the user granting access, and the client exchanging\n        // the grant for an access token.\n\n        // Grant authorization codes.  The callback takes the `client` requesting\n        // authorization, the `redirectURI` (which is used as a verifier in the\n        // subsequent exchange), the authenticated `user` granting access, and\n        // their response, which contains approved scope, duration, etc. as parsed by\n        // the application.  The application issues a code, which is bound to these\n        // values, and will be exchanged for an access token.\n\n        server.grant(oauth2orize.grant.code(strategy.grantCode));\n\n        // Exchange authorization codes for access tokens.  The callback accepts the\n        // `client`, which is exchanging `code` and any `redirectURI` from the\n        // authorization request for verification.  If these values are validated, the\n        // application issues an access token on behalf of the user who authorized the\n        // code.\n\n        server.exchange(oauth2orize.exchange.code(strategy.exchangeCode));\n\n        // user authorization endpoint\n        //\n        // `authorization` middleware accepts a `validate` callback which is\n        // responsible for validating the client making the authorization request.  In\n        // doing so, is recommended that the `redirectURI` be checked against a\n        // registered value, although security requirements may vary accross\n        // implementations.  Once validated, the `done` callback must be invoked with\n        // a `client` instance, as well as the `redirectURI` to which the user will be\n        // redirected after an authorization decision is obtained.\n        //\n        // This middleware simply initializes a new authorization transaction.  It is\n        // the application's responsibility to authenticate the user and render a dialog\n        // to obtain their approval (displaying details about the client requesting\n        // authorization).  We accomplish that here by routing through `ensureLoggedIn()`\n        // first, and rendering the `dialog` view. \n\n        app.registerMiddlewareFactory('oauth2Authorization', () => [\n            \"passportCheck\",\n             server.authorize(strategy.authorize)\n        ]);        \n\n        // user decision endpoint\n        //\n        // `decision` middleware processes a user's decision to allow or deny access\n        // requested by a client application.  Based on the grant type requested by the\n        // client, the above grant middleware configured above will be invoked to send\n        // a response.\n\n        app.registerMiddlewareFactory('oauth2Decision', () => [\n            \"passportCheck\",\n             server.decision()\n        ]);        \n\n        // token endpoint\n        //\n        // `token` middleware handles client requests to exchange authorization grants\n        // for access tokens.  Based on the grant type being exchanged, the above\n        // exchange middleware will be invoked to handle the request.  Clients must\n        // authenticate when making requests to this endpoint.\n\n        app.registerMiddlewareFactory('oauth2Token', () => [\n            [ \n                \"passportAuth\", { \n                    \"strategy\": ['basic', 'oauth2-client-password'], \n                    \"options\":  { session: false }\n                }\n            ],\n            server.token(),\n            server.errorHandler()\n        ]);   \n    }\n};"],"names":["path","require","Feature","Enums","dependsOn","module","exports","type","PLUGIN","load_","app","config","oauth2orize","tryRequire","server","createServer","strategy","strategyScript","join","backendPath","strategyInitiator","Error","error","code","serializeClient","deserializeClient","grant","grantCode","exchange","exchangeCode","registerMiddlewareFactory","authorize","decision","session","token","errorHandler"],"mappings":"AAAA,aAOA,MAAMA,KAAOC,QAAQ,QACrB,KAAM,CAAEC,OAAO,CAAE,CAAGD,QAAQ,MAAME,KAAK,CACvC,KAAM,CAAEC,SAAS,CAAE,CAAGH,QAAQ,8BAE9BI,CAAAA,OAAOC,OAAO,CAAG,CAMbC,KAAML,QAAQM,MAAM,CAQpBC,MAAO,SAAUC,GAAG,CAAEC,MAAM,CAAE,CAC1BP,UAAU,WAAYM,IAAK,UAe3B,MAAME,YAAcF,IAAIG,UAAU,CAAC,mBAGnC,MAAMC,OAASF,YAAYG,YAAY,GAEvC,IAAIC,SAAUC,eAEd,GAAI,CACAA,eAAiBjB,KAAKkB,IAAI,CAACR,IAAIS,WAAW,CAAE,SAAU,eACtD,IAAIC,kBAAoBnB,QAAQgB,gBAChCD,SAAWI,kBAAkBV,IAAKI,QAElC,GAAI,CAACE,SAAU,CACX,MAAM,IAAIK,MAAM,CAAC,wBAAwB,CAAC,CAAE,AAChD,CAAC,AACL,CAAE,MAAOC,MAAO,CACZ,GAAIA,MAAMC,IAAI,GAAK,mBAAoB,CACnC,MAAM,IAAIF,MAAM,CAAC,sBAAsB,EAAEJ,eAAe,YAAY,CAAC,CAAC,AAC1E,CAAC,AAED,MAAMK,KAAM,AAChB,CAeAR,OAAOU,eAAe,CAACR,SAASQ,eAAe,EAE/CV,OAAOW,iBAAiB,CAACT,SAASS,iBAAiB,EAgBnDX,OAAOY,KAAK,CAACd,YAAYc,KAAK,CAACH,IAAI,CAACP,SAASW,SAAS,GAQtDb,OAAOc,QAAQ,CAAChB,YAAYgB,QAAQ,CAACL,IAAI,CAACP,SAASa,YAAY,GAkB/DnB,IAAIoB,yBAAyB,CAAC,sBAAuB,IAAM,CACvD,gBACChB,OAAOiB,SAAS,CAACf,SAASe,SAAS,EACvC,EASDrB,IAAIoB,yBAAyB,CAAC,iBAAkB,IAAM,CAClD,gBACChB,OAAOkB,QAAQ,GACnB,EASDtB,IAAIoB,yBAAyB,CAAC,cAAe,IAAM,CAC/C,CACI,eAAgB,CACZ,WAAY,CAAC,QAAS,yBAAyB,CAC/C,UAAY,CAAEG,QAAS,KAAK,AAAC,CACjC,EACH,CACDnB,OAAOoB,KAAK,GACZpB,OAAOqB,YAAY,GACtB,CACL,CACJ"}