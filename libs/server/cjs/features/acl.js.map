{"version":3,"sources":["../../lib/features/acl.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable acl feature\n * @module Feature_Acl\n */\n\nconst { _, eachAsync_ } = require('@galaxar/utils');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@galaxar/types');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature\n     * @param {Routable} app - The app module object\n     * @param {object} config - Acl settings\n     * @property {string} config.backend - Backend store type of acl, memory, mongodb, redis\n     * @property {string} [config.dataSource] - Store type of acl\n     * @property {object} [config.prefix] - Store options\n     * @returns {Promise.<*>}\n     * \n     * @example\n     * \n     * acl: {\n     *   backend: 'mongodb.dataSourceName'\n     * }\n     */\n    load_: async function (app, config) {\n        const Acl = app.tryRequire('acl');\n        let backend = config.backend || 'memory';\n        let backendType, backendStore;\n\n        if (backend.indexOf('.') > 0) {\n            backendType = '';\n        }\n\n        switch (backend) {\n            case 'memory':\n            backendStore = new Acl.memoryBackend();\n            break;\n\n            case 'mongodb':\n            if (!config.dataSource) {\n                throw new InvalidConfiguration('\"dataSource\" is required for mongodb backend of acl.', app, 'acl.dataSource');\n            }\n\n            let mongodb = app.getService(config.dataSource);\n            if (!mongodb) {\n                throw new InvalidConfiguration(`Data source \"${config.dataSource}\" not found.`, app, 'acl.dataSource');\n            }\n\n            backendStore = new Acl.mongodbBackend(await mongodb.connect_(), config.prefix);\n            break;\n\n            case 'redis':\n            throw new Error('to be implemented');\n            break;\n\n            default:\n            throw new InvalidConfiguration('Unsupported acl backend: ' + backend, app, 'acl.backend');\n        }        \n    \n        app.acl = new Acl(backendStore);       \n    }\n};"],"names":["_","eachAsync_","require","Feature","Enums","InvalidConfiguration","module","exports","type","PLUGIN","load_","app","config","Acl","tryRequire","backend","backendType","backendStore","indexOf","memoryBackend","dataSource","mongodb","getService","mongodbBackend","connect_","prefix","Error","acl"],"mappings":"AAAA,aAOA,KAAM,CAAEA,CAAC,CAAEC,UAAU,CAAE,CAAGC,QAAQ,kBAClC,KAAM,CAAEC,OAAO,CAAE,CAAGD,QAAQ,MAAME,KAAK,CACvC,KAAM,CAAEC,oBAAoB,CAAE,CAAGH,QAAQ,iBAEzCI,CAAAA,OAAOC,OAAO,CAAG,CAMbC,KAAML,QAAQM,MAAM,CAiBpBC,MAAO,eAAgBC,GAAG,CAAEC,MAAM,CAAE,CAChC,MAAMC,IAAMF,IAAIG,UAAU,CAAC,OAC3B,IAAIC,QAAUH,OAAOG,OAAO,EAAI,SAChC,IAAIC,YAAaC,aAEjB,GAAIF,QAAQG,OAAO,CAAC,KAAO,EAAG,CAC1BF,YAAc,EAClB,CAAC,AAED,OAAQD,SACJ,IAAK,SACLE,aAAe,IAAIJ,IAAIM,aAAa,CACpC,KAAM,AAEN,KAAK,UACL,GAAI,CAACP,OAAOQ,UAAU,CAAE,CACpB,MAAM,IAAIf,qBAAqB,uDAAwDM,IAAK,iBAAkB,AAClH,CAAC,AAED,IAAIU,QAAUV,IAAIW,UAAU,CAACV,OAAOQ,UAAU,EAC9C,GAAI,CAACC,QAAS,CACV,MAAM,IAAIhB,qBAAqB,CAAC,aAAa,EAAEO,OAAOQ,UAAU,CAAC,YAAY,CAAC,CAAET,IAAK,iBAAkB,AAC3G,CAAC,AAEDM,aAAe,IAAIJ,IAAIU,cAAc,CAAC,MAAMF,QAAQG,QAAQ,GAAIZ,OAAOa,MAAM,EAC7E,KAAM,AAEN,KAAK,QACL,MAAM,IAAIC,MAAM,oBAAqB,CACrC,KAAM,AAEN,SACA,MAAM,IAAIrB,qBAAqB,4BAA8BU,QAASJ,IAAK,cAAe,AAC9F,CAEAA,IAAIgB,GAAG,CAAG,IAAId,IAAII,aACtB,CACJ"}