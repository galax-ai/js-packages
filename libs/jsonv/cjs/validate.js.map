{"version":3,"sources":["../lib/validate.js"],"sourcesContent":["// JSON Validation Syntax \nimport { isPlainObject, get as _get } from '@galaxar/utils';\nimport JsvError from './JvsError';\nimport config, { getChildContext } from './config';\nimport ops from './validateOperators';\n\nconst MSG = config.messages;\n\nfunction getUnmatchedExplanation(op, leftValue, rightValue, context) {\n    if (context.$$ERROR) {\n        return context.$$ERROR;\n    }\n\n    if (!MSG.validationErrors) {\n        throw new Error('Please import locale first before using validators.');\n    }\n    const getter = MSG.validationErrors[op];\n    return getter(context.name, leftValue, rightValue, context);\n}\n\n/**\n * Tests whether a left-hand value satisfies a given operator and right-hand value.\n * @param {*} left - The left-hand value to test.\n * @param {string} op - The operator to use for the test.\n * @param {*} right - The right-hand value to test against.\n * @param {Object} options - Options to use for the test.\n * @param {Object} context - The current context of the data structure being validated.\n * @returns {*} The result of the test.\n * @throws {Error} If the specified operator does not have a registered validator.\n */\nexport function test(left, op, right, options, context) {\n    const handler = config.getValidator(op);\n\n    if (!handler) {\n        throw new Error(MSG.INVALID_TEST_HANLDER(op));\n    }\n\n    return handler(left, right, options, context);\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} jvs - Expected state in JSON Expression Syntax\n * @param {*} options - Validation options\n * @param {*} context - Validation context\n * @returns {array} - [ {boolean} matched, {string} unmatchedReason ]\n */\nfunction validate(actual, jvs, options = { throwError: true, abortEarly: true }, context = {}) {\n    if (jvs == null) {\n        return true;\n    }\n\n    const type = typeof jvs;\n\n    if (type === 'string') {\n        if (jvs.length === 0 || jvs[0] !== '$') {\n            throw new Error(MSG.SYNTAX_INVALID_EXPR(jvs));\n        }\n\n        if (jvs.startsWith('$$')) {\n            return validate(actual, { $equal: jvs }, options, context); \n        }\n\n        return validate(actual, { [jvs]: null }, options, context);\n    }\n\n    const { throwError, abortEarly, asPredicate, plainError } = options;    \n\n    if (Array.isArray(jvs)) {\n        return validate(actual, { $match: jvs }, options, context); \n    }\n\n    if (type !== 'object') {\n        return validate(actual, { $equal: jvs }, options, context); \n    }\n\n    let { path } = context;\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    for (let operator in jvs) {\n        let op, left, _context; \n\n        const opValue = jvs[operator];\n\n        if (\n            // $match\n            (operator.length > 1 && operator[0] === '$') ||\n            // |>$all\n            (operator.length > 3 && operator[0] === '|' && operator[2] === '$')\n        ) {\n            //validator\n            op = config.getValidatorTag(operator);\n            if (!op) {\n                throw new Error(MSG.UNSUPPORTED_VALIDATION_OP(operator, path));\n            }\n\n            left = actual;\n            _context = context;\n        } else {\n            const fieldName = operator;\n            let isComplexKey = fieldName.indexOf('.') !== -1;\n\n            //pick a field and then apply manipulation\n            left = actual != null ? (isComplexKey ? _get(actual, fieldName) : actual[fieldName]) : undefined;\n\n            _context = getChildContext(context, actual, fieldName, left);\n\n            if (opValue != null && typeof opValue === 'object') {\n                op = ops.MATCH;\n            } else {\n                op = ops.EQUAL;\n            }\n        }\n\n        if (!test(left, op, opValue, _options, _context)) {\n            if (asPredicate) {\n                return false;\n            }\n\n            const reason = getUnmatchedExplanation(op, left, opValue, _context);\n            if (abortEarly && throwError) {\n                throw new JsvError(reason, left, _context.path);\n            }\n\n            errors.push(plainError ? reason : new JsvError(reason, left, _context.path));\n            if (abortEarly) {\n                break;\n            }\n        }\n    }\n\n    if (errors.length > 0) {\n        if (asPredicate) {\n            return false;\n        }\n\n        if (throwError) {\n            throw new JsvError(errors, actual, path);\n        }\n\n        return errors.length === 1 && plainError ? errors[0] : errors;\n    }\n\n    return true;\n}\n\nexport default validate;\n"],"names":["test","MSG","config","messages","getUnmatchedExplanation","op","leftValue","rightValue","context","$$ERROR","validationErrors","Error","getter","name","left","right","options","handler","getValidator","INVALID_TEST_HANLDER","validate","actual","jvs","throwError","abortEarly","type","length","SYNTAX_INVALID_EXPR","startsWith","$equal","asPredicate","plainError","Array","isArray","$match","path","errors","_options","operator","_context","opValue","getValidatorTag","UNSUPPORTED_VALIDATION_OP","fieldName","isComplexKey","indexOf","_get","undefined","getChildContext","ops","MATCH","EQUAL","reason","JsvError","push"],"mappings":"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"}