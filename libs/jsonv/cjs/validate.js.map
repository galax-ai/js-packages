{"version":3,"sources":["../lib/validate.js"],"sourcesContent":["// JSON Validation Syntax \nimport { isPlainObject, get as _get } from '@galaxar/utils';\nimport JsvError from './JvsError';\nimport config, { getChildContext } from './config';\nimport ops from './validateOperators';\n\nconst MSG = config.messages;\n\nfunction getUnmatchedExplanation(op, leftValue, rightValue, context) {\n    if (context.$$ERROR) {\n        return context.$$ERROR;\n    }\n\n    if (!MSG.validationErrors) {\n        throw new Error('Please import locale first before using validators.');\n    }\n    const getter = MSG.validationErrors[op];\n    return getter(context.name, leftValue, rightValue, context);\n}\n\n/**\n * Tests whether a left-hand value satisfies a given operator and right-hand value.\n * @param {*} left - The left-hand value to test.\n * @param {string} op - The operator to use for the test.\n * @param {*} right - The right-hand value to test against.\n * @param {Object} options - Options to use for the test.\n * @param {Object} context - The current context of the data structure being validated.\n * @returns {*} The result of the test.\n * @throws {Error} If the specified operator does not have a registered validator.\n */\nexport function test(left, op, right, options, context) {\n    const handler = config.getValidator(op);\n\n    if (!handler) {\n        throw new Error(MSG.INVALID_TEST_HANLDER(op));\n    }\n\n    return handler(left, right, options, context);\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} jvs - Expected state in JSON Expression Syntax\n * @param {*} options - Validation options\n * @param {*} context - Validation context\n * @returns {array} - [ {boolean} matched, {string} unmatchedReason ]\n */\nfunction validate(actual, jvs, options = { throwError: true, abortEarly: true }, context = {}) {\n    if (jvs == null) {\n        return true;\n    }\n\n    const type = typeof jvs;\n\n    if (type === 'string') {\n        if (jvs.length === 0 || jvs[0] !== '$') {\n            throw new Error(MSG.SYNTAX_INVALID_EXPR(jvs));\n        }\n\n        if (jvs.startsWith('$$')) {\n            return validate(actual, { $equal: jvs }, options, context); \n        }\n\n        return validate(actual, { [jvs]: null }, options, context);\n    }\n\n    const { throwError, abortEarly, asPredicate, plainError } = options;    \n\n    if (Array.isArray(jvs)) {\n        return validate(actual, { $match: jvs }, options, context); \n    }\n\n    if (type !== 'object') {\n        return validate(actual, { $equal: jvs }, options, context); \n    }\n\n    let { path } = context;\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    for (let operator in jvs) {\n        let op, left, _context; \n\n        const opValue = jvs[operator];\n\n        if (\n            // $match\n            (operator.length > 1 && operator[0] === '$') ||\n            // |>$all\n            (operator.length > 3 && operator[0] === '|' && operator[2] === '$')\n        ) {\n            //validator\n            op = config.getValidatorTag(operator);\n            if (!op) {\n                throw new Error(MSG.UNSUPPORTED_VALIDATION_OP(operator, path));\n            }\n\n            left = actual;\n            _context = context;\n        } else {\n            const fieldName = operator;\n            let isComplexKey = fieldName.indexOf('.') !== -1;\n\n            //pick a field and then apply manipulation\n            left = actual != null ? (isComplexKey ? _get(actual, fieldName) : actual[fieldName]) : undefined;\n\n            _context = getChildContext(context, actual, fieldName, left);\n\n            console.log('left', { left, actual, fieldName, opValue });\n\n            if (opValue != null && typeof opValue === 'object') {\n                op = ops.MATCH;\n            } else {\n                op = ops.EQUAL;\n            }\n        }\n\n        if (!test(left, op, opValue, _options, _context)) {\n            if (asPredicate) {\n                return false;\n            }\n\n            const reason = getUnmatchedExplanation(op, left, opValue, _context);\n            if (abortEarly && throwError) {\n                throw new JsvError(reason, left, _context.path);\n            }\n\n            errors.push(plainError ? reason : new JsvError(reason, left, _context.path));\n            if (abortEarly) {\n                break;\n            }\n        }\n    }\n\n    if (errors.length > 0) {\n        if (asPredicate) {\n            return false;\n        }\n\n        if (throwError) {\n            throw new JsvError(errors, actual, path);\n        }\n\n        return errors.length === 1 && plainError ? errors[0] : errors;\n    }\n\n    return true;\n}\n\nexport default validate;\n"],"names":["test","MSG","config","messages","getUnmatchedExplanation","op","leftValue","rightValue","context","$$ERROR","validationErrors","Error","getter","name","left","right","options","handler","getValidator","INVALID_TEST_HANLDER","validate","actual","jvs","throwError","abortEarly","type","length","SYNTAX_INVALID_EXPR","startsWith","$equal","asPredicate","plainError","Array","isArray","$match","path","errors","_options","operator","_context","opValue","getValidatorTag","UNSUPPORTED_VALIDATION_OP","fieldName","isComplexKey","indexOf","_get","undefined","getChildContext","console","log","ops","MATCH","EQUAL","reason","JsvError","push"],"mappings":"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"}